{
  "endOfFileToken": {
    "kind": "EndOfFileToken"
  },
  "fileName": "data/dts/lib.es2021.weakref.d.ts",
  "hasNoDefaultLib": true,
  "isDeclarationFile": true,
  "kind": "SourceFile",
  "libReferenceDirectives": [],
  "referencedFiles": [],
  "statements": [
    {
      "kind": "InterfaceDeclaration",
      "members": [
        {
          "kind": "PropertySignature",
          "modifiers": [
            {
              "kind": "ReadonlyKeyword"
            }
          ],
          "name": {
            "expression": {
              "expression": {
                "kind": "Identifier",
                "text": "Symbol"
              },
              "kind": "PropertyAccessExpression",
              "name": {
                "kind": "Identifier",
                "text": "toStringTag"
              }
            },
            "kind": "ComputedPropertyName"
          },
          "type": {
            "kind": "LiteralType",
            "literal": {
              "kind": "StringLiteral",
              "text": "WeakRef"
            }
          }
        },
        {
          "kind": "MethodSignature",
          "name": {
            "kind": "Identifier",
            "text": "deref"
          },
          "parameters": [],
          "type": {
            "kind": "UnionType",
            "types": [
              {
                "kind": "TypeReference",
                "typeName": {
                  "kind": "Identifier",
                  "text": "T"
                }
              },
              {
                "kind": "UndefinedKeyword"
              }
            ]
          }
        }
      ],
      "name": {
        "kind": "Identifier",
        "text": "WeakRef"
      }
    },
    {
      "kind": "InterfaceDeclaration",
      "members": [
        {
          "kind": "PropertySignature",
          "modifiers": [
            {
              "kind": "ReadonlyKeyword"
            }
          ],
          "name": {
            "kind": "Identifier",
            "text": "prototype"
          },
          "type": {
            "kind": "TypeReference",
            "typeArguments": [
              {
                "kind": "AnyKeyword"
              }
            ],
            "typeName": {
              "kind": "Identifier",
              "text": "WeakRef"
            }
          }
        },
        {
          "kind": "ConstructSignature",
          "parameters": [
            {
              "kind": "Parameter",
              "name": {
                "kind": "Identifier",
                "text": "target"
              },
              "type": {
                "kind": "TypeReference",
                "typeName": {
                  "kind": "Identifier",
                  "text": "T"
                }
              }
            }
          ],
          "type": {
            "kind": "TypeReference",
            "typeArguments": [
              {
                "kind": "TypeReference",
                "typeName": {
                  "kind": "Identifier",
                  "text": "T"
                }
              }
            ],
            "typeName": {
              "kind": "Identifier",
              "text": "WeakRef"
            }
          }
        }
      ],
      "name": {
        "kind": "Identifier",
        "text": "WeakRefConstructor"
      }
    },
    {
      "declarationList": {
        "declarations": [
          {
            "kind": "VariableDeclaration",
            "name": {
              "kind": "Identifier",
              "text": "WeakRef"
            },
            "type": {
              "kind": "TypeReference",
              "typeName": {
                "kind": "Identifier",
                "text": "WeakRefConstructor"
              }
            }
          }
        ],
        "kind": "VariableDeclarationList"
      },
      "kind": "FirstStatement",
      "modifiers": [
        {
          "kind": "DeclareKeyword"
        }
      ]
    },
    {
      "kind": "InterfaceDeclaration",
      "members": [
        {
          "kind": "PropertySignature",
          "modifiers": [
            {
              "kind": "ReadonlyKeyword"
            }
          ],
          "name": {
            "expression": {
              "expression": {
                "kind": "Identifier",
                "text": "Symbol"
              },
              "kind": "PropertyAccessExpression",
              "name": {
                "kind": "Identifier",
                "text": "toStringTag"
              }
            },
            "kind": "ComputedPropertyName"
          },
          "type": {
            "kind": "LiteralType",
            "literal": {
              "kind": "StringLiteral",
              "text": "FinalizationRegistry"
            }
          }
        },
        {
          "kind": "MethodSignature",
          "name": {
            "kind": "Identifier",
            "text": "register"
          },
          "parameters": [
            {
              "kind": "Parameter",
              "name": {
                "kind": "Identifier",
                "text": "target"
              },
              "type": {
                "kind": "TypeReference",
                "typeName": {
                  "kind": "Identifier",
                  "text": "WeakKey"
                }
              }
            },
            {
              "kind": "Parameter",
              "name": {
                "kind": "Identifier",
                "text": "heldValue"
              },
              "type": {
                "kind": "TypeReference",
                "typeName": {
                  "kind": "Identifier",
                  "text": "T"
                }
              }
            },
            {
              "kind": "Parameter",
              "name": {
                "kind": "Identifier",
                "text": "unregisterToken"
              },
              "questionToken": {
                "kind": "QuestionToken"
              },
              "type": {
                "kind": "TypeReference",
                "typeName": {
                  "kind": "Identifier",
                  "text": "WeakKey"
                }
              }
            }
          ],
          "type": {
            "kind": "VoidKeyword"
          }
        },
        {
          "kind": "MethodSignature",
          "name": {
            "kind": "Identifier",
            "text": "unregister"
          },
          "parameters": [
            {
              "kind": "Parameter",
              "name": {
                "kind": "Identifier",
                "text": "unregisterToken"
              },
              "type": {
                "kind": "TypeReference",
                "typeName": {
                  "kind": "Identifier",
                  "text": "WeakKey"
                }
              }
            }
          ],
          "type": {
            "kind": "BooleanKeyword"
          }
        }
      ],
      "name": {
        "kind": "Identifier",
        "text": "FinalizationRegistry"
      }
    },
    {
      "kind": "InterfaceDeclaration",
      "members": [
        {
          "kind": "PropertySignature",
          "modifiers": [
            {
              "kind": "ReadonlyKeyword"
            }
          ],
          "name": {
            "kind": "Identifier",
            "text": "prototype"
          },
          "type": {
            "kind": "TypeReference",
            "typeArguments": [
              {
                "kind": "AnyKeyword"
              }
            ],
            "typeName": {
              "kind": "Identifier",
              "text": "FinalizationRegistry"
            }
          }
        },
        {
          "kind": "ConstructSignature",
          "parameters": [
            {
              "kind": "Parameter",
              "name": {
                "kind": "Identifier",
                "text": "cleanupCallback"
              },
              "type": {
                "kind": "FunctionType",
                "parameters": [
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "heldValue"
                    },
                    "type": {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "T"
                      }
                    }
                  }
                ],
                "type": {
                  "kind": "VoidKeyword"
                }
              }
            }
          ],
          "type": {
            "kind": "TypeReference",
            "typeArguments": [
              {
                "kind": "TypeReference",
                "typeName": {
                  "kind": "Identifier",
                  "text": "T"
                }
              }
            ],
            "typeName": {
              "kind": "Identifier",
              "text": "FinalizationRegistry"
            }
          }
        }
      ],
      "name": {
        "kind": "Identifier",
        "text": "FinalizationRegistryConstructor"
      }
    },
    {
      "declarationList": {
        "declarations": [
          {
            "kind": "VariableDeclaration",
            "name": {
              "kind": "Identifier",
              "text": "FinalizationRegistry"
            },
            "type": {
              "kind": "TypeReference",
              "typeName": {
                "kind": "Identifier",
                "text": "FinalizationRegistryConstructor"
              }
            }
          }
        ],
        "kind": "VariableDeclarationList"
      },
      "kind": "FirstStatement",
      "modifiers": [
        {
          "kind": "DeclareKeyword"
        }
      ]
    }
  ],
  "text": "/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib=\"true\"/>\n\ninterface WeakRef<T extends WeakKey> {\n    readonly [Symbol.toStringTag]: \"WeakRef\";\n\n    /**\n     * Returns the WeakRef instance's target value, or undefined if the target value has been\n     * reclaimed.\n     * In es2023 the value can be either a symbol or an object, in previous versions only object is permissible.\n     */\n    deref(): T | undefined;\n}\n\ninterface WeakRefConstructor {\n    readonly prototype: WeakRef<any>;\n\n    /**\n     * Creates a WeakRef instance for the given target value.\n     * In es2023 the value can be either a symbol or an object, in previous versions only object is permissible.\n     * @param target The target value for the WeakRef instance.\n     */\n    new <T extends WeakKey>(target: T): WeakRef<T>;\n}\n\ndeclare var WeakRef: WeakRefConstructor;\n\ninterface FinalizationRegistry<T> {\n    readonly [Symbol.toStringTag]: \"FinalizationRegistry\";\n\n    /**\n     * Registers a value with the registry.\n     * In es2023 the value can be either a symbol or an object, in previous versions only object is permissible.\n     * @param target The target value to register.\n     * @param heldValue The value to pass to the finalizer for this value. This cannot be the\n     * target value.\n     * @param unregisterToken The token to pass to the unregister method to unregister the target\n     * value. If not provided, the target cannot be unregistered.\n     */\n    register(target: WeakKey, heldValue: T, unregisterToken?: WeakKey): void;\n\n    /**\n     * Unregisters a value from the registry.\n     * In es2023 the value can be either a symbol or an object, in previous versions only object is permissible.\n     * @param unregisterToken The token that was used as the unregisterToken argument when calling\n     * register to register the target value.\n     */\n    unregister(unregisterToken: WeakKey): boolean;\n}\n\ninterface FinalizationRegistryConstructor {\n    readonly prototype: FinalizationRegistry<any>;\n\n    /**\n     * Creates a finalization registry with an associated cleanup callback\n     * @param cleanupCallback The callback to call after a value in the registry has been reclaimed.\n     */\n    new <T>(cleanupCallback: (heldValue: T) => void): FinalizationRegistry<T>;\n}\n\ndeclare var FinalizationRegistry: FinalizationRegistryConstructor;\n",
  "typeReferenceDirectives": []
}
