{
  "endOfFileToken": {
    "kind": "EndOfFileToken"
  },
  "fileName": "data/dts/lib.deno.ns.d.ts",
  "hasNoDefaultLib": true,
  "isDeclarationFile": true,
  "kind": "SourceFile",
  "libReferenceDirectives": [
    {
      "fileName": "esnext"
    },
    {
      "fileName": "deno.net"
    }
  ],
  "referencedFiles": [],
  "statements": [
    {
      "kind": "InterfaceDeclaration",
      "members": [
        {
          "kind": "PropertySignature",
          "name": {
            "kind": "Identifier",
            "text": "url"
          },
          "type": {
            "kind": "StringKeyword"
          }
        },
        {
          "kind": "PropertySignature",
          "name": {
            "kind": "Identifier",
            "text": "filename"
          },
          "questionToken": {
            "kind": "QuestionToken"
          },
          "type": {
            "kind": "StringKeyword"
          }
        },
        {
          "kind": "PropertySignature",
          "name": {
            "kind": "Identifier",
            "text": "dirname"
          },
          "questionToken": {
            "kind": "QuestionToken"
          },
          "type": {
            "kind": "StringKeyword"
          }
        },
        {
          "kind": "PropertySignature",
          "name": {
            "kind": "Identifier",
            "text": "main"
          },
          "type": {
            "kind": "BooleanKeyword"
          }
        },
        {
          "kind": "MethodSignature",
          "name": {
            "kind": "Identifier",
            "text": "resolve"
          },
          "parameters": [
            {
              "kind": "Parameter",
              "name": {
                "kind": "Identifier",
                "text": "specifier"
              },
              "type": {
                "kind": "StringKeyword"
              }
            }
          ],
          "type": {
            "kind": "StringKeyword"
          }
        }
      ],
      "modifiers": [
        {
          "kind": "DeclareKeyword"
        }
      ],
      "name": {
        "kind": "Identifier",
        "text": "ImportMeta"
      }
    },
    {
      "kind": "InterfaceDeclaration",
      "members": [
        {
          "kind": "MethodSignature",
          "name": {
            "kind": "Identifier",
            "text": "mark"
          },
          "parameters": [
            {
              "kind": "Parameter",
              "name": {
                "kind": "Identifier",
                "text": "markName"
              },
              "type": {
                "kind": "StringKeyword"
              }
            },
            {
              "kind": "Parameter",
              "name": {
                "kind": "Identifier",
                "text": "options"
              },
              "questionToken": {
                "kind": "QuestionToken"
              },
              "type": {
                "kind": "TypeReference",
                "typeName": {
                  "kind": "Identifier",
                  "text": "PerformanceMarkOptions"
                }
              }
            }
          ],
          "type": {
            "kind": "TypeReference",
            "typeName": {
              "kind": "Identifier",
              "text": "PerformanceMark"
            }
          }
        },
        {
          "kind": "MethodSignature",
          "name": {
            "kind": "Identifier",
            "text": "measure"
          },
          "parameters": [
            {
              "kind": "Parameter",
              "name": {
                "kind": "Identifier",
                "text": "measureName"
              },
              "type": {
                "kind": "StringKeyword"
              }
            },
            {
              "kind": "Parameter",
              "name": {
                "kind": "Identifier",
                "text": "options"
              },
              "questionToken": {
                "kind": "QuestionToken"
              },
              "type": {
                "kind": "TypeReference",
                "typeName": {
                  "kind": "Identifier",
                  "text": "PerformanceMeasureOptions"
                }
              }
            }
          ],
          "type": {
            "kind": "TypeReference",
            "typeName": {
              "kind": "Identifier",
              "text": "PerformanceMeasure"
            }
          }
        }
      ],
      "modifiers": [
        {
          "kind": "DeclareKeyword"
        }
      ],
      "name": {
        "kind": "Identifier",
        "text": "Performance"
      }
    },
    {
      "kind": "InterfaceDeclaration",
      "members": [
        {
          "kind": "PropertySignature",
          "name": {
            "kind": "Identifier",
            "text": "detail"
          },
          "questionToken": {
            "kind": "QuestionToken"
          },
          "type": {
            "kind": "AnyKeyword"
          }
        },
        {
          "kind": "PropertySignature",
          "name": {
            "kind": "Identifier",
            "text": "startTime"
          },
          "questionToken": {
            "kind": "QuestionToken"
          },
          "type": {
            "kind": "NumberKeyword"
          }
        }
      ],
      "modifiers": [
        {
          "kind": "DeclareKeyword"
        }
      ],
      "name": {
        "kind": "Identifier",
        "text": "PerformanceMarkOptions"
      }
    },
    {
      "kind": "InterfaceDeclaration",
      "members": [
        {
          "kind": "PropertySignature",
          "name": {
            "kind": "Identifier",
            "text": "detail"
          },
          "questionToken": {
            "kind": "QuestionToken"
          },
          "type": {
            "kind": "AnyKeyword"
          }
        },
        {
          "kind": "PropertySignature",
          "name": {
            "kind": "Identifier",
            "text": "start"
          },
          "questionToken": {
            "kind": "QuestionToken"
          },
          "type": {
            "kind": "UnionType",
            "types": [
              {
                "kind": "StringKeyword"
              },
              {
                "kind": "NumberKeyword"
              }
            ]
          }
        },
        {
          "kind": "PropertySignature",
          "name": {
            "kind": "Identifier",
            "text": "duration"
          },
          "questionToken": {
            "kind": "QuestionToken"
          },
          "type": {
            "kind": "NumberKeyword"
          }
        },
        {
          "kind": "PropertySignature",
          "name": {
            "kind": "Identifier",
            "text": "end"
          },
          "questionToken": {
            "kind": "QuestionToken"
          },
          "type": {
            "kind": "UnionType",
            "types": [
              {
                "kind": "StringKeyword"
              },
              {
                "kind": "NumberKeyword"
              }
            ]
          }
        }
      ],
      "modifiers": [
        {
          "kind": "DeclareKeyword"
        }
      ],
      "name": {
        "kind": "Identifier",
        "text": "PerformanceMeasureOptions"
      }
    },
    {
      "body": {
        "kind": "ModuleBlock",
        "statements": [
          {
            "body": {
              "kind": "ModuleBlock",
              "statements": [
                {
                  "heritageClauses": [
                    {
                      "kind": "HeritageClause",
                      "token": "ExtendsKeyword",
                      "types": [
                        {
                          "expression": {
                            "kind": "Identifier",
                            "text": "Error"
                          },
                          "kind": "ExpressionWithTypeArguments"
                        }
                      ]
                    }
                  ],
                  "kind": "ClassDeclaration",
                  "members": [],
                  "modifiers": [
                    {
                      "kind": "ExportKeyword"
                    }
                  ],
                  "name": {
                    "kind": "Identifier",
                    "text": "NotFound"
                  }
                },
                {
                  "heritageClauses": [
                    {
                      "kind": "HeritageClause",
                      "token": "ExtendsKeyword",
                      "types": [
                        {
                          "expression": {
                            "kind": "Identifier",
                            "text": "Error"
                          },
                          "kind": "ExpressionWithTypeArguments"
                        }
                      ]
                    }
                  ],
                  "kind": "ClassDeclaration",
                  "members": [],
                  "modifiers": [
                    {
                      "kind": "ExportKeyword"
                    }
                  ],
                  "name": {
                    "kind": "Identifier",
                    "text": "PermissionDenied"
                  }
                },
                {
                  "heritageClauses": [
                    {
                      "kind": "HeritageClause",
                      "token": "ExtendsKeyword",
                      "types": [
                        {
                          "expression": {
                            "kind": "Identifier",
                            "text": "Error"
                          },
                          "kind": "ExpressionWithTypeArguments"
                        }
                      ]
                    }
                  ],
                  "kind": "ClassDeclaration",
                  "members": [],
                  "modifiers": [
                    {
                      "kind": "ExportKeyword"
                    }
                  ],
                  "name": {
                    "kind": "Identifier",
                    "text": "ConnectionRefused"
                  }
                },
                {
                  "heritageClauses": [
                    {
                      "kind": "HeritageClause",
                      "token": "ExtendsKeyword",
                      "types": [
                        {
                          "expression": {
                            "kind": "Identifier",
                            "text": "Error"
                          },
                          "kind": "ExpressionWithTypeArguments"
                        }
                      ]
                    }
                  ],
                  "kind": "ClassDeclaration",
                  "members": [],
                  "modifiers": [
                    {
                      "kind": "ExportKeyword"
                    }
                  ],
                  "name": {
                    "kind": "Identifier",
                    "text": "ConnectionReset"
                  }
                },
                {
                  "heritageClauses": [
                    {
                      "kind": "HeritageClause",
                      "token": "ExtendsKeyword",
                      "types": [
                        {
                          "expression": {
                            "kind": "Identifier",
                            "text": "Error"
                          },
                          "kind": "ExpressionWithTypeArguments"
                        }
                      ]
                    }
                  ],
                  "kind": "ClassDeclaration",
                  "members": [],
                  "modifiers": [
                    {
                      "kind": "ExportKeyword"
                    }
                  ],
                  "name": {
                    "kind": "Identifier",
                    "text": "ConnectionAborted"
                  }
                },
                {
                  "heritageClauses": [
                    {
                      "kind": "HeritageClause",
                      "token": "ExtendsKeyword",
                      "types": [
                        {
                          "expression": {
                            "kind": "Identifier",
                            "text": "Error"
                          },
                          "kind": "ExpressionWithTypeArguments"
                        }
                      ]
                    }
                  ],
                  "kind": "ClassDeclaration",
                  "members": [],
                  "modifiers": [
                    {
                      "kind": "ExportKeyword"
                    }
                  ],
                  "name": {
                    "kind": "Identifier",
                    "text": "NotConnected"
                  }
                },
                {
                  "heritageClauses": [
                    {
                      "kind": "HeritageClause",
                      "token": "ExtendsKeyword",
                      "types": [
                        {
                          "expression": {
                            "kind": "Identifier",
                            "text": "Error"
                          },
                          "kind": "ExpressionWithTypeArguments"
                        }
                      ]
                    }
                  ],
                  "kind": "ClassDeclaration",
                  "members": [],
                  "modifiers": [
                    {
                      "kind": "ExportKeyword"
                    }
                  ],
                  "name": {
                    "kind": "Identifier",
                    "text": "AddrInUse"
                  }
                },
                {
                  "heritageClauses": [
                    {
                      "kind": "HeritageClause",
                      "token": "ExtendsKeyword",
                      "types": [
                        {
                          "expression": {
                            "kind": "Identifier",
                            "text": "Error"
                          },
                          "kind": "ExpressionWithTypeArguments"
                        }
                      ]
                    }
                  ],
                  "kind": "ClassDeclaration",
                  "members": [],
                  "modifiers": [
                    {
                      "kind": "ExportKeyword"
                    }
                  ],
                  "name": {
                    "kind": "Identifier",
                    "text": "AddrNotAvailable"
                  }
                },
                {
                  "heritageClauses": [
                    {
                      "kind": "HeritageClause",
                      "token": "ExtendsKeyword",
                      "types": [
                        {
                          "expression": {
                            "kind": "Identifier",
                            "text": "Error"
                          },
                          "kind": "ExpressionWithTypeArguments"
                        }
                      ]
                    }
                  ],
                  "kind": "ClassDeclaration",
                  "members": [],
                  "modifiers": [
                    {
                      "kind": "ExportKeyword"
                    }
                  ],
                  "name": {
                    "kind": "Identifier",
                    "text": "BrokenPipe"
                  }
                },
                {
                  "heritageClauses": [
                    {
                      "kind": "HeritageClause",
                      "token": "ExtendsKeyword",
                      "types": [
                        {
                          "expression": {
                            "kind": "Identifier",
                            "text": "Error"
                          },
                          "kind": "ExpressionWithTypeArguments"
                        }
                      ]
                    }
                  ],
                  "kind": "ClassDeclaration",
                  "members": [],
                  "modifiers": [
                    {
                      "kind": "ExportKeyword"
                    }
                  ],
                  "name": {
                    "kind": "Identifier",
                    "text": "AlreadyExists"
                  }
                },
                {
                  "heritageClauses": [
                    {
                      "kind": "HeritageClause",
                      "token": "ExtendsKeyword",
                      "types": [
                        {
                          "expression": {
                            "kind": "Identifier",
                            "text": "Error"
                          },
                          "kind": "ExpressionWithTypeArguments"
                        }
                      ]
                    }
                  ],
                  "kind": "ClassDeclaration",
                  "members": [],
                  "modifiers": [
                    {
                      "kind": "ExportKeyword"
                    }
                  ],
                  "name": {
                    "kind": "Identifier",
                    "text": "InvalidData"
                  }
                },
                {
                  "heritageClauses": [
                    {
                      "kind": "HeritageClause",
                      "token": "ExtendsKeyword",
                      "types": [
                        {
                          "expression": {
                            "kind": "Identifier",
                            "text": "Error"
                          },
                          "kind": "ExpressionWithTypeArguments"
                        }
                      ]
                    }
                  ],
                  "kind": "ClassDeclaration",
                  "members": [],
                  "modifiers": [
                    {
                      "kind": "ExportKeyword"
                    }
                  ],
                  "name": {
                    "kind": "Identifier",
                    "text": "TimedOut"
                  }
                },
                {
                  "heritageClauses": [
                    {
                      "kind": "HeritageClause",
                      "token": "ExtendsKeyword",
                      "types": [
                        {
                          "expression": {
                            "kind": "Identifier",
                            "text": "Error"
                          },
                          "kind": "ExpressionWithTypeArguments"
                        }
                      ]
                    }
                  ],
                  "kind": "ClassDeclaration",
                  "members": [],
                  "modifiers": [
                    {
                      "kind": "ExportKeyword"
                    }
                  ],
                  "name": {
                    "kind": "Identifier",
                    "text": "Interrupted"
                  }
                },
                {
                  "heritageClauses": [
                    {
                      "kind": "HeritageClause",
                      "token": "ExtendsKeyword",
                      "types": [
                        {
                          "expression": {
                            "kind": "Identifier",
                            "text": "Error"
                          },
                          "kind": "ExpressionWithTypeArguments"
                        }
                      ]
                    }
                  ],
                  "kind": "ClassDeclaration",
                  "members": [],
                  "modifiers": [
                    {
                      "kind": "ExportKeyword"
                    }
                  ],
                  "name": {
                    "kind": "Identifier",
                    "text": "WouldBlock"
                  }
                },
                {
                  "heritageClauses": [
                    {
                      "kind": "HeritageClause",
                      "token": "ExtendsKeyword",
                      "types": [
                        {
                          "expression": {
                            "kind": "Identifier",
                            "text": "Error"
                          },
                          "kind": "ExpressionWithTypeArguments"
                        }
                      ]
                    }
                  ],
                  "kind": "ClassDeclaration",
                  "members": [],
                  "modifiers": [
                    {
                      "kind": "ExportKeyword"
                    }
                  ],
                  "name": {
                    "kind": "Identifier",
                    "text": "WriteZero"
                  }
                },
                {
                  "heritageClauses": [
                    {
                      "kind": "HeritageClause",
                      "token": "ExtendsKeyword",
                      "types": [
                        {
                          "expression": {
                            "kind": "Identifier",
                            "text": "Error"
                          },
                          "kind": "ExpressionWithTypeArguments"
                        }
                      ]
                    }
                  ],
                  "kind": "ClassDeclaration",
                  "members": [],
                  "modifiers": [
                    {
                      "kind": "ExportKeyword"
                    }
                  ],
                  "name": {
                    "kind": "Identifier",
                    "text": "UnexpectedEof"
                  }
                },
                {
                  "heritageClauses": [
                    {
                      "kind": "HeritageClause",
                      "token": "ExtendsKeyword",
                      "types": [
                        {
                          "expression": {
                            "kind": "Identifier",
                            "text": "Error"
                          },
                          "kind": "ExpressionWithTypeArguments"
                        }
                      ]
                    }
                  ],
                  "kind": "ClassDeclaration",
                  "members": [],
                  "modifiers": [
                    {
                      "kind": "ExportKeyword"
                    }
                  ],
                  "name": {
                    "kind": "Identifier",
                    "text": "BadResource"
                  }
                },
                {
                  "heritageClauses": [
                    {
                      "kind": "HeritageClause",
                      "token": "ExtendsKeyword",
                      "types": [
                        {
                          "expression": {
                            "kind": "Identifier",
                            "text": "Error"
                          },
                          "kind": "ExpressionWithTypeArguments"
                        }
                      ]
                    }
                  ],
                  "kind": "ClassDeclaration",
                  "members": [],
                  "modifiers": [
                    {
                      "kind": "ExportKeyword"
                    }
                  ],
                  "name": {
                    "kind": "Identifier",
                    "text": "Http"
                  }
                },
                {
                  "heritageClauses": [
                    {
                      "kind": "HeritageClause",
                      "token": "ExtendsKeyword",
                      "types": [
                        {
                          "expression": {
                            "kind": "Identifier",
                            "text": "Error"
                          },
                          "kind": "ExpressionWithTypeArguments"
                        }
                      ]
                    }
                  ],
                  "kind": "ClassDeclaration",
                  "members": [],
                  "modifiers": [
                    {
                      "kind": "ExportKeyword"
                    }
                  ],
                  "name": {
                    "kind": "Identifier",
                    "text": "Busy"
                  }
                },
                {
                  "heritageClauses": [
                    {
                      "kind": "HeritageClause",
                      "token": "ExtendsKeyword",
                      "types": [
                        {
                          "expression": {
                            "kind": "Identifier",
                            "text": "Error"
                          },
                          "kind": "ExpressionWithTypeArguments"
                        }
                      ]
                    }
                  ],
                  "kind": "ClassDeclaration",
                  "members": [],
                  "modifiers": [
                    {
                      "kind": "ExportKeyword"
                    }
                  ],
                  "name": {
                    "kind": "Identifier",
                    "text": "NotSupported"
                  }
                },
                {
                  "heritageClauses": [
                    {
                      "kind": "HeritageClause",
                      "token": "ExtendsKeyword",
                      "types": [
                        {
                          "expression": {
                            "kind": "Identifier",
                            "text": "Error"
                          },
                          "kind": "ExpressionWithTypeArguments"
                        }
                      ]
                    }
                  ],
                  "kind": "ClassDeclaration",
                  "members": [],
                  "modifiers": [
                    {
                      "kind": "ExportKeyword"
                    }
                  ],
                  "name": {
                    "kind": "Identifier",
                    "text": "FilesystemLoop"
                  }
                },
                {
                  "heritageClauses": [
                    {
                      "kind": "HeritageClause",
                      "token": "ExtendsKeyword",
                      "types": [
                        {
                          "expression": {
                            "kind": "Identifier",
                            "text": "Error"
                          },
                          "kind": "ExpressionWithTypeArguments"
                        }
                      ]
                    }
                  ],
                  "kind": "ClassDeclaration",
                  "members": [],
                  "modifiers": [
                    {
                      "kind": "ExportKeyword"
                    }
                  ],
                  "name": {
                    "kind": "Identifier",
                    "text": "IsADirectory"
                  }
                },
                {
                  "heritageClauses": [
                    {
                      "kind": "HeritageClause",
                      "token": "ExtendsKeyword",
                      "types": [
                        {
                          "expression": {
                            "kind": "Identifier",
                            "text": "Error"
                          },
                          "kind": "ExpressionWithTypeArguments"
                        }
                      ]
                    }
                  ],
                  "kind": "ClassDeclaration",
                  "members": [],
                  "modifiers": [
                    {
                      "kind": "ExportKeyword"
                    }
                  ],
                  "name": {
                    "kind": "Identifier",
                    "text": "NetworkUnreachable"
                  }
                },
                {
                  "heritageClauses": [
                    {
                      "kind": "HeritageClause",
                      "token": "ExtendsKeyword",
                      "types": [
                        {
                          "expression": {
                            "kind": "Identifier",
                            "text": "Error"
                          },
                          "kind": "ExpressionWithTypeArguments"
                        }
                      ]
                    }
                  ],
                  "kind": "ClassDeclaration",
                  "members": [],
                  "modifiers": [
                    {
                      "kind": "ExportKeyword"
                    }
                  ],
                  "name": {
                    "kind": "Identifier",
                    "text": "NotADirectory"
                  }
                }
              ]
            },
            "kind": "ModuleDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "errors"
            }
          },
          {
            "declarationList": {
              "declarations": [
                {
                  "kind": "VariableDeclaration",
                  "name": {
                    "kind": "Identifier",
                    "text": "pid"
                  },
                  "type": {
                    "kind": "NumberKeyword"
                  }
                }
              ],
              "kind": "VariableDeclarationList"
            },
            "kind": "FirstStatement",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ]
          },
          {
            "declarationList": {
              "declarations": [
                {
                  "kind": "VariableDeclaration",
                  "name": {
                    "kind": "Identifier",
                    "text": "ppid"
                  },
                  "type": {
                    "kind": "NumberKeyword"
                  }
                }
              ],
              "kind": "VariableDeclarationList"
            },
            "kind": "FirstStatement",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ]
          },
          {
            "kind": "InterfaceDeclaration",
            "members": [
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "rss"
                },
                "type": {
                  "kind": "NumberKeyword"
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "heapTotal"
                },
                "type": {
                  "kind": "NumberKeyword"
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "heapUsed"
                },
                "type": {
                  "kind": "NumberKeyword"
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "external"
                },
                "type": {
                  "kind": "NumberKeyword"
                }
              }
            ],
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "MemoryUsage"
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "memoryUsage"
            },
            "parameters": [],
            "type": {
              "kind": "TypeReference",
              "typeName": {
                "kind": "Identifier",
                "text": "MemoryUsage"
              }
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "hostname"
            },
            "parameters": [],
            "type": {
              "kind": "StringKeyword"
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "loadavg"
            },
            "parameters": [],
            "type": {
              "elementType": {
                "kind": "NumberKeyword"
              },
              "kind": "ArrayType"
            }
          },
          {
            "kind": "InterfaceDeclaration",
            "members": [
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "name"
                },
                "type": {
                  "kind": "StringKeyword"
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "family"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "LiteralType",
                      "literal": {
                        "kind": "StringLiteral",
                        "text": "IPv4"
                      }
                    },
                    {
                      "kind": "LiteralType",
                      "literal": {
                        "kind": "StringLiteral",
                        "text": "IPv6"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "address"
                },
                "type": {
                  "kind": "StringKeyword"
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "netmask"
                },
                "type": {
                  "kind": "StringKeyword"
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "scopeid"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "NumberKeyword"
                    },
                    {
                      "kind": "LiteralType",
                      "literal": {
                        "kind": "NullKeyword"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "cidr"
                },
                "type": {
                  "kind": "StringKeyword"
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "mac"
                },
                "type": {
                  "kind": "StringKeyword"
                }
              }
            ],
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "NetworkInterfaceInfo"
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "networkInterfaces"
            },
            "parameters": [],
            "type": {
              "elementType": {
                "kind": "TypeReference",
                "typeName": {
                  "kind": "Identifier",
                  "text": "NetworkInterfaceInfo"
                }
              },
              "kind": "ArrayType"
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "systemMemoryInfo"
            },
            "parameters": [],
            "type": {
              "kind": "TypeReference",
              "typeName": {
                "kind": "Identifier",
                "text": "SystemMemoryInfo"
              }
            }
          },
          {
            "kind": "InterfaceDeclaration",
            "members": [
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "total"
                },
                "type": {
                  "kind": "NumberKeyword"
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "free"
                },
                "type": {
                  "kind": "NumberKeyword"
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "available"
                },
                "type": {
                  "kind": "NumberKeyword"
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "buffers"
                },
                "type": {
                  "kind": "NumberKeyword"
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "cached"
                },
                "type": {
                  "kind": "NumberKeyword"
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "swapTotal"
                },
                "type": {
                  "kind": "NumberKeyword"
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "swapFree"
                },
                "type": {
                  "kind": "NumberKeyword"
                }
              }
            ],
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "SystemMemoryInfo"
            }
          },
          {
            "declarationList": {
              "declarations": [
                {
                  "kind": "VariableDeclaration",
                  "name": {
                    "kind": "Identifier",
                    "text": "noColor"
                  },
                  "type": {
                    "kind": "BooleanKeyword"
                  }
                }
              ],
              "kind": "VariableDeclarationList"
            },
            "kind": "FirstStatement",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ]
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "osRelease"
            },
            "parameters": [],
            "type": {
              "kind": "StringKeyword"
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "osUptime"
            },
            "parameters": [],
            "type": {
              "kind": "NumberKeyword"
            }
          },
          {
            "kind": "TypeAliasDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "PermissionOptions"
            },
            "type": {
              "kind": "UnionType",
              "types": [
                {
                  "kind": "LiteralType",
                  "literal": {
                    "kind": "StringLiteral",
                    "text": "inherit"
                  }
                },
                {
                  "kind": "LiteralType",
                  "literal": {
                    "kind": "StringLiteral",
                    "text": "none"
                  }
                },
                {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "PermissionOptionsObject"
                  }
                }
              ]
            }
          },
          {
            "kind": "InterfaceDeclaration",
            "members": [
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "env"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "LiteralType",
                      "literal": {
                        "kind": "StringLiteral",
                        "text": "inherit"
                      }
                    },
                    {
                      "kind": "BooleanKeyword"
                    },
                    {
                      "elementType": {
                        "kind": "StringKeyword"
                      },
                      "kind": "ArrayType"
                    }
                  ]
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "sys"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "LiteralType",
                      "literal": {
                        "kind": "StringLiteral",
                        "text": "inherit"
                      }
                    },
                    {
                      "kind": "BooleanKeyword"
                    },
                    {
                      "elementType": {
                        "kind": "StringKeyword"
                      },
                      "kind": "ArrayType"
                    }
                  ]
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "hrtime"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "LiteralType",
                      "literal": {
                        "kind": "StringLiteral",
                        "text": "inherit"
                      }
                    },
                    {
                      "kind": "BooleanKeyword"
                    }
                  ]
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "net"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "LiteralType",
                      "literal": {
                        "kind": "StringLiteral",
                        "text": "inherit"
                      }
                    },
                    {
                      "kind": "BooleanKeyword"
                    },
                    {
                      "elementType": {
                        "kind": "StringKeyword"
                      },
                      "kind": "ArrayType"
                    }
                  ]
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "ffi"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "LiteralType",
                      "literal": {
                        "kind": "StringLiteral",
                        "text": "inherit"
                      }
                    },
                    {
                      "kind": "BooleanKeyword"
                    },
                    {
                      "kind": "TypeReference",
                      "typeArguments": [
                        {
                          "kind": "UnionType",
                          "types": [
                            {
                              "kind": "StringKeyword"
                            },
                            {
                              "kind": "TypeReference",
                              "typeName": {
                                "kind": "Identifier",
                                "text": "URL"
                              }
                            }
                          ]
                        }
                      ],
                      "typeName": {
                        "kind": "Identifier",
                        "text": "Array"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "read"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "LiteralType",
                      "literal": {
                        "kind": "StringLiteral",
                        "text": "inherit"
                      }
                    },
                    {
                      "kind": "BooleanKeyword"
                    },
                    {
                      "kind": "TypeReference",
                      "typeArguments": [
                        {
                          "kind": "UnionType",
                          "types": [
                            {
                              "kind": "StringKeyword"
                            },
                            {
                              "kind": "TypeReference",
                              "typeName": {
                                "kind": "Identifier",
                                "text": "URL"
                              }
                            }
                          ]
                        }
                      ],
                      "typeName": {
                        "kind": "Identifier",
                        "text": "Array"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "run"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "LiteralType",
                      "literal": {
                        "kind": "StringLiteral",
                        "text": "inherit"
                      }
                    },
                    {
                      "kind": "BooleanKeyword"
                    },
                    {
                      "kind": "TypeReference",
                      "typeArguments": [
                        {
                          "kind": "UnionType",
                          "types": [
                            {
                              "kind": "StringKeyword"
                            },
                            {
                              "kind": "TypeReference",
                              "typeName": {
                                "kind": "Identifier",
                                "text": "URL"
                              }
                            }
                          ]
                        }
                      ],
                      "typeName": {
                        "kind": "Identifier",
                        "text": "Array"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "write"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "LiteralType",
                      "literal": {
                        "kind": "StringLiteral",
                        "text": "inherit"
                      }
                    },
                    {
                      "kind": "BooleanKeyword"
                    },
                    {
                      "kind": "TypeReference",
                      "typeArguments": [
                        {
                          "kind": "UnionType",
                          "types": [
                            {
                              "kind": "StringKeyword"
                            },
                            {
                              "kind": "TypeReference",
                              "typeName": {
                                "kind": "Identifier",
                                "text": "URL"
                              }
                            }
                          ]
                        }
                      ],
                      "typeName": {
                        "kind": "Identifier",
                        "text": "Array"
                      }
                    }
                  ]
                }
              }
            ],
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "PermissionOptionsObject"
            }
          },
          {
            "kind": "InterfaceDeclaration",
            "members": [
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "name"
                },
                "type": {
                  "kind": "StringKeyword"
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "origin"
                },
                "type": {
                  "kind": "StringKeyword"
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "parent"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "TestContext"
                  }
                }
              },
              {
                "kind": "MethodSignature",
                "name": {
                  "kind": "Identifier",
                  "text": "step"
                },
                "parameters": [
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "definition"
                    },
                    "type": {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "TestStepDefinition"
                      }
                    }
                  }
                ],
                "type": {
                  "kind": "TypeReference",
                  "typeArguments": [
                    {
                      "kind": "BooleanKeyword"
                    }
                  ],
                  "typeName": {
                    "kind": "Identifier",
                    "text": "Promise"
                  }
                }
              },
              {
                "kind": "MethodSignature",
                "name": {
                  "kind": "Identifier",
                  "text": "step"
                },
                "parameters": [
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "name"
                    },
                    "type": {
                      "kind": "StringKeyword"
                    }
                  },
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "fn"
                    },
                    "type": {
                      "kind": "FunctionType",
                      "parameters": [
                        {
                          "kind": "Parameter",
                          "name": {
                            "kind": "Identifier",
                            "text": "t"
                          },
                          "type": {
                            "kind": "TypeReference",
                            "typeName": {
                              "kind": "Identifier",
                              "text": "TestContext"
                            }
                          }
                        }
                      ],
                      "type": {
                        "kind": "UnionType",
                        "types": [
                          {
                            "kind": "VoidKeyword"
                          },
                          {
                            "kind": "TypeReference",
                            "typeArguments": [
                              {
                                "kind": "VoidKeyword"
                              }
                            ],
                            "typeName": {
                              "kind": "Identifier",
                              "text": "Promise"
                            }
                          }
                        ]
                      }
                    }
                  }
                ],
                "type": {
                  "kind": "TypeReference",
                  "typeArguments": [
                    {
                      "kind": "BooleanKeyword"
                    }
                  ],
                  "typeName": {
                    "kind": "Identifier",
                    "text": "Promise"
                  }
                }
              },
              {
                "kind": "MethodSignature",
                "name": {
                  "kind": "Identifier",
                  "text": "step"
                },
                "parameters": [
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "fn"
                    },
                    "type": {
                      "kind": "FunctionType",
                      "parameters": [
                        {
                          "kind": "Parameter",
                          "name": {
                            "kind": "Identifier",
                            "text": "t"
                          },
                          "type": {
                            "kind": "TypeReference",
                            "typeName": {
                              "kind": "Identifier",
                              "text": "TestContext"
                            }
                          }
                        }
                      ],
                      "type": {
                        "kind": "UnionType",
                        "types": [
                          {
                            "kind": "VoidKeyword"
                          },
                          {
                            "kind": "TypeReference",
                            "typeArguments": [
                              {
                                "kind": "VoidKeyword"
                              }
                            ],
                            "typeName": {
                              "kind": "Identifier",
                              "text": "Promise"
                            }
                          }
                        ]
                      }
                    }
                  }
                ],
                "type": {
                  "kind": "TypeReference",
                  "typeArguments": [
                    {
                      "kind": "BooleanKeyword"
                    }
                  ],
                  "typeName": {
                    "kind": "Identifier",
                    "text": "Promise"
                  }
                }
              }
            ],
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "TestContext"
            }
          },
          {
            "kind": "InterfaceDeclaration",
            "members": [
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "fn"
                },
                "type": {
                  "kind": "FunctionType",
                  "parameters": [
                    {
                      "kind": "Parameter",
                      "name": {
                        "kind": "Identifier",
                        "text": "t"
                      },
                      "type": {
                        "kind": "TypeReference",
                        "typeName": {
                          "kind": "Identifier",
                          "text": "TestContext"
                        }
                      }
                    }
                  ],
                  "type": {
                    "kind": "UnionType",
                    "types": [
                      {
                        "kind": "VoidKeyword"
                      },
                      {
                        "kind": "TypeReference",
                        "typeArguments": [
                          {
                            "kind": "VoidKeyword"
                          }
                        ],
                        "typeName": {
                          "kind": "Identifier",
                          "text": "Promise"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "name"
                },
                "type": {
                  "kind": "StringKeyword"
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "ignore"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "BooleanKeyword"
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "sanitizeOps"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "BooleanKeyword"
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "sanitizeResources"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "BooleanKeyword"
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "sanitizeExit"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "BooleanKeyword"
                }
              }
            ],
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "TestStepDefinition"
            }
          },
          {
            "kind": "InterfaceDeclaration",
            "members": [
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "fn"
                },
                "type": {
                  "kind": "FunctionType",
                  "parameters": [
                    {
                      "kind": "Parameter",
                      "name": {
                        "kind": "Identifier",
                        "text": "t"
                      },
                      "type": {
                        "kind": "TypeReference",
                        "typeName": {
                          "kind": "Identifier",
                          "text": "TestContext"
                        }
                      }
                    }
                  ],
                  "type": {
                    "kind": "UnionType",
                    "types": [
                      {
                        "kind": "VoidKeyword"
                      },
                      {
                        "kind": "TypeReference",
                        "typeArguments": [
                          {
                            "kind": "VoidKeyword"
                          }
                        ],
                        "typeName": {
                          "kind": "Identifier",
                          "text": "Promise"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "name"
                },
                "type": {
                  "kind": "StringKeyword"
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "ignore"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "BooleanKeyword"
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "only"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "BooleanKeyword"
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "sanitizeOps"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "BooleanKeyword"
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "sanitizeResources"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "BooleanKeyword"
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "sanitizeExit"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "BooleanKeyword"
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "permissions"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "PermissionOptions"
                  }
                }
              }
            ],
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "TestDefinition"
            }
          },
          {
            "declarationList": {
              "declarations": [
                {
                  "kind": "VariableDeclaration",
                  "name": {
                    "kind": "Identifier",
                    "text": "test"
                  },
                  "type": {
                    "kind": "TypeReference",
                    "typeName": {
                      "kind": "Identifier",
                      "text": "DenoTest"
                    }
                  }
                }
              ],
              "kind": "VariableDeclarationList"
            },
            "kind": "FirstStatement",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ]
          },
          {
            "kind": "InterfaceDeclaration",
            "members": [
              {
                "kind": "CallSignature",
                "parameters": [
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "t"
                    },
                    "type": {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "TestDefinition"
                      }
                    }
                  }
                ],
                "type": {
                  "kind": "VoidKeyword"
                }
              },
              {
                "kind": "CallSignature",
                "parameters": [
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "name"
                    },
                    "type": {
                      "kind": "StringKeyword"
                    }
                  },
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "fn"
                    },
                    "type": {
                      "kind": "FunctionType",
                      "parameters": [
                        {
                          "kind": "Parameter",
                          "name": {
                            "kind": "Identifier",
                            "text": "t"
                          },
                          "type": {
                            "kind": "TypeReference",
                            "typeName": {
                              "kind": "Identifier",
                              "text": "TestContext"
                            }
                          }
                        }
                      ],
                      "type": {
                        "kind": "UnionType",
                        "types": [
                          {
                            "kind": "VoidKeyword"
                          },
                          {
                            "kind": "TypeReference",
                            "typeArguments": [
                              {
                                "kind": "VoidKeyword"
                              }
                            ],
                            "typeName": {
                              "kind": "Identifier",
                              "text": "Promise"
                            }
                          }
                        ]
                      }
                    }
                  }
                ],
                "type": {
                  "kind": "VoidKeyword"
                }
              },
              {
                "kind": "CallSignature",
                "parameters": [
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "fn"
                    },
                    "type": {
                      "kind": "FunctionType",
                      "parameters": [
                        {
                          "kind": "Parameter",
                          "name": {
                            "kind": "Identifier",
                            "text": "t"
                          },
                          "type": {
                            "kind": "TypeReference",
                            "typeName": {
                              "kind": "Identifier",
                              "text": "TestContext"
                            }
                          }
                        }
                      ],
                      "type": {
                        "kind": "UnionType",
                        "types": [
                          {
                            "kind": "VoidKeyword"
                          },
                          {
                            "kind": "TypeReference",
                            "typeArguments": [
                              {
                                "kind": "VoidKeyword"
                              }
                            ],
                            "typeName": {
                              "kind": "Identifier",
                              "text": "Promise"
                            }
                          }
                        ]
                      }
                    }
                  }
                ],
                "type": {
                  "kind": "VoidKeyword"
                }
              },
              {
                "kind": "CallSignature",
                "parameters": [
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "name"
                    },
                    "type": {
                      "kind": "StringKeyword"
                    }
                  },
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "options"
                    },
                    "type": {
                      "kind": "TypeReference",
                      "typeArguments": [
                        {
                          "kind": "TypeReference",
                          "typeName": {
                            "kind": "Identifier",
                            "text": "TestDefinition"
                          }
                        },
                        {
                          "kind": "UnionType",
                          "types": [
                            {
                              "kind": "LiteralType",
                              "literal": {
                                "kind": "StringLiteral",
                                "text": "fn"
                              }
                            },
                            {
                              "kind": "LiteralType",
                              "literal": {
                                "kind": "StringLiteral",
                                "text": "name"
                              }
                            }
                          ]
                        }
                      ],
                      "typeName": {
                        "kind": "Identifier",
                        "text": "Omit"
                      }
                    }
                  },
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "fn"
                    },
                    "type": {
                      "kind": "FunctionType",
                      "parameters": [
                        {
                          "kind": "Parameter",
                          "name": {
                            "kind": "Identifier",
                            "text": "t"
                          },
                          "type": {
                            "kind": "TypeReference",
                            "typeName": {
                              "kind": "Identifier",
                              "text": "TestContext"
                            }
                          }
                        }
                      ],
                      "type": {
                        "kind": "UnionType",
                        "types": [
                          {
                            "kind": "VoidKeyword"
                          },
                          {
                            "kind": "TypeReference",
                            "typeArguments": [
                              {
                                "kind": "VoidKeyword"
                              }
                            ],
                            "typeName": {
                              "kind": "Identifier",
                              "text": "Promise"
                            }
                          }
                        ]
                      }
                    }
                  }
                ],
                "type": {
                  "kind": "VoidKeyword"
                }
              },
              {
                "kind": "CallSignature",
                "parameters": [
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "options"
                    },
                    "type": {
                      "kind": "TypeReference",
                      "typeArguments": [
                        {
                          "kind": "TypeReference",
                          "typeName": {
                            "kind": "Identifier",
                            "text": "TestDefinition"
                          }
                        },
                        {
                          "kind": "UnionType",
                          "types": [
                            {
                              "kind": "LiteralType",
                              "literal": {
                                "kind": "StringLiteral",
                                "text": "fn"
                              }
                            },
                            {
                              "kind": "LiteralType",
                              "literal": {
                                "kind": "StringLiteral",
                                "text": "name"
                              }
                            }
                          ]
                        }
                      ],
                      "typeName": {
                        "kind": "Identifier",
                        "text": "Omit"
                      }
                    }
                  },
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "fn"
                    },
                    "type": {
                      "kind": "FunctionType",
                      "parameters": [
                        {
                          "kind": "Parameter",
                          "name": {
                            "kind": "Identifier",
                            "text": "t"
                          },
                          "type": {
                            "kind": "TypeReference",
                            "typeName": {
                              "kind": "Identifier",
                              "text": "TestContext"
                            }
                          }
                        }
                      ],
                      "type": {
                        "kind": "UnionType",
                        "types": [
                          {
                            "kind": "VoidKeyword"
                          },
                          {
                            "kind": "TypeReference",
                            "typeArguments": [
                              {
                                "kind": "VoidKeyword"
                              }
                            ],
                            "typeName": {
                              "kind": "Identifier",
                              "text": "Promise"
                            }
                          }
                        ]
                      }
                    }
                  }
                ],
                "type": {
                  "kind": "VoidKeyword"
                }
              },
              {
                "kind": "CallSignature",
                "parameters": [
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "options"
                    },
                    "type": {
                      "kind": "TypeReference",
                      "typeArguments": [
                        {
                          "kind": "TypeReference",
                          "typeName": {
                            "kind": "Identifier",
                            "text": "TestDefinition"
                          }
                        },
                        {
                          "kind": "LiteralType",
                          "literal": {
                            "kind": "StringLiteral",
                            "text": "fn"
                          }
                        }
                      ],
                      "typeName": {
                        "kind": "Identifier",
                        "text": "Omit"
                      }
                    }
                  },
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "fn"
                    },
                    "type": {
                      "kind": "FunctionType",
                      "parameters": [
                        {
                          "kind": "Parameter",
                          "name": {
                            "kind": "Identifier",
                            "text": "t"
                          },
                          "type": {
                            "kind": "TypeReference",
                            "typeName": {
                              "kind": "Identifier",
                              "text": "TestContext"
                            }
                          }
                        }
                      ],
                      "type": {
                        "kind": "UnionType",
                        "types": [
                          {
                            "kind": "VoidKeyword"
                          },
                          {
                            "kind": "TypeReference",
                            "typeArguments": [
                              {
                                "kind": "VoidKeyword"
                              }
                            ],
                            "typeName": {
                              "kind": "Identifier",
                              "text": "Promise"
                            }
                          }
                        ]
                      }
                    }
                  }
                ],
                "type": {
                  "kind": "VoidKeyword"
                }
              },
              {
                "kind": "MethodSignature",
                "name": {
                  "kind": "Identifier",
                  "text": "ignore"
                },
                "parameters": [
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "t"
                    },
                    "type": {
                      "kind": "TypeReference",
                      "typeArguments": [
                        {
                          "kind": "TypeReference",
                          "typeName": {
                            "kind": "Identifier",
                            "text": "TestDefinition"
                          }
                        },
                        {
                          "kind": "LiteralType",
                          "literal": {
                            "kind": "StringLiteral",
                            "text": "ignore"
                          }
                        }
                      ],
                      "typeName": {
                        "kind": "Identifier",
                        "text": "Omit"
                      }
                    }
                  }
                ],
                "type": {
                  "kind": "VoidKeyword"
                }
              },
              {
                "kind": "MethodSignature",
                "name": {
                  "kind": "Identifier",
                  "text": "ignore"
                },
                "parameters": [
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "name"
                    },
                    "type": {
                      "kind": "StringKeyword"
                    }
                  },
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "fn"
                    },
                    "type": {
                      "kind": "FunctionType",
                      "parameters": [
                        {
                          "kind": "Parameter",
                          "name": {
                            "kind": "Identifier",
                            "text": "t"
                          },
                          "type": {
                            "kind": "TypeReference",
                            "typeName": {
                              "kind": "Identifier",
                              "text": "TestContext"
                            }
                          }
                        }
                      ],
                      "type": {
                        "kind": "UnionType",
                        "types": [
                          {
                            "kind": "VoidKeyword"
                          },
                          {
                            "kind": "TypeReference",
                            "typeArguments": [
                              {
                                "kind": "VoidKeyword"
                              }
                            ],
                            "typeName": {
                              "kind": "Identifier",
                              "text": "Promise"
                            }
                          }
                        ]
                      }
                    }
                  }
                ],
                "type": {
                  "kind": "VoidKeyword"
                }
              },
              {
                "kind": "MethodSignature",
                "name": {
                  "kind": "Identifier",
                  "text": "ignore"
                },
                "parameters": [
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "fn"
                    },
                    "type": {
                      "kind": "FunctionType",
                      "parameters": [
                        {
                          "kind": "Parameter",
                          "name": {
                            "kind": "Identifier",
                            "text": "t"
                          },
                          "type": {
                            "kind": "TypeReference",
                            "typeName": {
                              "kind": "Identifier",
                              "text": "TestContext"
                            }
                          }
                        }
                      ],
                      "type": {
                        "kind": "UnionType",
                        "types": [
                          {
                            "kind": "VoidKeyword"
                          },
                          {
                            "kind": "TypeReference",
                            "typeArguments": [
                              {
                                "kind": "VoidKeyword"
                              }
                            ],
                            "typeName": {
                              "kind": "Identifier",
                              "text": "Promise"
                            }
                          }
                        ]
                      }
                    }
                  }
                ],
                "type": {
                  "kind": "VoidKeyword"
                }
              },
              {
                "kind": "MethodSignature",
                "name": {
                  "kind": "Identifier",
                  "text": "ignore"
                },
                "parameters": [
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "name"
                    },
                    "type": {
                      "kind": "StringKeyword"
                    }
                  },
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "options"
                    },
                    "type": {
                      "kind": "TypeReference",
                      "typeArguments": [
                        {
                          "kind": "TypeReference",
                          "typeName": {
                            "kind": "Identifier",
                            "text": "TestDefinition"
                          }
                        },
                        {
                          "kind": "UnionType",
                          "types": [
                            {
                              "kind": "LiteralType",
                              "literal": {
                                "kind": "StringLiteral",
                                "text": "fn"
                              }
                            },
                            {
                              "kind": "LiteralType",
                              "literal": {
                                "kind": "StringLiteral",
                                "text": "name"
                              }
                            },
                            {
                              "kind": "LiteralType",
                              "literal": {
                                "kind": "StringLiteral",
                                "text": "ignore"
                              }
                            }
                          ]
                        }
                      ],
                      "typeName": {
                        "kind": "Identifier",
                        "text": "Omit"
                      }
                    }
                  },
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "fn"
                    },
                    "type": {
                      "kind": "FunctionType",
                      "parameters": [
                        {
                          "kind": "Parameter",
                          "name": {
                            "kind": "Identifier",
                            "text": "t"
                          },
                          "type": {
                            "kind": "TypeReference",
                            "typeName": {
                              "kind": "Identifier",
                              "text": "TestContext"
                            }
                          }
                        }
                      ],
                      "type": {
                        "kind": "UnionType",
                        "types": [
                          {
                            "kind": "VoidKeyword"
                          },
                          {
                            "kind": "TypeReference",
                            "typeArguments": [
                              {
                                "kind": "VoidKeyword"
                              }
                            ],
                            "typeName": {
                              "kind": "Identifier",
                              "text": "Promise"
                            }
                          }
                        ]
                      }
                    }
                  }
                ],
                "type": {
                  "kind": "VoidKeyword"
                }
              },
              {
                "kind": "MethodSignature",
                "name": {
                  "kind": "Identifier",
                  "text": "ignore"
                },
                "parameters": [
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "options"
                    },
                    "type": {
                      "kind": "TypeReference",
                      "typeArguments": [
                        {
                          "kind": "TypeReference",
                          "typeName": {
                            "kind": "Identifier",
                            "text": "TestDefinition"
                          }
                        },
                        {
                          "kind": "UnionType",
                          "types": [
                            {
                              "kind": "LiteralType",
                              "literal": {
                                "kind": "StringLiteral",
                                "text": "fn"
                              }
                            },
                            {
                              "kind": "LiteralType",
                              "literal": {
                                "kind": "StringLiteral",
                                "text": "name"
                              }
                            },
                            {
                              "kind": "LiteralType",
                              "literal": {
                                "kind": "StringLiteral",
                                "text": "ignore"
                              }
                            }
                          ]
                        }
                      ],
                      "typeName": {
                        "kind": "Identifier",
                        "text": "Omit"
                      }
                    }
                  },
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "fn"
                    },
                    "type": {
                      "kind": "FunctionType",
                      "parameters": [
                        {
                          "kind": "Parameter",
                          "name": {
                            "kind": "Identifier",
                            "text": "t"
                          },
                          "type": {
                            "kind": "TypeReference",
                            "typeName": {
                              "kind": "Identifier",
                              "text": "TestContext"
                            }
                          }
                        }
                      ],
                      "type": {
                        "kind": "UnionType",
                        "types": [
                          {
                            "kind": "VoidKeyword"
                          },
                          {
                            "kind": "TypeReference",
                            "typeArguments": [
                              {
                                "kind": "VoidKeyword"
                              }
                            ],
                            "typeName": {
                              "kind": "Identifier",
                              "text": "Promise"
                            }
                          }
                        ]
                      }
                    }
                  }
                ],
                "type": {
                  "kind": "VoidKeyword"
                }
              },
              {
                "kind": "MethodSignature",
                "name": {
                  "kind": "Identifier",
                  "text": "ignore"
                },
                "parameters": [
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "options"
                    },
                    "type": {
                      "kind": "TypeReference",
                      "typeArguments": [
                        {
                          "kind": "TypeReference",
                          "typeName": {
                            "kind": "Identifier",
                            "text": "TestDefinition"
                          }
                        },
                        {
                          "kind": "UnionType",
                          "types": [
                            {
                              "kind": "LiteralType",
                              "literal": {
                                "kind": "StringLiteral",
                                "text": "fn"
                              }
                            },
                            {
                              "kind": "LiteralType",
                              "literal": {
                                "kind": "StringLiteral",
                                "text": "ignore"
                              }
                            }
                          ]
                        }
                      ],
                      "typeName": {
                        "kind": "Identifier",
                        "text": "Omit"
                      }
                    }
                  },
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "fn"
                    },
                    "type": {
                      "kind": "FunctionType",
                      "parameters": [
                        {
                          "kind": "Parameter",
                          "name": {
                            "kind": "Identifier",
                            "text": "t"
                          },
                          "type": {
                            "kind": "TypeReference",
                            "typeName": {
                              "kind": "Identifier",
                              "text": "TestContext"
                            }
                          }
                        }
                      ],
                      "type": {
                        "kind": "UnionType",
                        "types": [
                          {
                            "kind": "VoidKeyword"
                          },
                          {
                            "kind": "TypeReference",
                            "typeArguments": [
                              {
                                "kind": "VoidKeyword"
                              }
                            ],
                            "typeName": {
                              "kind": "Identifier",
                              "text": "Promise"
                            }
                          }
                        ]
                      }
                    }
                  }
                ],
                "type": {
                  "kind": "VoidKeyword"
                }
              },
              {
                "kind": "MethodSignature",
                "name": {
                  "kind": "Identifier",
                  "text": "only"
                },
                "parameters": [
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "t"
                    },
                    "type": {
                      "kind": "TypeReference",
                      "typeArguments": [
                        {
                          "kind": "TypeReference",
                          "typeName": {
                            "kind": "Identifier",
                            "text": "TestDefinition"
                          }
                        },
                        {
                          "kind": "LiteralType",
                          "literal": {
                            "kind": "StringLiteral",
                            "text": "only"
                          }
                        }
                      ],
                      "typeName": {
                        "kind": "Identifier",
                        "text": "Omit"
                      }
                    }
                  }
                ],
                "type": {
                  "kind": "VoidKeyword"
                }
              },
              {
                "kind": "MethodSignature",
                "name": {
                  "kind": "Identifier",
                  "text": "only"
                },
                "parameters": [
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "name"
                    },
                    "type": {
                      "kind": "StringKeyword"
                    }
                  },
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "fn"
                    },
                    "type": {
                      "kind": "FunctionType",
                      "parameters": [
                        {
                          "kind": "Parameter",
                          "name": {
                            "kind": "Identifier",
                            "text": "t"
                          },
                          "type": {
                            "kind": "TypeReference",
                            "typeName": {
                              "kind": "Identifier",
                              "text": "TestContext"
                            }
                          }
                        }
                      ],
                      "type": {
                        "kind": "UnionType",
                        "types": [
                          {
                            "kind": "VoidKeyword"
                          },
                          {
                            "kind": "TypeReference",
                            "typeArguments": [
                              {
                                "kind": "VoidKeyword"
                              }
                            ],
                            "typeName": {
                              "kind": "Identifier",
                              "text": "Promise"
                            }
                          }
                        ]
                      }
                    }
                  }
                ],
                "type": {
                  "kind": "VoidKeyword"
                }
              },
              {
                "kind": "MethodSignature",
                "name": {
                  "kind": "Identifier",
                  "text": "only"
                },
                "parameters": [
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "fn"
                    },
                    "type": {
                      "kind": "FunctionType",
                      "parameters": [
                        {
                          "kind": "Parameter",
                          "name": {
                            "kind": "Identifier",
                            "text": "t"
                          },
                          "type": {
                            "kind": "TypeReference",
                            "typeName": {
                              "kind": "Identifier",
                              "text": "TestContext"
                            }
                          }
                        }
                      ],
                      "type": {
                        "kind": "UnionType",
                        "types": [
                          {
                            "kind": "VoidKeyword"
                          },
                          {
                            "kind": "TypeReference",
                            "typeArguments": [
                              {
                                "kind": "VoidKeyword"
                              }
                            ],
                            "typeName": {
                              "kind": "Identifier",
                              "text": "Promise"
                            }
                          }
                        ]
                      }
                    }
                  }
                ],
                "type": {
                  "kind": "VoidKeyword"
                }
              },
              {
                "kind": "MethodSignature",
                "name": {
                  "kind": "Identifier",
                  "text": "only"
                },
                "parameters": [
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "name"
                    },
                    "type": {
                      "kind": "StringKeyword"
                    }
                  },
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "options"
                    },
                    "type": {
                      "kind": "TypeReference",
                      "typeArguments": [
                        {
                          "kind": "TypeReference",
                          "typeName": {
                            "kind": "Identifier",
                            "text": "TestDefinition"
                          }
                        },
                        {
                          "kind": "UnionType",
                          "types": [
                            {
                              "kind": "LiteralType",
                              "literal": {
                                "kind": "StringLiteral",
                                "text": "fn"
                              }
                            },
                            {
                              "kind": "LiteralType",
                              "literal": {
                                "kind": "StringLiteral",
                                "text": "name"
                              }
                            },
                            {
                              "kind": "LiteralType",
                              "literal": {
                                "kind": "StringLiteral",
                                "text": "only"
                              }
                            }
                          ]
                        }
                      ],
                      "typeName": {
                        "kind": "Identifier",
                        "text": "Omit"
                      }
                    }
                  },
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "fn"
                    },
                    "type": {
                      "kind": "FunctionType",
                      "parameters": [
                        {
                          "kind": "Parameter",
                          "name": {
                            "kind": "Identifier",
                            "text": "t"
                          },
                          "type": {
                            "kind": "TypeReference",
                            "typeName": {
                              "kind": "Identifier",
                              "text": "TestContext"
                            }
                          }
                        }
                      ],
                      "type": {
                        "kind": "UnionType",
                        "types": [
                          {
                            "kind": "VoidKeyword"
                          },
                          {
                            "kind": "TypeReference",
                            "typeArguments": [
                              {
                                "kind": "VoidKeyword"
                              }
                            ],
                            "typeName": {
                              "kind": "Identifier",
                              "text": "Promise"
                            }
                          }
                        ]
                      }
                    }
                  }
                ],
                "type": {
                  "kind": "VoidKeyword"
                }
              },
              {
                "kind": "MethodSignature",
                "name": {
                  "kind": "Identifier",
                  "text": "only"
                },
                "parameters": [
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "options"
                    },
                    "type": {
                      "kind": "TypeReference",
                      "typeArguments": [
                        {
                          "kind": "TypeReference",
                          "typeName": {
                            "kind": "Identifier",
                            "text": "TestDefinition"
                          }
                        },
                        {
                          "kind": "UnionType",
                          "types": [
                            {
                              "kind": "LiteralType",
                              "literal": {
                                "kind": "StringLiteral",
                                "text": "fn"
                              }
                            },
                            {
                              "kind": "LiteralType",
                              "literal": {
                                "kind": "StringLiteral",
                                "text": "name"
                              }
                            },
                            {
                              "kind": "LiteralType",
                              "literal": {
                                "kind": "StringLiteral",
                                "text": "only"
                              }
                            }
                          ]
                        }
                      ],
                      "typeName": {
                        "kind": "Identifier",
                        "text": "Omit"
                      }
                    }
                  },
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "fn"
                    },
                    "type": {
                      "kind": "FunctionType",
                      "parameters": [
                        {
                          "kind": "Parameter",
                          "name": {
                            "kind": "Identifier",
                            "text": "t"
                          },
                          "type": {
                            "kind": "TypeReference",
                            "typeName": {
                              "kind": "Identifier",
                              "text": "TestContext"
                            }
                          }
                        }
                      ],
                      "type": {
                        "kind": "UnionType",
                        "types": [
                          {
                            "kind": "VoidKeyword"
                          },
                          {
                            "kind": "TypeReference",
                            "typeArguments": [
                              {
                                "kind": "VoidKeyword"
                              }
                            ],
                            "typeName": {
                              "kind": "Identifier",
                              "text": "Promise"
                            }
                          }
                        ]
                      }
                    }
                  }
                ],
                "type": {
                  "kind": "VoidKeyword"
                }
              },
              {
                "kind": "MethodSignature",
                "name": {
                  "kind": "Identifier",
                  "text": "only"
                },
                "parameters": [
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "options"
                    },
                    "type": {
                      "kind": "TypeReference",
                      "typeArguments": [
                        {
                          "kind": "TypeReference",
                          "typeName": {
                            "kind": "Identifier",
                            "text": "TestDefinition"
                          }
                        },
                        {
                          "kind": "UnionType",
                          "types": [
                            {
                              "kind": "LiteralType",
                              "literal": {
                                "kind": "StringLiteral",
                                "text": "fn"
                              }
                            },
                            {
                              "kind": "LiteralType",
                              "literal": {
                                "kind": "StringLiteral",
                                "text": "only"
                              }
                            }
                          ]
                        }
                      ],
                      "typeName": {
                        "kind": "Identifier",
                        "text": "Omit"
                      }
                    }
                  },
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "fn"
                    },
                    "type": {
                      "kind": "FunctionType",
                      "parameters": [
                        {
                          "kind": "Parameter",
                          "name": {
                            "kind": "Identifier",
                            "text": "t"
                          },
                          "type": {
                            "kind": "TypeReference",
                            "typeName": {
                              "kind": "Identifier",
                              "text": "TestContext"
                            }
                          }
                        }
                      ],
                      "type": {
                        "kind": "UnionType",
                        "types": [
                          {
                            "kind": "VoidKeyword"
                          },
                          {
                            "kind": "TypeReference",
                            "typeArguments": [
                              {
                                "kind": "VoidKeyword"
                              }
                            ],
                            "typeName": {
                              "kind": "Identifier",
                              "text": "Promise"
                            }
                          }
                        ]
                      }
                    }
                  }
                ],
                "type": {
                  "kind": "VoidKeyword"
                }
              }
            ],
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "DenoTest"
            }
          },
          {
            "kind": "InterfaceDeclaration",
            "members": [
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "name"
                },
                "type": {
                  "kind": "StringKeyword"
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "origin"
                },
                "type": {
                  "kind": "StringKeyword"
                }
              },
              {
                "kind": "MethodSignature",
                "name": {
                  "kind": "Identifier",
                  "text": "start"
                },
                "parameters": [],
                "type": {
                  "kind": "VoidKeyword"
                }
              },
              {
                "kind": "MethodSignature",
                "name": {
                  "kind": "Identifier",
                  "text": "end"
                },
                "parameters": [],
                "type": {
                  "kind": "VoidKeyword"
                }
              }
            ],
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "BenchContext"
            }
          },
          {
            "kind": "InterfaceDeclaration",
            "members": [
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "fn"
                },
                "type": {
                  "kind": "FunctionType",
                  "parameters": [
                    {
                      "kind": "Parameter",
                      "name": {
                        "kind": "Identifier",
                        "text": "b"
                      },
                      "type": {
                        "kind": "TypeReference",
                        "typeName": {
                          "kind": "Identifier",
                          "text": "BenchContext"
                        }
                      }
                    }
                  ],
                  "type": {
                    "kind": "UnionType",
                    "types": [
                      {
                        "kind": "VoidKeyword"
                      },
                      {
                        "kind": "TypeReference",
                        "typeArguments": [
                          {
                            "kind": "VoidKeyword"
                          }
                        ],
                        "typeName": {
                          "kind": "Identifier",
                          "text": "Promise"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "name"
                },
                "type": {
                  "kind": "StringKeyword"
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "ignore"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "BooleanKeyword"
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "group"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "StringKeyword"
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "baseline"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "BooleanKeyword"
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "only"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "BooleanKeyword"
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "sanitizeExit"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "BooleanKeyword"
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "permissions"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "PermissionOptions"
                  }
                }
              }
            ],
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "BenchDefinition"
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "bench"
            },
            "parameters": [
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "b"
                },
                "type": {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "BenchDefinition"
                  }
                }
              }
            ],
            "type": {
              "kind": "VoidKeyword"
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "bench"
            },
            "parameters": [
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "name"
                },
                "type": {
                  "kind": "StringKeyword"
                }
              },
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "fn"
                },
                "type": {
                  "kind": "FunctionType",
                  "parameters": [
                    {
                      "kind": "Parameter",
                      "name": {
                        "kind": "Identifier",
                        "text": "b"
                      },
                      "type": {
                        "kind": "TypeReference",
                        "typeName": {
                          "kind": "Identifier",
                          "text": "BenchContext"
                        }
                      }
                    }
                  ],
                  "type": {
                    "kind": "UnionType",
                    "types": [
                      {
                        "kind": "VoidKeyword"
                      },
                      {
                        "kind": "TypeReference",
                        "typeArguments": [
                          {
                            "kind": "VoidKeyword"
                          }
                        ],
                        "typeName": {
                          "kind": "Identifier",
                          "text": "Promise"
                        }
                      }
                    ]
                  }
                }
              }
            ],
            "type": {
              "kind": "VoidKeyword"
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "bench"
            },
            "parameters": [
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "fn"
                },
                "type": {
                  "kind": "FunctionType",
                  "parameters": [
                    {
                      "kind": "Parameter",
                      "name": {
                        "kind": "Identifier",
                        "text": "b"
                      },
                      "type": {
                        "kind": "TypeReference",
                        "typeName": {
                          "kind": "Identifier",
                          "text": "BenchContext"
                        }
                      }
                    }
                  ],
                  "type": {
                    "kind": "UnionType",
                    "types": [
                      {
                        "kind": "VoidKeyword"
                      },
                      {
                        "kind": "TypeReference",
                        "typeArguments": [
                          {
                            "kind": "VoidKeyword"
                          }
                        ],
                        "typeName": {
                          "kind": "Identifier",
                          "text": "Promise"
                        }
                      }
                    ]
                  }
                }
              }
            ],
            "type": {
              "kind": "VoidKeyword"
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "bench"
            },
            "parameters": [
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "name"
                },
                "type": {
                  "kind": "StringKeyword"
                }
              },
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "options"
                },
                "type": {
                  "kind": "TypeReference",
                  "typeArguments": [
                    {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "BenchDefinition"
                      }
                    },
                    {
                      "kind": "UnionType",
                      "types": [
                        {
                          "kind": "LiteralType",
                          "literal": {
                            "kind": "StringLiteral",
                            "text": "fn"
                          }
                        },
                        {
                          "kind": "LiteralType",
                          "literal": {
                            "kind": "StringLiteral",
                            "text": "name"
                          }
                        }
                      ]
                    }
                  ],
                  "typeName": {
                    "kind": "Identifier",
                    "text": "Omit"
                  }
                }
              },
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "fn"
                },
                "type": {
                  "kind": "FunctionType",
                  "parameters": [
                    {
                      "kind": "Parameter",
                      "name": {
                        "kind": "Identifier",
                        "text": "b"
                      },
                      "type": {
                        "kind": "TypeReference",
                        "typeName": {
                          "kind": "Identifier",
                          "text": "BenchContext"
                        }
                      }
                    }
                  ],
                  "type": {
                    "kind": "UnionType",
                    "types": [
                      {
                        "kind": "VoidKeyword"
                      },
                      {
                        "kind": "TypeReference",
                        "typeArguments": [
                          {
                            "kind": "VoidKeyword"
                          }
                        ],
                        "typeName": {
                          "kind": "Identifier",
                          "text": "Promise"
                        }
                      }
                    ]
                  }
                }
              }
            ],
            "type": {
              "kind": "VoidKeyword"
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "bench"
            },
            "parameters": [
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "options"
                },
                "type": {
                  "kind": "TypeReference",
                  "typeArguments": [
                    {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "BenchDefinition"
                      }
                    },
                    {
                      "kind": "LiteralType",
                      "literal": {
                        "kind": "StringLiteral",
                        "text": "fn"
                      }
                    }
                  ],
                  "typeName": {
                    "kind": "Identifier",
                    "text": "Omit"
                  }
                }
              },
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "fn"
                },
                "type": {
                  "kind": "FunctionType",
                  "parameters": [
                    {
                      "kind": "Parameter",
                      "name": {
                        "kind": "Identifier",
                        "text": "b"
                      },
                      "type": {
                        "kind": "TypeReference",
                        "typeName": {
                          "kind": "Identifier",
                          "text": "BenchContext"
                        }
                      }
                    }
                  ],
                  "type": {
                    "kind": "UnionType",
                    "types": [
                      {
                        "kind": "VoidKeyword"
                      },
                      {
                        "kind": "TypeReference",
                        "typeArguments": [
                          {
                            "kind": "VoidKeyword"
                          }
                        ],
                        "typeName": {
                          "kind": "Identifier",
                          "text": "Promise"
                        }
                      }
                    ]
                  }
                }
              }
            ],
            "type": {
              "kind": "VoidKeyword"
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "bench"
            },
            "parameters": [
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "options"
                },
                "type": {
                  "kind": "TypeReference",
                  "typeArguments": [
                    {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "BenchDefinition"
                      }
                    },
                    {
                      "kind": "UnionType",
                      "types": [
                        {
                          "kind": "LiteralType",
                          "literal": {
                            "kind": "StringLiteral",
                            "text": "fn"
                          }
                        },
                        {
                          "kind": "LiteralType",
                          "literal": {
                            "kind": "StringLiteral",
                            "text": "name"
                          }
                        }
                      ]
                    }
                  ],
                  "typeName": {
                    "kind": "Identifier",
                    "text": "Omit"
                  }
                }
              },
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "fn"
                },
                "type": {
                  "kind": "FunctionType",
                  "parameters": [
                    {
                      "kind": "Parameter",
                      "name": {
                        "kind": "Identifier",
                        "text": "b"
                      },
                      "type": {
                        "kind": "TypeReference",
                        "typeName": {
                          "kind": "Identifier",
                          "text": "BenchContext"
                        }
                      }
                    }
                  ],
                  "type": {
                    "kind": "UnionType",
                    "types": [
                      {
                        "kind": "VoidKeyword"
                      },
                      {
                        "kind": "TypeReference",
                        "typeArguments": [
                          {
                            "kind": "VoidKeyword"
                          }
                        ],
                        "typeName": {
                          "kind": "Identifier",
                          "text": "Promise"
                        }
                      }
                    ]
                  }
                }
              }
            ],
            "type": {
              "kind": "VoidKeyword"
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "exit"
            },
            "parameters": [
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "code"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "NumberKeyword"
                }
              }
            ],
            "type": {
              "kind": "NeverKeyword"
            }
          },
          {
            "declarationList": {
              "declarations": [
                {
                  "kind": "VariableDeclaration",
                  "name": {
                    "kind": "Identifier",
                    "text": "exitCode"
                  },
                  "type": {
                    "kind": "NumberKeyword"
                  }
                }
              ],
              "kind": "VariableDeclarationList"
            },
            "kind": "FirstStatement",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ]
          },
          {
            "kind": "InterfaceDeclaration",
            "members": [
              {
                "kind": "MethodSignature",
                "name": {
                  "kind": "Identifier",
                  "text": "get"
                },
                "parameters": [
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "key"
                    },
                    "type": {
                      "kind": "StringKeyword"
                    }
                  }
                ],
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "StringKeyword"
                    },
                    {
                      "kind": "UndefinedKeyword"
                    }
                  ]
                }
              },
              {
                "kind": "MethodSignature",
                "name": {
                  "kind": "Identifier",
                  "text": "set"
                },
                "parameters": [
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "key"
                    },
                    "type": {
                      "kind": "StringKeyword"
                    }
                  },
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "value"
                    },
                    "type": {
                      "kind": "StringKeyword"
                    }
                  }
                ],
                "type": {
                  "kind": "VoidKeyword"
                }
              },
              {
                "kind": "MethodSignature",
                "name": {
                  "kind": "Identifier",
                  "text": "delete"
                },
                "parameters": [
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "key"
                    },
                    "type": {
                      "kind": "StringKeyword"
                    }
                  }
                ],
                "type": {
                  "kind": "VoidKeyword"
                }
              },
              {
                "kind": "MethodSignature",
                "name": {
                  "kind": "Identifier",
                  "text": "has"
                },
                "parameters": [
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "key"
                    },
                    "type": {
                      "kind": "StringKeyword"
                    }
                  }
                ],
                "type": {
                  "kind": "BooleanKeyword"
                }
              },
              {
                "kind": "MethodSignature",
                "name": {
                  "kind": "Identifier",
                  "text": "toObject"
                },
                "parameters": [],
                "type": {
                  "kind": "TypeLiteral",
                  "members": [
                    {
                      "kind": "IndexSignature",
                      "parameters": [
                        {
                          "kind": "Parameter",
                          "name": {
                            "kind": "Identifier",
                            "text": "index"
                          },
                          "type": {
                            "kind": "StringKeyword"
                          }
                        }
                      ],
                      "type": {
                        "kind": "StringKeyword"
                      }
                    }
                  ]
                }
              }
            ],
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "Env"
            }
          },
          {
            "declarationList": {
              "declarations": [
                {
                  "kind": "VariableDeclaration",
                  "name": {
                    "kind": "Identifier",
                    "text": "env"
                  },
                  "type": {
                    "kind": "TypeReference",
                    "typeName": {
                      "kind": "Identifier",
                      "text": "Env"
                    }
                  }
                }
              ],
              "kind": "VariableDeclarationList"
            },
            "kind": "FirstStatement",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ]
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "execPath"
            },
            "parameters": [],
            "type": {
              "kind": "StringKeyword"
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "chdir"
            },
            "parameters": [
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "directory"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "StringKeyword"
                    },
                    {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "URL"
                      }
                    }
                  ]
                }
              }
            ],
            "type": {
              "kind": "VoidKeyword"
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "cwd"
            },
            "parameters": [],
            "type": {
              "kind": "StringKeyword"
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "link"
            },
            "parameters": [
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "oldpath"
                },
                "type": {
                  "kind": "StringKeyword"
                }
              },
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "newpath"
                },
                "type": {
                  "kind": "StringKeyword"
                }
              }
            ],
            "type": {
              "kind": "TypeReference",
              "typeArguments": [
                {
                  "kind": "VoidKeyword"
                }
              ],
              "typeName": {
                "kind": "Identifier",
                "text": "Promise"
              }
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "linkSync"
            },
            "parameters": [
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "oldpath"
                },
                "type": {
                  "kind": "StringKeyword"
                }
              },
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "newpath"
                },
                "type": {
                  "kind": "StringKeyword"
                }
              }
            ],
            "type": {
              "kind": "VoidKeyword"
            }
          },
          {
            "kind": "EnumDeclaration",
            "members": [
              {
                "initializer": {
                  "kind": "FirstLiteralToken",
                  "text": "0"
                },
                "kind": "EnumMember",
                "name": {
                  "kind": "Identifier",
                  "text": "Start"
                }
              },
              {
                "initializer": {
                  "kind": "FirstLiteralToken",
                  "text": "1"
                },
                "kind": "EnumMember",
                "name": {
                  "kind": "Identifier",
                  "text": "Current"
                }
              },
              {
                "initializer": {
                  "kind": "FirstLiteralToken",
                  "text": "2"
                },
                "kind": "EnumMember",
                "name": {
                  "kind": "Identifier",
                  "text": "End"
                }
              }
            ],
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "SeekMode"
            }
          },
          {
            "kind": "InterfaceDeclaration",
            "members": [
              {
                "kind": "MethodSignature",
                "name": {
                  "kind": "Identifier",
                  "text": "read"
                },
                "parameters": [
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "p"
                    },
                    "type": {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "Uint8Array"
                      }
                    }
                  }
                ],
                "type": {
                  "kind": "TypeReference",
                  "typeArguments": [
                    {
                      "kind": "UnionType",
                      "types": [
                        {
                          "kind": "NumberKeyword"
                        },
                        {
                          "kind": "LiteralType",
                          "literal": {
                            "kind": "NullKeyword"
                          }
                        }
                      ]
                    }
                  ],
                  "typeName": {
                    "kind": "Identifier",
                    "text": "Promise"
                  }
                }
              }
            ],
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "Reader"
            }
          },
          {
            "kind": "InterfaceDeclaration",
            "members": [
              {
                "kind": "MethodSignature",
                "name": {
                  "kind": "Identifier",
                  "text": "readSync"
                },
                "parameters": [
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "p"
                    },
                    "type": {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "Uint8Array"
                      }
                    }
                  }
                ],
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "NumberKeyword"
                    },
                    {
                      "kind": "LiteralType",
                      "literal": {
                        "kind": "NullKeyword"
                      }
                    }
                  ]
                }
              }
            ],
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "ReaderSync"
            }
          },
          {
            "kind": "InterfaceDeclaration",
            "members": [
              {
                "kind": "MethodSignature",
                "name": {
                  "kind": "Identifier",
                  "text": "write"
                },
                "parameters": [
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "p"
                    },
                    "type": {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "Uint8Array"
                      }
                    }
                  }
                ],
                "type": {
                  "kind": "TypeReference",
                  "typeArguments": [
                    {
                      "kind": "NumberKeyword"
                    }
                  ],
                  "typeName": {
                    "kind": "Identifier",
                    "text": "Promise"
                  }
                }
              }
            ],
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "Writer"
            }
          },
          {
            "kind": "InterfaceDeclaration",
            "members": [
              {
                "kind": "MethodSignature",
                "name": {
                  "kind": "Identifier",
                  "text": "writeSync"
                },
                "parameters": [
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "p"
                    },
                    "type": {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "Uint8Array"
                      }
                    }
                  }
                ],
                "type": {
                  "kind": "NumberKeyword"
                }
              }
            ],
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "WriterSync"
            }
          },
          {
            "kind": "InterfaceDeclaration",
            "members": [
              {
                "kind": "MethodSignature",
                "name": {
                  "kind": "Identifier",
                  "text": "close"
                },
                "parameters": [],
                "type": {
                  "kind": "VoidKeyword"
                }
              }
            ],
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "Closer"
            }
          },
          {
            "kind": "InterfaceDeclaration",
            "members": [
              {
                "kind": "MethodSignature",
                "name": {
                  "kind": "Identifier",
                  "text": "seek"
                },
                "parameters": [
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "offset"
                    },
                    "type": {
                      "kind": "UnionType",
                      "types": [
                        {
                          "kind": "NumberKeyword"
                        },
                        {
                          "kind": "BigIntKeyword"
                        }
                      ]
                    }
                  },
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "whence"
                    },
                    "type": {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "SeekMode"
                      }
                    }
                  }
                ],
                "type": {
                  "kind": "TypeReference",
                  "typeArguments": [
                    {
                      "kind": "NumberKeyword"
                    }
                  ],
                  "typeName": {
                    "kind": "Identifier",
                    "text": "Promise"
                  }
                }
              }
            ],
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "Seeker"
            }
          },
          {
            "kind": "InterfaceDeclaration",
            "members": [
              {
                "kind": "MethodSignature",
                "name": {
                  "kind": "Identifier",
                  "text": "seekSync"
                },
                "parameters": [
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "offset"
                    },
                    "type": {
                      "kind": "UnionType",
                      "types": [
                        {
                          "kind": "NumberKeyword"
                        },
                        {
                          "kind": "BigIntKeyword"
                        }
                      ]
                    }
                  },
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "whence"
                    },
                    "type": {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "SeekMode"
                      }
                    }
                  }
                ],
                "type": {
                  "kind": "NumberKeyword"
                }
              }
            ],
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "SeekerSync"
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "copy"
            },
            "parameters": [
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "src"
                },
                "type": {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "Reader"
                  }
                }
              },
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "dst"
                },
                "type": {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "Writer"
                  }
                }
              },
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "options"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "TypeLiteral",
                  "members": [
                    {
                      "kind": "PropertySignature",
                      "name": {
                        "kind": "Identifier",
                        "text": "bufSize"
                      },
                      "questionToken": {
                        "kind": "QuestionToken"
                      },
                      "type": {
                        "kind": "NumberKeyword"
                      }
                    }
                  ]
                }
              }
            ],
            "type": {
              "kind": "TypeReference",
              "typeArguments": [
                {
                  "kind": "NumberKeyword"
                }
              ],
              "typeName": {
                "kind": "Identifier",
                "text": "Promise"
              }
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "iter"
            },
            "parameters": [
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "r"
                },
                "type": {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "Reader"
                  }
                }
              },
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "options"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "TypeLiteral",
                  "members": [
                    {
                      "kind": "PropertySignature",
                      "name": {
                        "kind": "Identifier",
                        "text": "bufSize"
                      },
                      "questionToken": {
                        "kind": "QuestionToken"
                      },
                      "type": {
                        "kind": "NumberKeyword"
                      }
                    }
                  ]
                }
              }
            ],
            "type": {
              "kind": "TypeReference",
              "typeArguments": [
                {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "Uint8Array"
                  }
                }
              ],
              "typeName": {
                "kind": "Identifier",
                "text": "AsyncIterableIterator"
              }
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "iterSync"
            },
            "parameters": [
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "r"
                },
                "type": {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "ReaderSync"
                  }
                }
              },
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "options"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "TypeLiteral",
                  "members": [
                    {
                      "kind": "PropertySignature",
                      "name": {
                        "kind": "Identifier",
                        "text": "bufSize"
                      },
                      "questionToken": {
                        "kind": "QuestionToken"
                      },
                      "type": {
                        "kind": "NumberKeyword"
                      }
                    }
                  ]
                }
              }
            ],
            "type": {
              "kind": "TypeReference",
              "typeArguments": [
                {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "Uint8Array"
                  }
                }
              ],
              "typeName": {
                "kind": "Identifier",
                "text": "IterableIterator"
              }
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "open"
            },
            "parameters": [
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "path"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "StringKeyword"
                    },
                    {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "URL"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "options"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "OpenOptions"
                  }
                }
              }
            ],
            "type": {
              "kind": "TypeReference",
              "typeArguments": [
                {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "FsFile"
                  }
                }
              ],
              "typeName": {
                "kind": "Identifier",
                "text": "Promise"
              }
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "openSync"
            },
            "parameters": [
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "path"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "StringKeyword"
                    },
                    {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "URL"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "options"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "OpenOptions"
                  }
                }
              }
            ],
            "type": {
              "kind": "TypeReference",
              "typeName": {
                "kind": "Identifier",
                "text": "FsFile"
              }
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "create"
            },
            "parameters": [
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "path"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "StringKeyword"
                    },
                    {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "URL"
                      }
                    }
                  ]
                }
              }
            ],
            "type": {
              "kind": "TypeReference",
              "typeArguments": [
                {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "FsFile"
                  }
                }
              ],
              "typeName": {
                "kind": "Identifier",
                "text": "Promise"
              }
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "createSync"
            },
            "parameters": [
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "path"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "StringKeyword"
                    },
                    {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "URL"
                      }
                    }
                  ]
                }
              }
            ],
            "type": {
              "kind": "TypeReference",
              "typeName": {
                "kind": "Identifier",
                "text": "FsFile"
              }
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "read"
            },
            "parameters": [
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "rid"
                },
                "type": {
                  "kind": "NumberKeyword"
                }
              },
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "buffer"
                },
                "type": {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "Uint8Array"
                  }
                }
              }
            ],
            "type": {
              "kind": "TypeReference",
              "typeArguments": [
                {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "NumberKeyword"
                    },
                    {
                      "kind": "LiteralType",
                      "literal": {
                        "kind": "NullKeyword"
                      }
                    }
                  ]
                }
              ],
              "typeName": {
                "kind": "Identifier",
                "text": "Promise"
              }
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "readSync"
            },
            "parameters": [
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "rid"
                },
                "type": {
                  "kind": "NumberKeyword"
                }
              },
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "buffer"
                },
                "type": {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "Uint8Array"
                  }
                }
              }
            ],
            "type": {
              "kind": "UnionType",
              "types": [
                {
                  "kind": "NumberKeyword"
                },
                {
                  "kind": "LiteralType",
                  "literal": {
                    "kind": "NullKeyword"
                  }
                }
              ]
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "write"
            },
            "parameters": [
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "rid"
                },
                "type": {
                  "kind": "NumberKeyword"
                }
              },
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "data"
                },
                "type": {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "Uint8Array"
                  }
                }
              }
            ],
            "type": {
              "kind": "TypeReference",
              "typeArguments": [
                {
                  "kind": "NumberKeyword"
                }
              ],
              "typeName": {
                "kind": "Identifier",
                "text": "Promise"
              }
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "writeSync"
            },
            "parameters": [
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "rid"
                },
                "type": {
                  "kind": "NumberKeyword"
                }
              },
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "data"
                },
                "type": {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "Uint8Array"
                  }
                }
              }
            ],
            "type": {
              "kind": "NumberKeyword"
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "seek"
            },
            "parameters": [
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "rid"
                },
                "type": {
                  "kind": "NumberKeyword"
                }
              },
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "offset"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "NumberKeyword"
                    },
                    {
                      "kind": "BigIntKeyword"
                    }
                  ]
                }
              },
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "whence"
                },
                "type": {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "SeekMode"
                  }
                }
              }
            ],
            "type": {
              "kind": "TypeReference",
              "typeArguments": [
                {
                  "kind": "NumberKeyword"
                }
              ],
              "typeName": {
                "kind": "Identifier",
                "text": "Promise"
              }
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "seekSync"
            },
            "parameters": [
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "rid"
                },
                "type": {
                  "kind": "NumberKeyword"
                }
              },
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "offset"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "NumberKeyword"
                    },
                    {
                      "kind": "BigIntKeyword"
                    }
                  ]
                }
              },
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "whence"
                },
                "type": {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "SeekMode"
                  }
                }
              }
            ],
            "type": {
              "kind": "NumberKeyword"
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "fsync"
            },
            "parameters": [
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "rid"
                },
                "type": {
                  "kind": "NumberKeyword"
                }
              }
            ],
            "type": {
              "kind": "TypeReference",
              "typeArguments": [
                {
                  "kind": "VoidKeyword"
                }
              ],
              "typeName": {
                "kind": "Identifier",
                "text": "Promise"
              }
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "fsyncSync"
            },
            "parameters": [
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "rid"
                },
                "type": {
                  "kind": "NumberKeyword"
                }
              }
            ],
            "type": {
              "kind": "VoidKeyword"
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "fdatasync"
            },
            "parameters": [
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "rid"
                },
                "type": {
                  "kind": "NumberKeyword"
                }
              }
            ],
            "type": {
              "kind": "TypeReference",
              "typeArguments": [
                {
                  "kind": "VoidKeyword"
                }
              ],
              "typeName": {
                "kind": "Identifier",
                "text": "Promise"
              }
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "fdatasyncSync"
            },
            "parameters": [
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "rid"
                },
                "type": {
                  "kind": "NumberKeyword"
                }
              }
            ],
            "type": {
              "kind": "VoidKeyword"
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "close"
            },
            "parameters": [
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "rid"
                },
                "type": {
                  "kind": "NumberKeyword"
                }
              }
            ],
            "type": {
              "kind": "VoidKeyword"
            }
          },
          {
            "heritageClauses": [
              {
                "kind": "HeritageClause",
                "token": "FirstFutureReservedWord",
                "types": [
                  {
                    "expression": {
                      "kind": "Identifier",
                      "text": "Reader"
                    },
                    "kind": "ExpressionWithTypeArguments"
                  },
                  {
                    "expression": {
                      "kind": "Identifier",
                      "text": "ReaderSync"
                    },
                    "kind": "ExpressionWithTypeArguments"
                  },
                  {
                    "expression": {
                      "kind": "Identifier",
                      "text": "Writer"
                    },
                    "kind": "ExpressionWithTypeArguments"
                  },
                  {
                    "expression": {
                      "kind": "Identifier",
                      "text": "WriterSync"
                    },
                    "kind": "ExpressionWithTypeArguments"
                  },
                  {
                    "expression": {
                      "kind": "Identifier",
                      "text": "Seeker"
                    },
                    "kind": "ExpressionWithTypeArguments"
                  },
                  {
                    "expression": {
                      "kind": "Identifier",
                      "text": "SeekerSync"
                    },
                    "kind": "ExpressionWithTypeArguments"
                  },
                  {
                    "expression": {
                      "kind": "Identifier",
                      "text": "Closer"
                    },
                    "kind": "ExpressionWithTypeArguments"
                  },
                  {
                    "expression": {
                      "kind": "Identifier",
                      "text": "Disposable"
                    },
                    "kind": "ExpressionWithTypeArguments"
                  }
                ]
              }
            ],
            "kind": "ClassDeclaration",
            "members": [
              {
                "kind": "PropertyDeclaration",
                "modifiers": [
                  {
                    "kind": "ReadonlyKeyword"
                  }
                ],
                "name": {
                  "kind": "Identifier",
                  "text": "rid"
                },
                "type": {
                  "kind": "NumberKeyword"
                }
              },
              {
                "kind": "PropertyDeclaration",
                "modifiers": [
                  {
                    "kind": "ReadonlyKeyword"
                  }
                ],
                "name": {
                  "kind": "Identifier",
                  "text": "readable"
                },
                "type": {
                  "kind": "TypeReference",
                  "typeArguments": [
                    {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "Uint8Array"
                      }
                    }
                  ],
                  "typeName": {
                    "kind": "Identifier",
                    "text": "ReadableStream"
                  }
                }
              },
              {
                "kind": "PropertyDeclaration",
                "modifiers": [
                  {
                    "kind": "ReadonlyKeyword"
                  }
                ],
                "name": {
                  "kind": "Identifier",
                  "text": "writable"
                },
                "type": {
                  "kind": "TypeReference",
                  "typeArguments": [
                    {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "Uint8Array"
                      }
                    }
                  ],
                  "typeName": {
                    "kind": "Identifier",
                    "text": "WritableStream"
                  }
                }
              },
              {
                "kind": "Constructor",
                "parameters": [
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "rid"
                    },
                    "type": {
                      "kind": "NumberKeyword"
                    }
                  }
                ]
              },
              {
                "kind": "MethodDeclaration",
                "name": {
                  "kind": "Identifier",
                  "text": "write"
                },
                "parameters": [
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "p"
                    },
                    "type": {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "Uint8Array"
                      }
                    }
                  }
                ],
                "type": {
                  "kind": "TypeReference",
                  "typeArguments": [
                    {
                      "kind": "NumberKeyword"
                    }
                  ],
                  "typeName": {
                    "kind": "Identifier",
                    "text": "Promise"
                  }
                }
              },
              {
                "kind": "MethodDeclaration",
                "name": {
                  "kind": "Identifier",
                  "text": "writeSync"
                },
                "parameters": [
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "p"
                    },
                    "type": {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "Uint8Array"
                      }
                    }
                  }
                ],
                "type": {
                  "kind": "NumberKeyword"
                }
              },
              {
                "kind": "MethodDeclaration",
                "name": {
                  "kind": "Identifier",
                  "text": "truncate"
                },
                "parameters": [
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "len"
                    },
                    "questionToken": {
                      "kind": "QuestionToken"
                    },
                    "type": {
                      "kind": "NumberKeyword"
                    }
                  }
                ],
                "type": {
                  "kind": "TypeReference",
                  "typeArguments": [
                    {
                      "kind": "VoidKeyword"
                    }
                  ],
                  "typeName": {
                    "kind": "Identifier",
                    "text": "Promise"
                  }
                }
              },
              {
                "kind": "MethodDeclaration",
                "name": {
                  "kind": "Identifier",
                  "text": "truncateSync"
                },
                "parameters": [
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "len"
                    },
                    "questionToken": {
                      "kind": "QuestionToken"
                    },
                    "type": {
                      "kind": "NumberKeyword"
                    }
                  }
                ],
                "type": {
                  "kind": "VoidKeyword"
                }
              },
              {
                "kind": "MethodDeclaration",
                "name": {
                  "kind": "Identifier",
                  "text": "read"
                },
                "parameters": [
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "p"
                    },
                    "type": {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "Uint8Array"
                      }
                    }
                  }
                ],
                "type": {
                  "kind": "TypeReference",
                  "typeArguments": [
                    {
                      "kind": "UnionType",
                      "types": [
                        {
                          "kind": "NumberKeyword"
                        },
                        {
                          "kind": "LiteralType",
                          "literal": {
                            "kind": "NullKeyword"
                          }
                        }
                      ]
                    }
                  ],
                  "typeName": {
                    "kind": "Identifier",
                    "text": "Promise"
                  }
                }
              },
              {
                "kind": "MethodDeclaration",
                "name": {
                  "kind": "Identifier",
                  "text": "readSync"
                },
                "parameters": [
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "p"
                    },
                    "type": {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "Uint8Array"
                      }
                    }
                  }
                ],
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "NumberKeyword"
                    },
                    {
                      "kind": "LiteralType",
                      "literal": {
                        "kind": "NullKeyword"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "MethodDeclaration",
                "name": {
                  "kind": "Identifier",
                  "text": "seek"
                },
                "parameters": [
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "offset"
                    },
                    "type": {
                      "kind": "UnionType",
                      "types": [
                        {
                          "kind": "NumberKeyword"
                        },
                        {
                          "kind": "BigIntKeyword"
                        }
                      ]
                    }
                  },
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "whence"
                    },
                    "type": {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "SeekMode"
                      }
                    }
                  }
                ],
                "type": {
                  "kind": "TypeReference",
                  "typeArguments": [
                    {
                      "kind": "NumberKeyword"
                    }
                  ],
                  "typeName": {
                    "kind": "Identifier",
                    "text": "Promise"
                  }
                }
              },
              {
                "kind": "MethodDeclaration",
                "name": {
                  "kind": "Identifier",
                  "text": "seekSync"
                },
                "parameters": [
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "offset"
                    },
                    "type": {
                      "kind": "UnionType",
                      "types": [
                        {
                          "kind": "NumberKeyword"
                        },
                        {
                          "kind": "BigIntKeyword"
                        }
                      ]
                    }
                  },
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "whence"
                    },
                    "type": {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "SeekMode"
                      }
                    }
                  }
                ],
                "type": {
                  "kind": "NumberKeyword"
                }
              },
              {
                "kind": "MethodDeclaration",
                "name": {
                  "kind": "Identifier",
                  "text": "stat"
                },
                "parameters": [],
                "type": {
                  "kind": "TypeReference",
                  "typeArguments": [
                    {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "FileInfo"
                      }
                    }
                  ],
                  "typeName": {
                    "kind": "Identifier",
                    "text": "Promise"
                  }
                }
              },
              {
                "kind": "MethodDeclaration",
                "name": {
                  "kind": "Identifier",
                  "text": "statSync"
                },
                "parameters": [],
                "type": {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "FileInfo"
                  }
                }
              },
              {
                "kind": "MethodDeclaration",
                "name": {
                  "kind": "Identifier",
                  "text": "sync"
                },
                "parameters": [],
                "type": {
                  "kind": "TypeReference",
                  "typeArguments": [
                    {
                      "kind": "VoidKeyword"
                    }
                  ],
                  "typeName": {
                    "kind": "Identifier",
                    "text": "Promise"
                  }
                }
              },
              {
                "kind": "MethodDeclaration",
                "name": {
                  "kind": "Identifier",
                  "text": "syncSync"
                },
                "parameters": [],
                "type": {
                  "kind": "VoidKeyword"
                }
              },
              {
                "kind": "MethodDeclaration",
                "name": {
                  "kind": "Identifier",
                  "text": "syncData"
                },
                "parameters": [],
                "type": {
                  "kind": "TypeReference",
                  "typeArguments": [
                    {
                      "kind": "VoidKeyword"
                    }
                  ],
                  "typeName": {
                    "kind": "Identifier",
                    "text": "Promise"
                  }
                }
              },
              {
                "kind": "MethodDeclaration",
                "name": {
                  "kind": "Identifier",
                  "text": "syncDataSync"
                },
                "parameters": [],
                "type": {
                  "kind": "VoidKeyword"
                }
              },
              {
                "kind": "MethodDeclaration",
                "name": {
                  "kind": "Identifier",
                  "text": "utime"
                },
                "parameters": [
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "atime"
                    },
                    "type": {
                      "kind": "UnionType",
                      "types": [
                        {
                          "kind": "NumberKeyword"
                        },
                        {
                          "kind": "TypeReference",
                          "typeName": {
                            "kind": "Identifier",
                            "text": "Date"
                          }
                        }
                      ]
                    }
                  },
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "mtime"
                    },
                    "type": {
                      "kind": "UnionType",
                      "types": [
                        {
                          "kind": "NumberKeyword"
                        },
                        {
                          "kind": "TypeReference",
                          "typeName": {
                            "kind": "Identifier",
                            "text": "Date"
                          }
                        }
                      ]
                    }
                  }
                ],
                "type": {
                  "kind": "TypeReference",
                  "typeArguments": [
                    {
                      "kind": "VoidKeyword"
                    }
                  ],
                  "typeName": {
                    "kind": "Identifier",
                    "text": "Promise"
                  }
                }
              },
              {
                "kind": "MethodDeclaration",
                "name": {
                  "kind": "Identifier",
                  "text": "utimeSync"
                },
                "parameters": [
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "atime"
                    },
                    "type": {
                      "kind": "UnionType",
                      "types": [
                        {
                          "kind": "NumberKeyword"
                        },
                        {
                          "kind": "TypeReference",
                          "typeName": {
                            "kind": "Identifier",
                            "text": "Date"
                          }
                        }
                      ]
                    }
                  },
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "mtime"
                    },
                    "type": {
                      "kind": "UnionType",
                      "types": [
                        {
                          "kind": "NumberKeyword"
                        },
                        {
                          "kind": "TypeReference",
                          "typeName": {
                            "kind": "Identifier",
                            "text": "Date"
                          }
                        }
                      ]
                    }
                  }
                ],
                "type": {
                  "kind": "VoidKeyword"
                }
              },
              {
                "kind": "MethodDeclaration",
                "name": {
                  "kind": "Identifier",
                  "text": "isTerminal"
                },
                "parameters": [],
                "type": {
                  "kind": "BooleanKeyword"
                }
              },
              {
                "kind": "MethodDeclaration",
                "name": {
                  "kind": "Identifier",
                  "text": "setRaw"
                },
                "parameters": [
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "mode"
                    },
                    "type": {
                      "kind": "BooleanKeyword"
                    }
                  },
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "options"
                    },
                    "questionToken": {
                      "kind": "QuestionToken"
                    },
                    "type": {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "SetRawOptions"
                      }
                    }
                  }
                ],
                "type": {
                  "kind": "VoidKeyword"
                }
              },
              {
                "kind": "MethodDeclaration",
                "name": {
                  "kind": "Identifier",
                  "text": "lock"
                },
                "parameters": [
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "exclusive"
                    },
                    "questionToken": {
                      "kind": "QuestionToken"
                    },
                    "type": {
                      "kind": "BooleanKeyword"
                    }
                  }
                ],
                "type": {
                  "kind": "TypeReference",
                  "typeArguments": [
                    {
                      "kind": "VoidKeyword"
                    }
                  ],
                  "typeName": {
                    "kind": "Identifier",
                    "text": "Promise"
                  }
                }
              },
              {
                "kind": "MethodDeclaration",
                "name": {
                  "kind": "Identifier",
                  "text": "lockSync"
                },
                "parameters": [
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "exclusive"
                    },
                    "questionToken": {
                      "kind": "QuestionToken"
                    },
                    "type": {
                      "kind": "BooleanKeyword"
                    }
                  }
                ],
                "type": {
                  "kind": "VoidKeyword"
                }
              },
              {
                "kind": "MethodDeclaration",
                "name": {
                  "kind": "Identifier",
                  "text": "unlock"
                },
                "parameters": [],
                "type": {
                  "kind": "TypeReference",
                  "typeArguments": [
                    {
                      "kind": "VoidKeyword"
                    }
                  ],
                  "typeName": {
                    "kind": "Identifier",
                    "text": "Promise"
                  }
                }
              },
              {
                "kind": "MethodDeclaration",
                "name": {
                  "kind": "Identifier",
                  "text": "unlockSync"
                },
                "parameters": [],
                "type": {
                  "kind": "VoidKeyword"
                }
              },
              {
                "kind": "MethodDeclaration",
                "name": {
                  "kind": "Identifier",
                  "text": "close"
                },
                "parameters": [],
                "type": {
                  "kind": "VoidKeyword"
                }
              },
              {
                "kind": "MethodDeclaration",
                "name": {
                  "expression": {
                    "expression": {
                      "kind": "Identifier",
                      "text": "Symbol"
                    },
                    "kind": "PropertyAccessExpression",
                    "name": {
                      "kind": "Identifier",
                      "text": "dispose"
                    }
                  },
                  "kind": "ComputedPropertyName"
                },
                "parameters": [],
                "type": {
                  "kind": "VoidKeyword"
                }
              }
            ],
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "FsFile"
            }
          },
          {
            "declarationList": {
              "declarations": [
                {
                  "kind": "VariableDeclaration",
                  "name": {
                    "kind": "Identifier",
                    "text": "File"
                  },
                  "type": {
                    "exprName": {
                      "kind": "Identifier",
                      "text": "FsFile"
                    },
                    "kind": "TypeQuery"
                  }
                }
              ],
              "kind": "VariableDeclarationList"
            },
            "kind": "FirstStatement",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ]
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "consoleSize"
            },
            "parameters": [],
            "type": {
              "kind": "TypeLiteral",
              "members": [
                {
                  "kind": "PropertySignature",
                  "name": {
                    "kind": "Identifier",
                    "text": "columns"
                  },
                  "type": {
                    "kind": "NumberKeyword"
                  }
                },
                {
                  "kind": "PropertySignature",
                  "name": {
                    "kind": "Identifier",
                    "text": "rows"
                  },
                  "type": {
                    "kind": "NumberKeyword"
                  }
                }
              ]
            }
          },
          {
            "kind": "InterfaceDeclaration",
            "members": [
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "cbreak"
                },
                "type": {
                  "kind": "BooleanKeyword"
                }
              }
            ],
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "SetRawOptions"
            }
          },
          {
            "declarationList": {
              "declarations": [
                {
                  "kind": "VariableDeclaration",
                  "name": {
                    "kind": "Identifier",
                    "text": "stdin"
                  },
                  "type": {
                    "kind": "IntersectionType",
                    "types": [
                      {
                        "kind": "TypeReference",
                        "typeName": {
                          "kind": "Identifier",
                          "text": "Reader"
                        }
                      },
                      {
                        "kind": "TypeReference",
                        "typeName": {
                          "kind": "Identifier",
                          "text": "ReaderSync"
                        }
                      },
                      {
                        "kind": "TypeReference",
                        "typeName": {
                          "kind": "Identifier",
                          "text": "Closer"
                        }
                      },
                      {
                        "kind": "TypeLiteral",
                        "members": [
                          {
                            "kind": "PropertySignature",
                            "modifiers": [
                              {
                                "kind": "ReadonlyKeyword"
                              }
                            ],
                            "name": {
                              "kind": "Identifier",
                              "text": "rid"
                            },
                            "type": {
                              "kind": "NumberKeyword"
                            }
                          },
                          {
                            "kind": "PropertySignature",
                            "modifiers": [
                              {
                                "kind": "ReadonlyKeyword"
                              }
                            ],
                            "name": {
                              "kind": "Identifier",
                              "text": "readable"
                            },
                            "type": {
                              "kind": "TypeReference",
                              "typeArguments": [
                                {
                                  "kind": "TypeReference",
                                  "typeName": {
                                    "kind": "Identifier",
                                    "text": "Uint8Array"
                                  }
                                }
                              ],
                              "typeName": {
                                "kind": "Identifier",
                                "text": "ReadableStream"
                              }
                            }
                          },
                          {
                            "kind": "MethodSignature",
                            "name": {
                              "kind": "Identifier",
                              "text": "setRaw"
                            },
                            "parameters": [
                              {
                                "kind": "Parameter",
                                "name": {
                                  "kind": "Identifier",
                                  "text": "mode"
                                },
                                "type": {
                                  "kind": "BooleanKeyword"
                                }
                              },
                              {
                                "kind": "Parameter",
                                "name": {
                                  "kind": "Identifier",
                                  "text": "options"
                                },
                                "questionToken": {
                                  "kind": "QuestionToken"
                                },
                                "type": {
                                  "kind": "TypeReference",
                                  "typeName": {
                                    "kind": "Identifier",
                                    "text": "SetRawOptions"
                                  }
                                }
                              }
                            ],
                            "type": {
                              "kind": "VoidKeyword"
                            }
                          },
                          {
                            "kind": "MethodSignature",
                            "name": {
                              "kind": "Identifier",
                              "text": "isTerminal"
                            },
                            "parameters": [],
                            "type": {
                              "kind": "BooleanKeyword"
                            }
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "kind": "VariableDeclarationList"
            },
            "kind": "FirstStatement",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ]
          },
          {
            "declarationList": {
              "declarations": [
                {
                  "kind": "VariableDeclaration",
                  "name": {
                    "kind": "Identifier",
                    "text": "stdout"
                  },
                  "type": {
                    "kind": "IntersectionType",
                    "types": [
                      {
                        "kind": "TypeReference",
                        "typeName": {
                          "kind": "Identifier",
                          "text": "Writer"
                        }
                      },
                      {
                        "kind": "TypeReference",
                        "typeName": {
                          "kind": "Identifier",
                          "text": "WriterSync"
                        }
                      },
                      {
                        "kind": "TypeReference",
                        "typeName": {
                          "kind": "Identifier",
                          "text": "Closer"
                        }
                      },
                      {
                        "kind": "TypeLiteral",
                        "members": [
                          {
                            "kind": "PropertySignature",
                            "modifiers": [
                              {
                                "kind": "ReadonlyKeyword"
                              }
                            ],
                            "name": {
                              "kind": "Identifier",
                              "text": "rid"
                            },
                            "type": {
                              "kind": "NumberKeyword"
                            }
                          },
                          {
                            "kind": "PropertySignature",
                            "modifiers": [
                              {
                                "kind": "ReadonlyKeyword"
                              }
                            ],
                            "name": {
                              "kind": "Identifier",
                              "text": "writable"
                            },
                            "type": {
                              "kind": "TypeReference",
                              "typeArguments": [
                                {
                                  "kind": "TypeReference",
                                  "typeName": {
                                    "kind": "Identifier",
                                    "text": "Uint8Array"
                                  }
                                }
                              ],
                              "typeName": {
                                "kind": "Identifier",
                                "text": "WritableStream"
                              }
                            }
                          },
                          {
                            "kind": "MethodSignature",
                            "name": {
                              "kind": "Identifier",
                              "text": "isTerminal"
                            },
                            "parameters": [],
                            "type": {
                              "kind": "BooleanKeyword"
                            }
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "kind": "VariableDeclarationList"
            },
            "kind": "FirstStatement",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ]
          },
          {
            "declarationList": {
              "declarations": [
                {
                  "kind": "VariableDeclaration",
                  "name": {
                    "kind": "Identifier",
                    "text": "stderr"
                  },
                  "type": {
                    "kind": "IntersectionType",
                    "types": [
                      {
                        "kind": "TypeReference",
                        "typeName": {
                          "kind": "Identifier",
                          "text": "Writer"
                        }
                      },
                      {
                        "kind": "TypeReference",
                        "typeName": {
                          "kind": "Identifier",
                          "text": "WriterSync"
                        }
                      },
                      {
                        "kind": "TypeReference",
                        "typeName": {
                          "kind": "Identifier",
                          "text": "Closer"
                        }
                      },
                      {
                        "kind": "TypeLiteral",
                        "members": [
                          {
                            "kind": "PropertySignature",
                            "modifiers": [
                              {
                                "kind": "ReadonlyKeyword"
                              }
                            ],
                            "name": {
                              "kind": "Identifier",
                              "text": "rid"
                            },
                            "type": {
                              "kind": "NumberKeyword"
                            }
                          },
                          {
                            "kind": "PropertySignature",
                            "modifiers": [
                              {
                                "kind": "ReadonlyKeyword"
                              }
                            ],
                            "name": {
                              "kind": "Identifier",
                              "text": "writable"
                            },
                            "type": {
                              "kind": "TypeReference",
                              "typeArguments": [
                                {
                                  "kind": "TypeReference",
                                  "typeName": {
                                    "kind": "Identifier",
                                    "text": "Uint8Array"
                                  }
                                }
                              ],
                              "typeName": {
                                "kind": "Identifier",
                                "text": "WritableStream"
                              }
                            }
                          },
                          {
                            "kind": "MethodSignature",
                            "name": {
                              "kind": "Identifier",
                              "text": "isTerminal"
                            },
                            "parameters": [],
                            "type": {
                              "kind": "BooleanKeyword"
                            }
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "kind": "VariableDeclarationList"
            },
            "kind": "FirstStatement",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ]
          },
          {
            "kind": "InterfaceDeclaration",
            "members": [
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "read"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "BooleanKeyword"
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "write"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "BooleanKeyword"
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "append"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "BooleanKeyword"
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "truncate"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "BooleanKeyword"
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "create"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "BooleanKeyword"
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "createNew"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "BooleanKeyword"
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "mode"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "NumberKeyword"
                }
              }
            ],
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "OpenOptions"
            }
          },
          {
            "kind": "InterfaceDeclaration",
            "members": [
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "signal"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "AbortSignal"
                  }
                }
              }
            ],
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "ReadFileOptions"
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "isatty"
            },
            "parameters": [
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "rid"
                },
                "type": {
                  "kind": "NumberKeyword"
                }
              }
            ],
            "type": {
              "kind": "BooleanKeyword"
            }
          },
          {
            "heritageClauses": [
              {
                "kind": "HeritageClause",
                "token": "FirstFutureReservedWord",
                "types": [
                  {
                    "expression": {
                      "kind": "Identifier",
                      "text": "Reader"
                    },
                    "kind": "ExpressionWithTypeArguments"
                  },
                  {
                    "expression": {
                      "kind": "Identifier",
                      "text": "ReaderSync"
                    },
                    "kind": "ExpressionWithTypeArguments"
                  },
                  {
                    "expression": {
                      "kind": "Identifier",
                      "text": "Writer"
                    },
                    "kind": "ExpressionWithTypeArguments"
                  },
                  {
                    "expression": {
                      "kind": "Identifier",
                      "text": "WriterSync"
                    },
                    "kind": "ExpressionWithTypeArguments"
                  }
                ]
              }
            ],
            "kind": "ClassDeclaration",
            "members": [
              {
                "kind": "Constructor",
                "parameters": [
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "ab"
                    },
                    "questionToken": {
                      "kind": "QuestionToken"
                    },
                    "type": {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "ArrayBuffer"
                      }
                    }
                  }
                ]
              },
              {
                "kind": "MethodDeclaration",
                "name": {
                  "kind": "Identifier",
                  "text": "bytes"
                },
                "parameters": [
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "options"
                    },
                    "questionToken": {
                      "kind": "QuestionToken"
                    },
                    "type": {
                      "kind": "TypeLiteral",
                      "members": [
                        {
                          "kind": "PropertySignature",
                          "name": {
                            "kind": "Identifier",
                            "text": "copy"
                          },
                          "questionToken": {
                            "kind": "QuestionToken"
                          },
                          "type": {
                            "kind": "BooleanKeyword"
                          }
                        }
                      ]
                    }
                  }
                ],
                "type": {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "Uint8Array"
                  }
                }
              },
              {
                "kind": "MethodDeclaration",
                "name": {
                  "kind": "Identifier",
                  "text": "empty"
                },
                "parameters": [],
                "type": {
                  "kind": "BooleanKeyword"
                }
              },
              {
                "kind": "PropertyDeclaration",
                "modifiers": [
                  {
                    "kind": "ReadonlyKeyword"
                  }
                ],
                "name": {
                  "kind": "Identifier",
                  "text": "length"
                },
                "type": {
                  "kind": "NumberKeyword"
                }
              },
              {
                "kind": "PropertyDeclaration",
                "modifiers": [
                  {
                    "kind": "ReadonlyKeyword"
                  }
                ],
                "name": {
                  "kind": "Identifier",
                  "text": "capacity"
                },
                "type": {
                  "kind": "NumberKeyword"
                }
              },
              {
                "kind": "MethodDeclaration",
                "name": {
                  "kind": "Identifier",
                  "text": "truncate"
                },
                "parameters": [
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "n"
                    },
                    "type": {
                      "kind": "NumberKeyword"
                    }
                  }
                ],
                "type": {
                  "kind": "VoidKeyword"
                }
              },
              {
                "kind": "MethodDeclaration",
                "name": {
                  "kind": "Identifier",
                  "text": "reset"
                },
                "parameters": [],
                "type": {
                  "kind": "VoidKeyword"
                }
              },
              {
                "kind": "MethodDeclaration",
                "name": {
                  "kind": "Identifier",
                  "text": "readSync"
                },
                "parameters": [
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "p"
                    },
                    "type": {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "Uint8Array"
                      }
                    }
                  }
                ],
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "NumberKeyword"
                    },
                    {
                      "kind": "LiteralType",
                      "literal": {
                        "kind": "NullKeyword"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "MethodDeclaration",
                "name": {
                  "kind": "Identifier",
                  "text": "read"
                },
                "parameters": [
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "p"
                    },
                    "type": {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "Uint8Array"
                      }
                    }
                  }
                ],
                "type": {
                  "kind": "TypeReference",
                  "typeArguments": [
                    {
                      "kind": "UnionType",
                      "types": [
                        {
                          "kind": "NumberKeyword"
                        },
                        {
                          "kind": "LiteralType",
                          "literal": {
                            "kind": "NullKeyword"
                          }
                        }
                      ]
                    }
                  ],
                  "typeName": {
                    "kind": "Identifier",
                    "text": "Promise"
                  }
                }
              },
              {
                "kind": "MethodDeclaration",
                "name": {
                  "kind": "Identifier",
                  "text": "writeSync"
                },
                "parameters": [
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "p"
                    },
                    "type": {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "Uint8Array"
                      }
                    }
                  }
                ],
                "type": {
                  "kind": "NumberKeyword"
                }
              },
              {
                "kind": "MethodDeclaration",
                "name": {
                  "kind": "Identifier",
                  "text": "write"
                },
                "parameters": [
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "p"
                    },
                    "type": {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "Uint8Array"
                      }
                    }
                  }
                ],
                "type": {
                  "kind": "TypeReference",
                  "typeArguments": [
                    {
                      "kind": "NumberKeyword"
                    }
                  ],
                  "typeName": {
                    "kind": "Identifier",
                    "text": "Promise"
                  }
                }
              },
              {
                "kind": "MethodDeclaration",
                "name": {
                  "kind": "Identifier",
                  "text": "grow"
                },
                "parameters": [
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "n"
                    },
                    "type": {
                      "kind": "NumberKeyword"
                    }
                  }
                ],
                "type": {
                  "kind": "VoidKeyword"
                }
              },
              {
                "kind": "MethodDeclaration",
                "name": {
                  "kind": "Identifier",
                  "text": "readFrom"
                },
                "parameters": [
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "r"
                    },
                    "type": {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "Reader"
                      }
                    }
                  }
                ],
                "type": {
                  "kind": "TypeReference",
                  "typeArguments": [
                    {
                      "kind": "NumberKeyword"
                    }
                  ],
                  "typeName": {
                    "kind": "Identifier",
                    "text": "Promise"
                  }
                }
              },
              {
                "kind": "MethodDeclaration",
                "name": {
                  "kind": "Identifier",
                  "text": "readFromSync"
                },
                "parameters": [
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "r"
                    },
                    "type": {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "ReaderSync"
                      }
                    }
                  }
                ],
                "type": {
                  "kind": "NumberKeyword"
                }
              }
            ],
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "Buffer"
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "readAll"
            },
            "parameters": [
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "r"
                },
                "type": {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "Reader"
                  }
                }
              }
            ],
            "type": {
              "kind": "TypeReference",
              "typeArguments": [
                {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "Uint8Array"
                  }
                }
              ],
              "typeName": {
                "kind": "Identifier",
                "text": "Promise"
              }
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "readAllSync"
            },
            "parameters": [
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "r"
                },
                "type": {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "ReaderSync"
                  }
                }
              }
            ],
            "type": {
              "kind": "TypeReference",
              "typeName": {
                "kind": "Identifier",
                "text": "Uint8Array"
              }
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "writeAll"
            },
            "parameters": [
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "w"
                },
                "type": {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "Writer"
                  }
                }
              },
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "arr"
                },
                "type": {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "Uint8Array"
                  }
                }
              }
            ],
            "type": {
              "kind": "TypeReference",
              "typeArguments": [
                {
                  "kind": "VoidKeyword"
                }
              ],
              "typeName": {
                "kind": "Identifier",
                "text": "Promise"
              }
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "writeAllSync"
            },
            "parameters": [
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "w"
                },
                "type": {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "WriterSync"
                  }
                }
              },
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "arr"
                },
                "type": {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "Uint8Array"
                  }
                }
              }
            ],
            "type": {
              "kind": "VoidKeyword"
            }
          },
          {
            "kind": "InterfaceDeclaration",
            "members": [
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "recursive"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "BooleanKeyword"
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "mode"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "NumberKeyword"
                }
              }
            ],
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "MkdirOptions"
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "mkdir"
            },
            "parameters": [
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "path"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "StringKeyword"
                    },
                    {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "URL"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "options"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "MkdirOptions"
                  }
                }
              }
            ],
            "type": {
              "kind": "TypeReference",
              "typeArguments": [
                {
                  "kind": "VoidKeyword"
                }
              ],
              "typeName": {
                "kind": "Identifier",
                "text": "Promise"
              }
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "mkdirSync"
            },
            "parameters": [
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "path"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "StringKeyword"
                    },
                    {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "URL"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "options"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "MkdirOptions"
                  }
                }
              }
            ],
            "type": {
              "kind": "VoidKeyword"
            }
          },
          {
            "kind": "InterfaceDeclaration",
            "members": [
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "dir"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "StringKeyword"
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "prefix"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "StringKeyword"
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "suffix"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "StringKeyword"
                }
              }
            ],
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "MakeTempOptions"
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "makeTempDir"
            },
            "parameters": [
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "options"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "MakeTempOptions"
                  }
                }
              }
            ],
            "type": {
              "kind": "TypeReference",
              "typeArguments": [
                {
                  "kind": "StringKeyword"
                }
              ],
              "typeName": {
                "kind": "Identifier",
                "text": "Promise"
              }
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "makeTempDirSync"
            },
            "parameters": [
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "options"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "MakeTempOptions"
                  }
                }
              }
            ],
            "type": {
              "kind": "StringKeyword"
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "makeTempFile"
            },
            "parameters": [
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "options"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "MakeTempOptions"
                  }
                }
              }
            ],
            "type": {
              "kind": "TypeReference",
              "typeArguments": [
                {
                  "kind": "StringKeyword"
                }
              ],
              "typeName": {
                "kind": "Identifier",
                "text": "Promise"
              }
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "makeTempFileSync"
            },
            "parameters": [
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "options"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "MakeTempOptions"
                  }
                }
              }
            ],
            "type": {
              "kind": "StringKeyword"
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "chmod"
            },
            "parameters": [
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "path"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "StringKeyword"
                    },
                    {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "URL"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "mode"
                },
                "type": {
                  "kind": "NumberKeyword"
                }
              }
            ],
            "type": {
              "kind": "TypeReference",
              "typeArguments": [
                {
                  "kind": "VoidKeyword"
                }
              ],
              "typeName": {
                "kind": "Identifier",
                "text": "Promise"
              }
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "chmodSync"
            },
            "parameters": [
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "path"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "StringKeyword"
                    },
                    {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "URL"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "mode"
                },
                "type": {
                  "kind": "NumberKeyword"
                }
              }
            ],
            "type": {
              "kind": "VoidKeyword"
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "chown"
            },
            "parameters": [
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "path"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "StringKeyword"
                    },
                    {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "URL"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "uid"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "NumberKeyword"
                    },
                    {
                      "kind": "LiteralType",
                      "literal": {
                        "kind": "NullKeyword"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "gid"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "NumberKeyword"
                    },
                    {
                      "kind": "LiteralType",
                      "literal": {
                        "kind": "NullKeyword"
                      }
                    }
                  ]
                }
              }
            ],
            "type": {
              "kind": "TypeReference",
              "typeArguments": [
                {
                  "kind": "VoidKeyword"
                }
              ],
              "typeName": {
                "kind": "Identifier",
                "text": "Promise"
              }
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "chownSync"
            },
            "parameters": [
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "path"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "StringKeyword"
                    },
                    {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "URL"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "uid"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "NumberKeyword"
                    },
                    {
                      "kind": "LiteralType",
                      "literal": {
                        "kind": "NullKeyword"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "gid"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "NumberKeyword"
                    },
                    {
                      "kind": "LiteralType",
                      "literal": {
                        "kind": "NullKeyword"
                      }
                    }
                  ]
                }
              }
            ],
            "type": {
              "kind": "VoidKeyword"
            }
          },
          {
            "kind": "InterfaceDeclaration",
            "members": [
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "recursive"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "BooleanKeyword"
                }
              }
            ],
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "RemoveOptions"
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "remove"
            },
            "parameters": [
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "path"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "StringKeyword"
                    },
                    {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "URL"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "options"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "RemoveOptions"
                  }
                }
              }
            ],
            "type": {
              "kind": "TypeReference",
              "typeArguments": [
                {
                  "kind": "VoidKeyword"
                }
              ],
              "typeName": {
                "kind": "Identifier",
                "text": "Promise"
              }
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "removeSync"
            },
            "parameters": [
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "path"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "StringKeyword"
                    },
                    {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "URL"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "options"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "RemoveOptions"
                  }
                }
              }
            ],
            "type": {
              "kind": "VoidKeyword"
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "renameSync"
            },
            "parameters": [
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "oldpath"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "StringKeyword"
                    },
                    {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "URL"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "newpath"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "StringKeyword"
                    },
                    {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "URL"
                      }
                    }
                  ]
                }
              }
            ],
            "type": {
              "kind": "VoidKeyword"
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "rename"
            },
            "parameters": [
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "oldpath"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "StringKeyword"
                    },
                    {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "URL"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "newpath"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "StringKeyword"
                    },
                    {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "URL"
                      }
                    }
                  ]
                }
              }
            ],
            "type": {
              "kind": "TypeReference",
              "typeArguments": [
                {
                  "kind": "VoidKeyword"
                }
              ],
              "typeName": {
                "kind": "Identifier",
                "text": "Promise"
              }
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "readTextFile"
            },
            "parameters": [
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "path"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "StringKeyword"
                    },
                    {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "URL"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "options"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "ReadFileOptions"
                  }
                }
              }
            ],
            "type": {
              "kind": "TypeReference",
              "typeArguments": [
                {
                  "kind": "StringKeyword"
                }
              ],
              "typeName": {
                "kind": "Identifier",
                "text": "Promise"
              }
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "readTextFileSync"
            },
            "parameters": [
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "path"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "StringKeyword"
                    },
                    {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "URL"
                      }
                    }
                  ]
                }
              }
            ],
            "type": {
              "kind": "StringKeyword"
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "readFile"
            },
            "parameters": [
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "path"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "StringKeyword"
                    },
                    {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "URL"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "options"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "ReadFileOptions"
                  }
                }
              }
            ],
            "type": {
              "kind": "TypeReference",
              "typeArguments": [
                {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "Uint8Array"
                  }
                }
              ],
              "typeName": {
                "kind": "Identifier",
                "text": "Promise"
              }
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "readFileSync"
            },
            "parameters": [
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "path"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "StringKeyword"
                    },
                    {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "URL"
                      }
                    }
                  ]
                }
              }
            ],
            "type": {
              "kind": "TypeReference",
              "typeName": {
                "kind": "Identifier",
                "text": "Uint8Array"
              }
            }
          },
          {
            "kind": "InterfaceDeclaration",
            "members": [
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "isFile"
                },
                "type": {
                  "kind": "BooleanKeyword"
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "isDirectory"
                },
                "type": {
                  "kind": "BooleanKeyword"
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "isSymlink"
                },
                "type": {
                  "kind": "BooleanKeyword"
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "size"
                },
                "type": {
                  "kind": "NumberKeyword"
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "mtime"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "Date"
                      }
                    },
                    {
                      "kind": "LiteralType",
                      "literal": {
                        "kind": "NullKeyword"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "atime"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "Date"
                      }
                    },
                    {
                      "kind": "LiteralType",
                      "literal": {
                        "kind": "NullKeyword"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "birthtime"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "Date"
                      }
                    },
                    {
                      "kind": "LiteralType",
                      "literal": {
                        "kind": "NullKeyword"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "dev"
                },
                "type": {
                  "kind": "NumberKeyword"
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "ino"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "NumberKeyword"
                    },
                    {
                      "kind": "LiteralType",
                      "literal": {
                        "kind": "NullKeyword"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "mode"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "NumberKeyword"
                    },
                    {
                      "kind": "LiteralType",
                      "literal": {
                        "kind": "NullKeyword"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "nlink"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "NumberKeyword"
                    },
                    {
                      "kind": "LiteralType",
                      "literal": {
                        "kind": "NullKeyword"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "uid"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "NumberKeyword"
                    },
                    {
                      "kind": "LiteralType",
                      "literal": {
                        "kind": "NullKeyword"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "gid"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "NumberKeyword"
                    },
                    {
                      "kind": "LiteralType",
                      "literal": {
                        "kind": "NullKeyword"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "rdev"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "NumberKeyword"
                    },
                    {
                      "kind": "LiteralType",
                      "literal": {
                        "kind": "NullKeyword"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "blksize"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "NumberKeyword"
                    },
                    {
                      "kind": "LiteralType",
                      "literal": {
                        "kind": "NullKeyword"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "blocks"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "NumberKeyword"
                    },
                    {
                      "kind": "LiteralType",
                      "literal": {
                        "kind": "NullKeyword"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "isBlockDevice"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "BooleanKeyword"
                    },
                    {
                      "kind": "LiteralType",
                      "literal": {
                        "kind": "NullKeyword"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "isCharDevice"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "BooleanKeyword"
                    },
                    {
                      "kind": "LiteralType",
                      "literal": {
                        "kind": "NullKeyword"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "isFifo"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "BooleanKeyword"
                    },
                    {
                      "kind": "LiteralType",
                      "literal": {
                        "kind": "NullKeyword"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "isSocket"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "BooleanKeyword"
                    },
                    {
                      "kind": "LiteralType",
                      "literal": {
                        "kind": "NullKeyword"
                      }
                    }
                  ]
                }
              }
            ],
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "FileInfo"
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "realPath"
            },
            "parameters": [
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "path"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "StringKeyword"
                    },
                    {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "URL"
                      }
                    }
                  ]
                }
              }
            ],
            "type": {
              "kind": "TypeReference",
              "typeArguments": [
                {
                  "kind": "StringKeyword"
                }
              ],
              "typeName": {
                "kind": "Identifier",
                "text": "Promise"
              }
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "realPathSync"
            },
            "parameters": [
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "path"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "StringKeyword"
                    },
                    {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "URL"
                      }
                    }
                  ]
                }
              }
            ],
            "type": {
              "kind": "StringKeyword"
            }
          },
          {
            "kind": "InterfaceDeclaration",
            "members": [
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "name"
                },
                "type": {
                  "kind": "StringKeyword"
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "isFile"
                },
                "type": {
                  "kind": "BooleanKeyword"
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "isDirectory"
                },
                "type": {
                  "kind": "BooleanKeyword"
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "isSymlink"
                },
                "type": {
                  "kind": "BooleanKeyword"
                }
              }
            ],
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "DirEntry"
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "readDir"
            },
            "parameters": [
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "path"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "StringKeyword"
                    },
                    {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "URL"
                      }
                    }
                  ]
                }
              }
            ],
            "type": {
              "kind": "TypeReference",
              "typeArguments": [
                {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "DirEntry"
                  }
                }
              ],
              "typeName": {
                "kind": "Identifier",
                "text": "AsyncIterable"
              }
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "readDirSync"
            },
            "parameters": [
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "path"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "StringKeyword"
                    },
                    {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "URL"
                      }
                    }
                  ]
                }
              }
            ],
            "type": {
              "kind": "TypeReference",
              "typeArguments": [
                {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "DirEntry"
                  }
                }
              ],
              "typeName": {
                "kind": "Identifier",
                "text": "Iterable"
              }
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "copyFile"
            },
            "parameters": [
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "fromPath"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "StringKeyword"
                    },
                    {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "URL"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "toPath"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "StringKeyword"
                    },
                    {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "URL"
                      }
                    }
                  ]
                }
              }
            ],
            "type": {
              "kind": "TypeReference",
              "typeArguments": [
                {
                  "kind": "VoidKeyword"
                }
              ],
              "typeName": {
                "kind": "Identifier",
                "text": "Promise"
              }
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "copyFileSync"
            },
            "parameters": [
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "fromPath"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "StringKeyword"
                    },
                    {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "URL"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "toPath"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "StringKeyword"
                    },
                    {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "URL"
                      }
                    }
                  ]
                }
              }
            ],
            "type": {
              "kind": "VoidKeyword"
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "readLink"
            },
            "parameters": [
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "path"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "StringKeyword"
                    },
                    {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "URL"
                      }
                    }
                  ]
                }
              }
            ],
            "type": {
              "kind": "TypeReference",
              "typeArguments": [
                {
                  "kind": "StringKeyword"
                }
              ],
              "typeName": {
                "kind": "Identifier",
                "text": "Promise"
              }
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "readLinkSync"
            },
            "parameters": [
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "path"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "StringKeyword"
                    },
                    {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "URL"
                      }
                    }
                  ]
                }
              }
            ],
            "type": {
              "kind": "StringKeyword"
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "lstat"
            },
            "parameters": [
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "path"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "StringKeyword"
                    },
                    {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "URL"
                      }
                    }
                  ]
                }
              }
            ],
            "type": {
              "kind": "TypeReference",
              "typeArguments": [
                {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "FileInfo"
                  }
                }
              ],
              "typeName": {
                "kind": "Identifier",
                "text": "Promise"
              }
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "lstatSync"
            },
            "parameters": [
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "path"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "StringKeyword"
                    },
                    {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "URL"
                      }
                    }
                  ]
                }
              }
            ],
            "type": {
              "kind": "TypeReference",
              "typeName": {
                "kind": "Identifier",
                "text": "FileInfo"
              }
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "stat"
            },
            "parameters": [
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "path"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "StringKeyword"
                    },
                    {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "URL"
                      }
                    }
                  ]
                }
              }
            ],
            "type": {
              "kind": "TypeReference",
              "typeArguments": [
                {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "FileInfo"
                  }
                }
              ],
              "typeName": {
                "kind": "Identifier",
                "text": "Promise"
              }
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "statSync"
            },
            "parameters": [
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "path"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "StringKeyword"
                    },
                    {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "URL"
                      }
                    }
                  ]
                }
              }
            ],
            "type": {
              "kind": "TypeReference",
              "typeName": {
                "kind": "Identifier",
                "text": "FileInfo"
              }
            }
          },
          {
            "kind": "InterfaceDeclaration",
            "members": [
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "append"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "BooleanKeyword"
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "create"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "BooleanKeyword"
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "createNew"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "BooleanKeyword"
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "mode"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "NumberKeyword"
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "signal"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "AbortSignal"
                  }
                }
              }
            ],
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "WriteFileOptions"
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "writeFile"
            },
            "parameters": [
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "path"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "StringKeyword"
                    },
                    {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "URL"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "data"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "Uint8Array"
                      }
                    },
                    {
                      "kind": "TypeReference",
                      "typeArguments": [
                        {
                          "kind": "TypeReference",
                          "typeName": {
                            "kind": "Identifier",
                            "text": "Uint8Array"
                          }
                        }
                      ],
                      "typeName": {
                        "kind": "Identifier",
                        "text": "ReadableStream"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "options"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "WriteFileOptions"
                  }
                }
              }
            ],
            "type": {
              "kind": "TypeReference",
              "typeArguments": [
                {
                  "kind": "VoidKeyword"
                }
              ],
              "typeName": {
                "kind": "Identifier",
                "text": "Promise"
              }
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "writeFileSync"
            },
            "parameters": [
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "path"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "StringKeyword"
                    },
                    {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "URL"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "data"
                },
                "type": {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "Uint8Array"
                  }
                }
              },
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "options"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "WriteFileOptions"
                  }
                }
              }
            ],
            "type": {
              "kind": "VoidKeyword"
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "writeTextFile"
            },
            "parameters": [
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "path"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "StringKeyword"
                    },
                    {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "URL"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "data"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "StringKeyword"
                    },
                    {
                      "kind": "TypeReference",
                      "typeArguments": [
                        {
                          "kind": "StringKeyword"
                        }
                      ],
                      "typeName": {
                        "kind": "Identifier",
                        "text": "ReadableStream"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "options"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "WriteFileOptions"
                  }
                }
              }
            ],
            "type": {
              "kind": "TypeReference",
              "typeArguments": [
                {
                  "kind": "VoidKeyword"
                }
              ],
              "typeName": {
                "kind": "Identifier",
                "text": "Promise"
              }
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "writeTextFileSync"
            },
            "parameters": [
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "path"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "StringKeyword"
                    },
                    {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "URL"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "data"
                },
                "type": {
                  "kind": "StringKeyword"
                }
              },
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "options"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "WriteFileOptions"
                  }
                }
              }
            ],
            "type": {
              "kind": "VoidKeyword"
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "truncate"
            },
            "parameters": [
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "name"
                },
                "type": {
                  "kind": "StringKeyword"
                }
              },
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "len"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "NumberKeyword"
                }
              }
            ],
            "type": {
              "kind": "TypeReference",
              "typeArguments": [
                {
                  "kind": "VoidKeyword"
                }
              ],
              "typeName": {
                "kind": "Identifier",
                "text": "Promise"
              }
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "truncateSync"
            },
            "parameters": [
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "name"
                },
                "type": {
                  "kind": "StringKeyword"
                }
              },
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "len"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "NumberKeyword"
                }
              }
            ],
            "type": {
              "kind": "VoidKeyword"
            }
          },
          {
            "kind": "InterfaceDeclaration",
            "members": [
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "opsDispatched"
                },
                "type": {
                  "kind": "NumberKeyword"
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "opsDispatchedSync"
                },
                "type": {
                  "kind": "NumberKeyword"
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "opsDispatchedAsync"
                },
                "type": {
                  "kind": "NumberKeyword"
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "opsDispatchedAsyncUnref"
                },
                "type": {
                  "kind": "NumberKeyword"
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "opsCompleted"
                },
                "type": {
                  "kind": "NumberKeyword"
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "opsCompletedSync"
                },
                "type": {
                  "kind": "NumberKeyword"
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "opsCompletedAsync"
                },
                "type": {
                  "kind": "NumberKeyword"
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "opsCompletedAsyncUnref"
                },
                "type": {
                  "kind": "NumberKeyword"
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "bytesSentControl"
                },
                "type": {
                  "kind": "NumberKeyword"
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "bytesSentData"
                },
                "type": {
                  "kind": "NumberKeyword"
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "bytesReceived"
                },
                "type": {
                  "kind": "NumberKeyword"
                }
              }
            ],
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "OpMetrics"
            }
          },
          {
            "heritageClauses": [
              {
                "kind": "HeritageClause",
                "token": "ExtendsKeyword",
                "types": [
                  {
                    "expression": {
                      "kind": "Identifier",
                      "text": "OpMetrics"
                    },
                    "kind": "ExpressionWithTypeArguments"
                  }
                ]
              }
            ],
            "kind": "InterfaceDeclaration",
            "members": [
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "ops"
                },
                "type": {
                  "kind": "TypeReference",
                  "typeArguments": [
                    {
                      "kind": "StringKeyword"
                    },
                    {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "OpMetrics"
                      }
                    }
                  ],
                  "typeName": {
                    "kind": "Identifier",
                    "text": "Record"
                  }
                }
              }
            ],
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "Metrics"
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "metrics"
            },
            "parameters": [],
            "type": {
              "kind": "TypeReference",
              "typeName": {
                "kind": "Identifier",
                "text": "Metrics"
              }
            }
          },
          {
            "kind": "InterfaceDeclaration",
            "members": [
              {
                "kind": "IndexSignature",
                "parameters": [
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "rid"
                    },
                    "type": {
                      "kind": "NumberKeyword"
                    }
                  }
                ],
                "type": {
                  "kind": "UnknownKeyword"
                }
              }
            ],
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "ResourceMap"
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "resources"
            },
            "parameters": [],
            "type": {
              "kind": "TypeReference",
              "typeName": {
                "kind": "Identifier",
                "text": "ResourceMap"
              }
            }
          },
          {
            "kind": "TypeAliasDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "FsEventFlag"
            },
            "type": {
              "kind": "LiteralType",
              "literal": {
                "kind": "StringLiteral",
                "text": "rescan"
              }
            }
          },
          {
            "kind": "InterfaceDeclaration",
            "members": [
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "kind"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "LiteralType",
                      "literal": {
                        "kind": "StringLiteral",
                        "text": "any"
                      }
                    },
                    {
                      "kind": "LiteralType",
                      "literal": {
                        "kind": "StringLiteral",
                        "text": "access"
                      }
                    },
                    {
                      "kind": "LiteralType",
                      "literal": {
                        "kind": "StringLiteral",
                        "text": "create"
                      }
                    },
                    {
                      "kind": "LiteralType",
                      "literal": {
                        "kind": "StringLiteral",
                        "text": "modify"
                      }
                    },
                    {
                      "kind": "LiteralType",
                      "literal": {
                        "kind": "StringLiteral",
                        "text": "remove"
                      }
                    },
                    {
                      "kind": "LiteralType",
                      "literal": {
                        "kind": "StringLiteral",
                        "text": "other"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "paths"
                },
                "type": {
                  "elementType": {
                    "kind": "StringKeyword"
                  },
                  "kind": "ArrayType"
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "flag"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "FsEventFlag"
                  }
                }
              }
            ],
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "FsEvent"
            }
          },
          {
            "heritageClauses": [
              {
                "kind": "HeritageClause",
                "token": "ExtendsKeyword",
                "types": [
                  {
                    "expression": {
                      "kind": "Identifier",
                      "text": "AsyncIterable"
                    },
                    "kind": "ExpressionWithTypeArguments",
                    "typeArguments": [
                      {
                        "kind": "TypeReference",
                        "typeName": {
                          "kind": "Identifier",
                          "text": "FsEvent"
                        }
                      }
                    ]
                  },
                  {
                    "expression": {
                      "kind": "Identifier",
                      "text": "Disposable"
                    },
                    "kind": "ExpressionWithTypeArguments"
                  }
                ]
              }
            ],
            "kind": "InterfaceDeclaration",
            "members": [
              {
                "kind": "PropertySignature",
                "modifiers": [
                  {
                    "kind": "ReadonlyKeyword"
                  }
                ],
                "name": {
                  "kind": "Identifier",
                  "text": "rid"
                },
                "type": {
                  "kind": "NumberKeyword"
                }
              },
              {
                "kind": "MethodSignature",
                "name": {
                  "kind": "Identifier",
                  "text": "close"
                },
                "parameters": [],
                "type": {
                  "kind": "VoidKeyword"
                }
              },
              {
                "kind": "MethodSignature",
                "name": {
                  "kind": "Identifier",
                  "text": "return"
                },
                "parameters": [
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "value"
                    },
                    "questionToken": {
                      "kind": "QuestionToken"
                    },
                    "type": {
                      "kind": "AnyKeyword"
                    }
                  }
                ],
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "TypeReference",
                  "typeArguments": [
                    {
                      "kind": "TypeReference",
                      "typeArguments": [
                        {
                          "kind": "TypeReference",
                          "typeName": {
                            "kind": "Identifier",
                            "text": "FsEvent"
                          }
                        }
                      ],
                      "typeName": {
                        "kind": "Identifier",
                        "text": "IteratorResult"
                      }
                    }
                  ],
                  "typeName": {
                    "kind": "Identifier",
                    "text": "Promise"
                  }
                }
              },
              {
                "kind": "MethodSignature",
                "name": {
                  "expression": {
                    "expression": {
                      "kind": "Identifier",
                      "text": "Symbol"
                    },
                    "kind": "PropertyAccessExpression",
                    "name": {
                      "kind": "Identifier",
                      "text": "asyncIterator"
                    }
                  },
                  "kind": "ComputedPropertyName"
                },
                "parameters": [],
                "type": {
                  "kind": "TypeReference",
                  "typeArguments": [
                    {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "FsEvent"
                      }
                    }
                  ],
                  "typeName": {
                    "kind": "Identifier",
                    "text": "AsyncIterableIterator"
                  }
                }
              }
            ],
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "FsWatcher"
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "watchFs"
            },
            "parameters": [
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "paths"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "StringKeyword"
                    },
                    {
                      "elementType": {
                        "kind": "StringKeyword"
                      },
                      "kind": "ArrayType"
                    }
                  ]
                }
              },
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "options"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "TypeLiteral",
                  "members": [
                    {
                      "kind": "PropertySignature",
                      "name": {
                        "kind": "Identifier",
                        "text": "recursive"
                      },
                      "type": {
                        "kind": "BooleanKeyword"
                      }
                    }
                  ]
                }
              }
            ],
            "type": {
              "kind": "TypeReference",
              "typeName": {
                "kind": "Identifier",
                "text": "FsWatcher"
              }
            }
          },
          {
            "kind": "InterfaceDeclaration",
            "members": [
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "cmd"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "TypeOperator",
                      "type": {
                        "elementType": {
                          "kind": "StringKeyword"
                        },
                        "kind": "ArrayType"
                      }
                    },
                    {
                      "elements": [
                        {
                          "kind": "UnionType",
                          "types": [
                            {
                              "kind": "StringKeyword"
                            },
                            {
                              "kind": "TypeReference",
                              "typeName": {
                                "kind": "Identifier",
                                "text": "URL"
                              }
                            }
                          ]
                        },
                        {
                          "kind": "RestType",
                          "type": {
                            "elementType": {
                              "kind": "StringKeyword"
                            },
                            "kind": "ArrayType"
                          }
                        }
                      ],
                      "kind": "TupleType"
                    }
                  ]
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "cwd"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "StringKeyword"
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "env"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "TypeReference",
                  "typeArguments": [
                    {
                      "kind": "StringKeyword"
                    },
                    {
                      "kind": "StringKeyword"
                    }
                  ],
                  "typeName": {
                    "kind": "Identifier",
                    "text": "Record"
                  }
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "stdout"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "LiteralType",
                      "literal": {
                        "kind": "StringLiteral",
                        "text": "inherit"
                      }
                    },
                    {
                      "kind": "LiteralType",
                      "literal": {
                        "kind": "StringLiteral",
                        "text": "piped"
                      }
                    },
                    {
                      "kind": "LiteralType",
                      "literal": {
                        "kind": "StringLiteral",
                        "text": "null"
                      }
                    },
                    {
                      "kind": "NumberKeyword"
                    }
                  ]
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "stderr"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "LiteralType",
                      "literal": {
                        "kind": "StringLiteral",
                        "text": "inherit"
                      }
                    },
                    {
                      "kind": "LiteralType",
                      "literal": {
                        "kind": "StringLiteral",
                        "text": "piped"
                      }
                    },
                    {
                      "kind": "LiteralType",
                      "literal": {
                        "kind": "StringLiteral",
                        "text": "null"
                      }
                    },
                    {
                      "kind": "NumberKeyword"
                    }
                  ]
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "stdin"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "LiteralType",
                      "literal": {
                        "kind": "StringLiteral",
                        "text": "inherit"
                      }
                    },
                    {
                      "kind": "LiteralType",
                      "literal": {
                        "kind": "StringLiteral",
                        "text": "piped"
                      }
                    },
                    {
                      "kind": "LiteralType",
                      "literal": {
                        "kind": "StringLiteral",
                        "text": "null"
                      }
                    },
                    {
                      "kind": "NumberKeyword"
                    }
                  ]
                }
              }
            ],
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "RunOptions"
            }
          },
          {
            "kind": "TypeAliasDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "ProcessStatus"
            },
            "type": {
              "kind": "UnionType",
              "types": [
                {
                  "kind": "TypeLiteral",
                  "members": [
                    {
                      "kind": "PropertySignature",
                      "name": {
                        "kind": "Identifier",
                        "text": "success"
                      },
                      "type": {
                        "kind": "LiteralType",
                        "literal": {
                          "kind": "TrueKeyword"
                        }
                      }
                    },
                    {
                      "kind": "PropertySignature",
                      "name": {
                        "kind": "Identifier",
                        "text": "code"
                      },
                      "type": {
                        "kind": "LiteralType",
                        "literal": {
                          "kind": "FirstLiteralToken",
                          "text": "0"
                        }
                      }
                    },
                    {
                      "kind": "PropertySignature",
                      "name": {
                        "kind": "Identifier",
                        "text": "signal"
                      },
                      "questionToken": {
                        "kind": "QuestionToken"
                      },
                      "type": {
                        "kind": "UndefinedKeyword"
                      }
                    }
                  ]
                },
                {
                  "kind": "TypeLiteral",
                  "members": [
                    {
                      "kind": "PropertySignature",
                      "name": {
                        "kind": "Identifier",
                        "text": "success"
                      },
                      "type": {
                        "kind": "LiteralType",
                        "literal": {
                          "kind": "FalseKeyword"
                        }
                      }
                    },
                    {
                      "kind": "PropertySignature",
                      "name": {
                        "kind": "Identifier",
                        "text": "code"
                      },
                      "type": {
                        "kind": "NumberKeyword"
                      }
                    },
                    {
                      "kind": "PropertySignature",
                      "name": {
                        "kind": "Identifier",
                        "text": "signal"
                      },
                      "questionToken": {
                        "kind": "QuestionToken"
                      },
                      "type": {
                        "kind": "NumberKeyword"
                      }
                    }
                  ]
                }
              ]
            }
          },
          {
            "kind": "ClassDeclaration",
            "members": [
              {
                "kind": "PropertyDeclaration",
                "modifiers": [
                  {
                    "kind": "ReadonlyKeyword"
                  }
                ],
                "name": {
                  "kind": "Identifier",
                  "text": "rid"
                },
                "type": {
                  "kind": "NumberKeyword"
                }
              },
              {
                "kind": "PropertyDeclaration",
                "modifiers": [
                  {
                    "kind": "ReadonlyKeyword"
                  }
                ],
                "name": {
                  "kind": "Identifier",
                  "text": "pid"
                },
                "type": {
                  "kind": "NumberKeyword"
                }
              },
              {
                "kind": "PropertyDeclaration",
                "modifiers": [
                  {
                    "kind": "ReadonlyKeyword"
                  }
                ],
                "name": {
                  "kind": "Identifier",
                  "text": "stdin"
                },
                "type": {
                  "checkType": {
                    "indexType": {
                      "kind": "LiteralType",
                      "literal": {
                        "kind": "StringLiteral",
                        "text": "stdin"
                      }
                    },
                    "kind": "IndexedAccessType",
                    "objectType": {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "T"
                      }
                    }
                  },
                  "extendsType": {
                    "kind": "LiteralType",
                    "literal": {
                      "kind": "StringLiteral",
                      "text": "piped"
                    }
                  },
                  "falseType": {
                    "kind": "UnionType",
                    "types": [
                      {
                        "kind": "ParenthesizedType",
                        "type": {
                          "kind": "IntersectionType",
                          "types": [
                            {
                              "kind": "TypeReference",
                              "typeName": {
                                "kind": "Identifier",
                                "text": "Writer"
                              }
                            },
                            {
                              "kind": "TypeReference",
                              "typeName": {
                                "kind": "Identifier",
                                "text": "Closer"
                              }
                            },
                            {
                              "kind": "TypeLiteral",
                              "members": [
                                {
                                  "kind": "PropertySignature",
                                  "name": {
                                    "kind": "Identifier",
                                    "text": "writable"
                                  },
                                  "type": {
                                    "kind": "TypeReference",
                                    "typeArguments": [
                                      {
                                        "kind": "TypeReference",
                                        "typeName": {
                                          "kind": "Identifier",
                                          "text": "Uint8Array"
                                        }
                                      }
                                    ],
                                    "typeName": {
                                      "kind": "Identifier",
                                      "text": "WritableStream"
                                    }
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      },
                      {
                        "kind": "LiteralType",
                        "literal": {
                          "kind": "NullKeyword"
                        }
                      }
                    ]
                  },
                  "kind": "ConditionalType",
                  "trueType": {
                    "kind": "IntersectionType",
                    "types": [
                      {
                        "kind": "TypeReference",
                        "typeName": {
                          "kind": "Identifier",
                          "text": "Writer"
                        }
                      },
                      {
                        "kind": "TypeReference",
                        "typeName": {
                          "kind": "Identifier",
                          "text": "Closer"
                        }
                      },
                      {
                        "kind": "TypeLiteral",
                        "members": [
                          {
                            "kind": "PropertySignature",
                            "name": {
                              "kind": "Identifier",
                              "text": "writable"
                            },
                            "type": {
                              "kind": "TypeReference",
                              "typeArguments": [
                                {
                                  "kind": "TypeReference",
                                  "typeName": {
                                    "kind": "Identifier",
                                    "text": "Uint8Array"
                                  }
                                }
                              ],
                              "typeName": {
                                "kind": "Identifier",
                                "text": "WritableStream"
                              }
                            }
                          }
                        ]
                      }
                    ]
                  }
                }
              },
              {
                "kind": "PropertyDeclaration",
                "modifiers": [
                  {
                    "kind": "ReadonlyKeyword"
                  }
                ],
                "name": {
                  "kind": "Identifier",
                  "text": "stdout"
                },
                "type": {
                  "checkType": {
                    "indexType": {
                      "kind": "LiteralType",
                      "literal": {
                        "kind": "StringLiteral",
                        "text": "stdout"
                      }
                    },
                    "kind": "IndexedAccessType",
                    "objectType": {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "T"
                      }
                    }
                  },
                  "extendsType": {
                    "kind": "LiteralType",
                    "literal": {
                      "kind": "StringLiteral",
                      "text": "piped"
                    }
                  },
                  "falseType": {
                    "kind": "UnionType",
                    "types": [
                      {
                        "kind": "ParenthesizedType",
                        "type": {
                          "kind": "IntersectionType",
                          "types": [
                            {
                              "kind": "TypeReference",
                              "typeName": {
                                "kind": "Identifier",
                                "text": "Reader"
                              }
                            },
                            {
                              "kind": "TypeReference",
                              "typeName": {
                                "kind": "Identifier",
                                "text": "Closer"
                              }
                            },
                            {
                              "kind": "TypeLiteral",
                              "members": [
                                {
                                  "kind": "PropertySignature",
                                  "name": {
                                    "kind": "Identifier",
                                    "text": "readable"
                                  },
                                  "type": {
                                    "kind": "TypeReference",
                                    "typeArguments": [
                                      {
                                        "kind": "TypeReference",
                                        "typeName": {
                                          "kind": "Identifier",
                                          "text": "Uint8Array"
                                        }
                                      }
                                    ],
                                    "typeName": {
                                      "kind": "Identifier",
                                      "text": "ReadableStream"
                                    }
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      },
                      {
                        "kind": "LiteralType",
                        "literal": {
                          "kind": "NullKeyword"
                        }
                      }
                    ]
                  },
                  "kind": "ConditionalType",
                  "trueType": {
                    "kind": "IntersectionType",
                    "types": [
                      {
                        "kind": "TypeReference",
                        "typeName": {
                          "kind": "Identifier",
                          "text": "Reader"
                        }
                      },
                      {
                        "kind": "TypeReference",
                        "typeName": {
                          "kind": "Identifier",
                          "text": "Closer"
                        }
                      },
                      {
                        "kind": "TypeLiteral",
                        "members": [
                          {
                            "kind": "PropertySignature",
                            "name": {
                              "kind": "Identifier",
                              "text": "readable"
                            },
                            "type": {
                              "kind": "TypeReference",
                              "typeArguments": [
                                {
                                  "kind": "TypeReference",
                                  "typeName": {
                                    "kind": "Identifier",
                                    "text": "Uint8Array"
                                  }
                                }
                              ],
                              "typeName": {
                                "kind": "Identifier",
                                "text": "ReadableStream"
                              }
                            }
                          }
                        ]
                      }
                    ]
                  }
                }
              },
              {
                "kind": "PropertyDeclaration",
                "modifiers": [
                  {
                    "kind": "ReadonlyKeyword"
                  }
                ],
                "name": {
                  "kind": "Identifier",
                  "text": "stderr"
                },
                "type": {
                  "checkType": {
                    "indexType": {
                      "kind": "LiteralType",
                      "literal": {
                        "kind": "StringLiteral",
                        "text": "stderr"
                      }
                    },
                    "kind": "IndexedAccessType",
                    "objectType": {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "T"
                      }
                    }
                  },
                  "extendsType": {
                    "kind": "LiteralType",
                    "literal": {
                      "kind": "StringLiteral",
                      "text": "piped"
                    }
                  },
                  "falseType": {
                    "kind": "UnionType",
                    "types": [
                      {
                        "kind": "ParenthesizedType",
                        "type": {
                          "kind": "IntersectionType",
                          "types": [
                            {
                              "kind": "TypeReference",
                              "typeName": {
                                "kind": "Identifier",
                                "text": "Reader"
                              }
                            },
                            {
                              "kind": "TypeReference",
                              "typeName": {
                                "kind": "Identifier",
                                "text": "Closer"
                              }
                            },
                            {
                              "kind": "TypeLiteral",
                              "members": [
                                {
                                  "kind": "PropertySignature",
                                  "name": {
                                    "kind": "Identifier",
                                    "text": "readable"
                                  },
                                  "type": {
                                    "kind": "TypeReference",
                                    "typeArguments": [
                                      {
                                        "kind": "TypeReference",
                                        "typeName": {
                                          "kind": "Identifier",
                                          "text": "Uint8Array"
                                        }
                                      }
                                    ],
                                    "typeName": {
                                      "kind": "Identifier",
                                      "text": "ReadableStream"
                                    }
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      },
                      {
                        "kind": "LiteralType",
                        "literal": {
                          "kind": "NullKeyword"
                        }
                      }
                    ]
                  },
                  "kind": "ConditionalType",
                  "trueType": {
                    "kind": "IntersectionType",
                    "types": [
                      {
                        "kind": "TypeReference",
                        "typeName": {
                          "kind": "Identifier",
                          "text": "Reader"
                        }
                      },
                      {
                        "kind": "TypeReference",
                        "typeName": {
                          "kind": "Identifier",
                          "text": "Closer"
                        }
                      },
                      {
                        "kind": "TypeLiteral",
                        "members": [
                          {
                            "kind": "PropertySignature",
                            "name": {
                              "kind": "Identifier",
                              "text": "readable"
                            },
                            "type": {
                              "kind": "TypeReference",
                              "typeArguments": [
                                {
                                  "kind": "TypeReference",
                                  "typeName": {
                                    "kind": "Identifier",
                                    "text": "Uint8Array"
                                  }
                                }
                              ],
                              "typeName": {
                                "kind": "Identifier",
                                "text": "ReadableStream"
                              }
                            }
                          }
                        ]
                      }
                    ]
                  }
                }
              },
              {
                "kind": "MethodDeclaration",
                "name": {
                  "kind": "Identifier",
                  "text": "status"
                },
                "parameters": [],
                "type": {
                  "kind": "TypeReference",
                  "typeArguments": [
                    {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "ProcessStatus"
                      }
                    }
                  ],
                  "typeName": {
                    "kind": "Identifier",
                    "text": "Promise"
                  }
                }
              },
              {
                "kind": "MethodDeclaration",
                "name": {
                  "kind": "Identifier",
                  "text": "output"
                },
                "parameters": [],
                "type": {
                  "kind": "TypeReference",
                  "typeArguments": [
                    {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "Uint8Array"
                      }
                    }
                  ],
                  "typeName": {
                    "kind": "Identifier",
                    "text": "Promise"
                  }
                }
              },
              {
                "kind": "MethodDeclaration",
                "name": {
                  "kind": "Identifier",
                  "text": "stderrOutput"
                },
                "parameters": [],
                "type": {
                  "kind": "TypeReference",
                  "typeArguments": [
                    {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "Uint8Array"
                      }
                    }
                  ],
                  "typeName": {
                    "kind": "Identifier",
                    "text": "Promise"
                  }
                }
              },
              {
                "kind": "MethodDeclaration",
                "name": {
                  "kind": "Identifier",
                  "text": "close"
                },
                "parameters": [],
                "type": {
                  "kind": "VoidKeyword"
                }
              },
              {
                "kind": "MethodDeclaration",
                "name": {
                  "kind": "Identifier",
                  "text": "kill"
                },
                "parameters": [
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "signo"
                    },
                    "questionToken": {
                      "kind": "QuestionToken"
                    },
                    "type": {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "Signal"
                      }
                    }
                  }
                ],
                "type": {
                  "kind": "VoidKeyword"
                }
              }
            ],
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "Process"
            }
          },
          {
            "kind": "TypeAliasDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "Signal"
            },
            "type": {
              "kind": "UnionType",
              "types": [
                {
                  "kind": "LiteralType",
                  "literal": {
                    "kind": "StringLiteral",
                    "text": "SIGABRT"
                  }
                },
                {
                  "kind": "LiteralType",
                  "literal": {
                    "kind": "StringLiteral",
                    "text": "SIGALRM"
                  }
                },
                {
                  "kind": "LiteralType",
                  "literal": {
                    "kind": "StringLiteral",
                    "text": "SIGBREAK"
                  }
                },
                {
                  "kind": "LiteralType",
                  "literal": {
                    "kind": "StringLiteral",
                    "text": "SIGBUS"
                  }
                },
                {
                  "kind": "LiteralType",
                  "literal": {
                    "kind": "StringLiteral",
                    "text": "SIGCHLD"
                  }
                },
                {
                  "kind": "LiteralType",
                  "literal": {
                    "kind": "StringLiteral",
                    "text": "SIGCONT"
                  }
                },
                {
                  "kind": "LiteralType",
                  "literal": {
                    "kind": "StringLiteral",
                    "text": "SIGEMT"
                  }
                },
                {
                  "kind": "LiteralType",
                  "literal": {
                    "kind": "StringLiteral",
                    "text": "SIGFPE"
                  }
                },
                {
                  "kind": "LiteralType",
                  "literal": {
                    "kind": "StringLiteral",
                    "text": "SIGHUP"
                  }
                },
                {
                  "kind": "LiteralType",
                  "literal": {
                    "kind": "StringLiteral",
                    "text": "SIGILL"
                  }
                },
                {
                  "kind": "LiteralType",
                  "literal": {
                    "kind": "StringLiteral",
                    "text": "SIGINFO"
                  }
                },
                {
                  "kind": "LiteralType",
                  "literal": {
                    "kind": "StringLiteral",
                    "text": "SIGINT"
                  }
                },
                {
                  "kind": "LiteralType",
                  "literal": {
                    "kind": "StringLiteral",
                    "text": "SIGIO"
                  }
                },
                {
                  "kind": "LiteralType",
                  "literal": {
                    "kind": "StringLiteral",
                    "text": "SIGPOLL"
                  }
                },
                {
                  "kind": "LiteralType",
                  "literal": {
                    "kind": "StringLiteral",
                    "text": "SIGUNUSED"
                  }
                },
                {
                  "kind": "LiteralType",
                  "literal": {
                    "kind": "StringLiteral",
                    "text": "SIGKILL"
                  }
                },
                {
                  "kind": "LiteralType",
                  "literal": {
                    "kind": "StringLiteral",
                    "text": "SIGPIPE"
                  }
                },
                {
                  "kind": "LiteralType",
                  "literal": {
                    "kind": "StringLiteral",
                    "text": "SIGPROF"
                  }
                },
                {
                  "kind": "LiteralType",
                  "literal": {
                    "kind": "StringLiteral",
                    "text": "SIGPWR"
                  }
                },
                {
                  "kind": "LiteralType",
                  "literal": {
                    "kind": "StringLiteral",
                    "text": "SIGQUIT"
                  }
                },
                {
                  "kind": "LiteralType",
                  "literal": {
                    "kind": "StringLiteral",
                    "text": "SIGSEGV"
                  }
                },
                {
                  "kind": "LiteralType",
                  "literal": {
                    "kind": "StringLiteral",
                    "text": "SIGSTKFLT"
                  }
                },
                {
                  "kind": "LiteralType",
                  "literal": {
                    "kind": "StringLiteral",
                    "text": "SIGSTOP"
                  }
                },
                {
                  "kind": "LiteralType",
                  "literal": {
                    "kind": "StringLiteral",
                    "text": "SIGSYS"
                  }
                },
                {
                  "kind": "LiteralType",
                  "literal": {
                    "kind": "StringLiteral",
                    "text": "SIGTERM"
                  }
                },
                {
                  "kind": "LiteralType",
                  "literal": {
                    "kind": "StringLiteral",
                    "text": "SIGTRAP"
                  }
                },
                {
                  "kind": "LiteralType",
                  "literal": {
                    "kind": "StringLiteral",
                    "text": "SIGTSTP"
                  }
                },
                {
                  "kind": "LiteralType",
                  "literal": {
                    "kind": "StringLiteral",
                    "text": "SIGTTIN"
                  }
                },
                {
                  "kind": "LiteralType",
                  "literal": {
                    "kind": "StringLiteral",
                    "text": "SIGTTOU"
                  }
                },
                {
                  "kind": "LiteralType",
                  "literal": {
                    "kind": "StringLiteral",
                    "text": "SIGURG"
                  }
                },
                {
                  "kind": "LiteralType",
                  "literal": {
                    "kind": "StringLiteral",
                    "text": "SIGUSR1"
                  }
                },
                {
                  "kind": "LiteralType",
                  "literal": {
                    "kind": "StringLiteral",
                    "text": "SIGUSR2"
                  }
                },
                {
                  "kind": "LiteralType",
                  "literal": {
                    "kind": "StringLiteral",
                    "text": "SIGVTALRM"
                  }
                },
                {
                  "kind": "LiteralType",
                  "literal": {
                    "kind": "StringLiteral",
                    "text": "SIGWINCH"
                  }
                },
                {
                  "kind": "LiteralType",
                  "literal": {
                    "kind": "StringLiteral",
                    "text": "SIGXCPU"
                  }
                },
                {
                  "kind": "LiteralType",
                  "literal": {
                    "kind": "StringLiteral",
                    "text": "SIGXFSZ"
                  }
                }
              ]
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "addSignalListener"
            },
            "parameters": [
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "signal"
                },
                "type": {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "Signal"
                  }
                }
              },
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "handler"
                },
                "type": {
                  "kind": "FunctionType",
                  "parameters": [],
                  "type": {
                    "kind": "VoidKeyword"
                  }
                }
              }
            ],
            "type": {
              "kind": "VoidKeyword"
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "removeSignalListener"
            },
            "parameters": [
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "signal"
                },
                "type": {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "Signal"
                  }
                }
              },
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "handler"
                },
                "type": {
                  "kind": "FunctionType",
                  "parameters": [],
                  "type": {
                    "kind": "VoidKeyword"
                  }
                }
              }
            ],
            "type": {
              "kind": "VoidKeyword"
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "run"
            },
            "parameters": [
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "opt"
                },
                "type": {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "T"
                  }
                }
              }
            ],
            "type": {
              "kind": "TypeReference",
              "typeArguments": [
                {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "T"
                  }
                }
              ],
              "typeName": {
                "kind": "Identifier",
                "text": "Process"
              }
            }
          },
          {
            "kind": "ClassDeclaration",
            "members": [
              {
                "kind": "Constructor",
                "parameters": [
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "command"
                    },
                    "type": {
                      "kind": "UnionType",
                      "types": [
                        {
                          "kind": "StringKeyword"
                        },
                        {
                          "kind": "TypeReference",
                          "typeName": {
                            "kind": "Identifier",
                            "text": "URL"
                          }
                        }
                      ]
                    }
                  },
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "options"
                    },
                    "questionToken": {
                      "kind": "QuestionToken"
                    },
                    "type": {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "CommandOptions"
                      }
                    }
                  }
                ]
              },
              {
                "kind": "MethodDeclaration",
                "name": {
                  "kind": "Identifier",
                  "text": "output"
                },
                "parameters": [],
                "type": {
                  "kind": "TypeReference",
                  "typeArguments": [
                    {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "CommandOutput"
                      }
                    }
                  ],
                  "typeName": {
                    "kind": "Identifier",
                    "text": "Promise"
                  }
                }
              },
              {
                "kind": "MethodDeclaration",
                "name": {
                  "kind": "Identifier",
                  "text": "outputSync"
                },
                "parameters": [],
                "type": {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "CommandOutput"
                  }
                }
              },
              {
                "kind": "MethodDeclaration",
                "name": {
                  "kind": "Identifier",
                  "text": "spawn"
                },
                "parameters": [],
                "type": {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "ChildProcess"
                  }
                }
              }
            ],
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "Command"
            }
          },
          {
            "heritageClauses": [
              {
                "kind": "HeritageClause",
                "token": "FirstFutureReservedWord",
                "types": [
                  {
                    "expression": {
                      "kind": "Identifier",
                      "text": "AsyncDisposable"
                    },
                    "kind": "ExpressionWithTypeArguments"
                  }
                ]
              }
            ],
            "kind": "ClassDeclaration",
            "members": [
              {
                "kind": "GetAccessor",
                "name": {
                  "kind": "Identifier",
                  "text": "stdin"
                },
                "parameters": [],
                "type": {
                  "kind": "TypeReference",
                  "typeArguments": [
                    {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "Uint8Array"
                      }
                    }
                  ],
                  "typeName": {
                    "kind": "Identifier",
                    "text": "WritableStream"
                  }
                }
              },
              {
                "kind": "GetAccessor",
                "name": {
                  "kind": "Identifier",
                  "text": "stdout"
                },
                "parameters": [],
                "type": {
                  "kind": "TypeReference",
                  "typeArguments": [
                    {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "Uint8Array"
                      }
                    }
                  ],
                  "typeName": {
                    "kind": "Identifier",
                    "text": "ReadableStream"
                  }
                }
              },
              {
                "kind": "GetAccessor",
                "name": {
                  "kind": "Identifier",
                  "text": "stderr"
                },
                "parameters": [],
                "type": {
                  "kind": "TypeReference",
                  "typeArguments": [
                    {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "Uint8Array"
                      }
                    }
                  ],
                  "typeName": {
                    "kind": "Identifier",
                    "text": "ReadableStream"
                  }
                }
              },
              {
                "kind": "PropertyDeclaration",
                "modifiers": [
                  {
                    "kind": "ReadonlyKeyword"
                  }
                ],
                "name": {
                  "kind": "Identifier",
                  "text": "pid"
                },
                "type": {
                  "kind": "NumberKeyword"
                }
              },
              {
                "kind": "PropertyDeclaration",
                "modifiers": [
                  {
                    "kind": "ReadonlyKeyword"
                  }
                ],
                "name": {
                  "kind": "Identifier",
                  "text": "status"
                },
                "type": {
                  "kind": "TypeReference",
                  "typeArguments": [
                    {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "CommandStatus"
                      }
                    }
                  ],
                  "typeName": {
                    "kind": "Identifier",
                    "text": "Promise"
                  }
                }
              },
              {
                "kind": "MethodDeclaration",
                "name": {
                  "kind": "Identifier",
                  "text": "output"
                },
                "parameters": [],
                "type": {
                  "kind": "TypeReference",
                  "typeArguments": [
                    {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "CommandOutput"
                      }
                    }
                  ],
                  "typeName": {
                    "kind": "Identifier",
                    "text": "Promise"
                  }
                }
              },
              {
                "kind": "MethodDeclaration",
                "name": {
                  "kind": "Identifier",
                  "text": "kill"
                },
                "parameters": [
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "signo"
                    },
                    "questionToken": {
                      "kind": "QuestionToken"
                    },
                    "type": {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "Signal"
                      }
                    }
                  }
                ],
                "type": {
                  "kind": "VoidKeyword"
                }
              },
              {
                "kind": "MethodDeclaration",
                "name": {
                  "kind": "Identifier",
                  "text": "ref"
                },
                "parameters": [],
                "type": {
                  "kind": "VoidKeyword"
                }
              },
              {
                "kind": "MethodDeclaration",
                "name": {
                  "kind": "Identifier",
                  "text": "unref"
                },
                "parameters": [],
                "type": {
                  "kind": "VoidKeyword"
                }
              },
              {
                "kind": "MethodDeclaration",
                "name": {
                  "expression": {
                    "expression": {
                      "kind": "Identifier",
                      "text": "Symbol"
                    },
                    "kind": "PropertyAccessExpression",
                    "name": {
                      "kind": "Identifier",
                      "text": "asyncDispose"
                    }
                  },
                  "kind": "ComputedPropertyName"
                },
                "parameters": [],
                "type": {
                  "kind": "TypeReference",
                  "typeArguments": [
                    {
                      "kind": "VoidKeyword"
                    }
                  ],
                  "typeName": {
                    "kind": "Identifier",
                    "text": "Promise"
                  }
                }
              }
            ],
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "ChildProcess"
            }
          },
          {
            "kind": "InterfaceDeclaration",
            "members": [
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "args"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "elementType": {
                    "kind": "StringKeyword"
                  },
                  "kind": "ArrayType"
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "cwd"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "StringKeyword"
                    },
                    {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "URL"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "clearEnv"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "BooleanKeyword"
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "env"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "TypeReference",
                  "typeArguments": [
                    {
                      "kind": "StringKeyword"
                    },
                    {
                      "kind": "StringKeyword"
                    }
                  ],
                  "typeName": {
                    "kind": "Identifier",
                    "text": "Record"
                  }
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "uid"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "NumberKeyword"
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "gid"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "NumberKeyword"
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "signal"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "AbortSignal"
                  }
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "stdin"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "LiteralType",
                      "literal": {
                        "kind": "StringLiteral",
                        "text": "piped"
                      }
                    },
                    {
                      "kind": "LiteralType",
                      "literal": {
                        "kind": "StringLiteral",
                        "text": "inherit"
                      }
                    },
                    {
                      "kind": "LiteralType",
                      "literal": {
                        "kind": "StringLiteral",
                        "text": "null"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "stdout"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "LiteralType",
                      "literal": {
                        "kind": "StringLiteral",
                        "text": "piped"
                      }
                    },
                    {
                      "kind": "LiteralType",
                      "literal": {
                        "kind": "StringLiteral",
                        "text": "inherit"
                      }
                    },
                    {
                      "kind": "LiteralType",
                      "literal": {
                        "kind": "StringLiteral",
                        "text": "null"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "stderr"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "LiteralType",
                      "literal": {
                        "kind": "StringLiteral",
                        "text": "piped"
                      }
                    },
                    {
                      "kind": "LiteralType",
                      "literal": {
                        "kind": "StringLiteral",
                        "text": "inherit"
                      }
                    },
                    {
                      "kind": "LiteralType",
                      "literal": {
                        "kind": "StringLiteral",
                        "text": "null"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "windowsRawArguments"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "BooleanKeyword"
                }
              }
            ],
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "CommandOptions"
            }
          },
          {
            "kind": "InterfaceDeclaration",
            "members": [
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "success"
                },
                "type": {
                  "kind": "BooleanKeyword"
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "code"
                },
                "type": {
                  "kind": "NumberKeyword"
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "signal"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "Signal"
                      }
                    },
                    {
                      "kind": "LiteralType",
                      "literal": {
                        "kind": "NullKeyword"
                      }
                    }
                  ]
                }
              }
            ],
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "CommandStatus"
            }
          },
          {
            "heritageClauses": [
              {
                "kind": "HeritageClause",
                "token": "ExtendsKeyword",
                "types": [
                  {
                    "expression": {
                      "kind": "Identifier",
                      "text": "CommandStatus"
                    },
                    "kind": "ExpressionWithTypeArguments"
                  }
                ]
              }
            ],
            "kind": "InterfaceDeclaration",
            "members": [
              {
                "kind": "PropertySignature",
                "modifiers": [
                  {
                    "kind": "ReadonlyKeyword"
                  }
                ],
                "name": {
                  "kind": "Identifier",
                  "text": "stdout"
                },
                "type": {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "Uint8Array"
                  }
                }
              },
              {
                "kind": "PropertySignature",
                "modifiers": [
                  {
                    "kind": "ReadonlyKeyword"
                  }
                ],
                "name": {
                  "kind": "Identifier",
                  "text": "stderr"
                },
                "type": {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "Uint8Array"
                  }
                }
              }
            ],
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "CommandOutput"
            }
          },
          {
            "kind": "InterfaceDeclaration",
            "members": [
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "colors"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "BooleanKeyword"
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "compact"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "BooleanKeyword"
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "depth"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "NumberKeyword"
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "breakLength"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "NumberKeyword"
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "escapeSequences"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "BooleanKeyword"
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "iterableLimit"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "NumberKeyword"
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "showProxy"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "BooleanKeyword"
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "sorted"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "BooleanKeyword"
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "trailingComma"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "BooleanKeyword"
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "getters"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "BooleanKeyword"
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "showHidden"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "BooleanKeyword"
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "strAbbreviateSize"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "NumberKeyword"
                }
              }
            ],
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "InspectOptions"
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "inspect"
            },
            "parameters": [
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "value"
                },
                "type": {
                  "kind": "UnknownKeyword"
                }
              },
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "options"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "InspectOptions"
                  }
                }
              }
            ],
            "type": {
              "kind": "StringKeyword"
            }
          },
          {
            "kind": "TypeAliasDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "PermissionName"
            },
            "type": {
              "kind": "UnionType",
              "types": [
                {
                  "kind": "LiteralType",
                  "literal": {
                    "kind": "StringLiteral",
                    "text": "run"
                  }
                },
                {
                  "kind": "LiteralType",
                  "literal": {
                    "kind": "StringLiteral",
                    "text": "read"
                  }
                },
                {
                  "kind": "LiteralType",
                  "literal": {
                    "kind": "StringLiteral",
                    "text": "write"
                  }
                },
                {
                  "kind": "LiteralType",
                  "literal": {
                    "kind": "StringLiteral",
                    "text": "net"
                  }
                },
                {
                  "kind": "LiteralType",
                  "literal": {
                    "kind": "StringLiteral",
                    "text": "env"
                  }
                },
                {
                  "kind": "LiteralType",
                  "literal": {
                    "kind": "StringLiteral",
                    "text": "sys"
                  }
                },
                {
                  "kind": "LiteralType",
                  "literal": {
                    "kind": "StringLiteral",
                    "text": "ffi"
                  }
                },
                {
                  "kind": "LiteralType",
                  "literal": {
                    "kind": "StringLiteral",
                    "text": "hrtime"
                  }
                }
              ]
            }
          },
          {
            "kind": "TypeAliasDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "PermissionState"
            },
            "type": {
              "kind": "UnionType",
              "types": [
                {
                  "kind": "LiteralType",
                  "literal": {
                    "kind": "StringLiteral",
                    "text": "granted"
                  }
                },
                {
                  "kind": "LiteralType",
                  "literal": {
                    "kind": "StringLiteral",
                    "text": "denied"
                  }
                },
                {
                  "kind": "LiteralType",
                  "literal": {
                    "kind": "StringLiteral",
                    "text": "prompt"
                  }
                }
              ]
            }
          },
          {
            "kind": "InterfaceDeclaration",
            "members": [
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "name"
                },
                "type": {
                  "kind": "LiteralType",
                  "literal": {
                    "kind": "StringLiteral",
                    "text": "run"
                  }
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "command"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "StringKeyword"
                    },
                    {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "URL"
                      }
                    }
                  ]
                }
              }
            ],
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "RunPermissionDescriptor"
            }
          },
          {
            "kind": "InterfaceDeclaration",
            "members": [
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "name"
                },
                "type": {
                  "kind": "LiteralType",
                  "literal": {
                    "kind": "StringLiteral",
                    "text": "read"
                  }
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "path"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "StringKeyword"
                    },
                    {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "URL"
                      }
                    }
                  ]
                }
              }
            ],
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "ReadPermissionDescriptor"
            }
          },
          {
            "kind": "InterfaceDeclaration",
            "members": [
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "name"
                },
                "type": {
                  "kind": "LiteralType",
                  "literal": {
                    "kind": "StringLiteral",
                    "text": "write"
                  }
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "path"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "StringKeyword"
                    },
                    {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "URL"
                      }
                    }
                  ]
                }
              }
            ],
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "WritePermissionDescriptor"
            }
          },
          {
            "kind": "InterfaceDeclaration",
            "members": [
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "name"
                },
                "type": {
                  "kind": "LiteralType",
                  "literal": {
                    "kind": "StringLiteral",
                    "text": "net"
                  }
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "host"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "StringKeyword"
                }
              }
            ],
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "NetPermissionDescriptor"
            }
          },
          {
            "kind": "InterfaceDeclaration",
            "members": [
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "name"
                },
                "type": {
                  "kind": "LiteralType",
                  "literal": {
                    "kind": "StringLiteral",
                    "text": "env"
                  }
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "variable"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "StringKeyword"
                }
              }
            ],
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "EnvPermissionDescriptor"
            }
          },
          {
            "kind": "InterfaceDeclaration",
            "members": [
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "name"
                },
                "type": {
                  "kind": "LiteralType",
                  "literal": {
                    "kind": "StringLiteral",
                    "text": "sys"
                  }
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "kind"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "LiteralType",
                      "literal": {
                        "kind": "StringLiteral",
                        "text": "loadavg"
                      }
                    },
                    {
                      "kind": "LiteralType",
                      "literal": {
                        "kind": "StringLiteral",
                        "text": "hostname"
                      }
                    },
                    {
                      "kind": "LiteralType",
                      "literal": {
                        "kind": "StringLiteral",
                        "text": "systemMemoryInfo"
                      }
                    },
                    {
                      "kind": "LiteralType",
                      "literal": {
                        "kind": "StringLiteral",
                        "text": "networkInterfaces"
                      }
                    },
                    {
                      "kind": "LiteralType",
                      "literal": {
                        "kind": "StringLiteral",
                        "text": "osRelease"
                      }
                    },
                    {
                      "kind": "LiteralType",
                      "literal": {
                        "kind": "StringLiteral",
                        "text": "osUptime"
                      }
                    },
                    {
                      "kind": "LiteralType",
                      "literal": {
                        "kind": "StringLiteral",
                        "text": "uid"
                      }
                    },
                    {
                      "kind": "LiteralType",
                      "literal": {
                        "kind": "StringLiteral",
                        "text": "gid"
                      }
                    },
                    {
                      "kind": "LiteralType",
                      "literal": {
                        "kind": "StringLiteral",
                        "text": "username"
                      }
                    },
                    {
                      "kind": "LiteralType",
                      "literal": {
                        "kind": "StringLiteral",
                        "text": "cpus"
                      }
                    },
                    {
                      "kind": "LiteralType",
                      "literal": {
                        "kind": "StringLiteral",
                        "text": "homedir"
                      }
                    },
                    {
                      "kind": "LiteralType",
                      "literal": {
                        "kind": "StringLiteral",
                        "text": "statfs"
                      }
                    },
                    {
                      "kind": "LiteralType",
                      "literal": {
                        "kind": "StringLiteral",
                        "text": "getPriority"
                      }
                    },
                    {
                      "kind": "LiteralType",
                      "literal": {
                        "kind": "StringLiteral",
                        "text": "setPriority"
                      }
                    }
                  ]
                }
              }
            ],
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "SysPermissionDescriptor"
            }
          },
          {
            "kind": "InterfaceDeclaration",
            "members": [
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "name"
                },
                "type": {
                  "kind": "LiteralType",
                  "literal": {
                    "kind": "StringLiteral",
                    "text": "ffi"
                  }
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "path"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "StringKeyword"
                    },
                    {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "URL"
                      }
                    }
                  ]
                }
              }
            ],
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "FfiPermissionDescriptor"
            }
          },
          {
            "kind": "InterfaceDeclaration",
            "members": [
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "name"
                },
                "type": {
                  "kind": "LiteralType",
                  "literal": {
                    "kind": "StringLiteral",
                    "text": "hrtime"
                  }
                }
              }
            ],
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "HrtimePermissionDescriptor"
            }
          },
          {
            "kind": "TypeAliasDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "PermissionDescriptor"
            },
            "type": {
              "kind": "UnionType",
              "types": [
                {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "RunPermissionDescriptor"
                  }
                },
                {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "ReadPermissionDescriptor"
                  }
                },
                {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "WritePermissionDescriptor"
                  }
                },
                {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "NetPermissionDescriptor"
                  }
                },
                {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "EnvPermissionDescriptor"
                  }
                },
                {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "SysPermissionDescriptor"
                  }
                },
                {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "FfiPermissionDescriptor"
                  }
                },
                {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "HrtimePermissionDescriptor"
                  }
                }
              ]
            }
          },
          {
            "kind": "InterfaceDeclaration",
            "members": [
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "StringLiteral",
                  "text": "change"
                },
                "type": {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "Event"
                  }
                }
              }
            ],
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "PermissionStatusEventMap"
            }
          },
          {
            "heritageClauses": [
              {
                "kind": "HeritageClause",
                "token": "ExtendsKeyword",
                "types": [
                  {
                    "expression": {
                      "kind": "Identifier",
                      "text": "EventTarget"
                    },
                    "kind": "ExpressionWithTypeArguments"
                  }
                ]
              }
            ],
            "kind": "ClassDeclaration",
            "members": [
              {
                "kind": "PropertyDeclaration",
                "name": {
                  "kind": "Identifier",
                  "text": "onchange"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "ParenthesizedType",
                      "type": {
                        "kind": "FunctionType",
                        "parameters": [
                          {
                            "kind": "Parameter",
                            "name": {
                              "kind": "Identifier",
                              "text": "this"
                            },
                            "type": {
                              "kind": "TypeReference",
                              "typeName": {
                                "kind": "Identifier",
                                "text": "PermissionStatus"
                              }
                            }
                          },
                          {
                            "kind": "Parameter",
                            "name": {
                              "kind": "Identifier",
                              "text": "ev"
                            },
                            "type": {
                              "kind": "TypeReference",
                              "typeName": {
                                "kind": "Identifier",
                                "text": "Event"
                              }
                            }
                          }
                        ],
                        "type": {
                          "kind": "AnyKeyword"
                        }
                      }
                    },
                    {
                      "kind": "LiteralType",
                      "literal": {
                        "kind": "NullKeyword"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "PropertyDeclaration",
                "modifiers": [
                  {
                    "kind": "ReadonlyKeyword"
                  }
                ],
                "name": {
                  "kind": "Identifier",
                  "text": "state"
                },
                "type": {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "PermissionState"
                  }
                }
              },
              {
                "kind": "PropertyDeclaration",
                "modifiers": [
                  {
                    "kind": "ReadonlyKeyword"
                  }
                ],
                "name": {
                  "kind": "Identifier",
                  "text": "partial"
                },
                "type": {
                  "kind": "BooleanKeyword"
                }
              },
              {
                "kind": "MethodDeclaration",
                "name": {
                  "kind": "Identifier",
                  "text": "addEventListener"
                },
                "parameters": [
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "type"
                    },
                    "type": {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "K"
                      }
                    }
                  },
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "listener"
                    },
                    "type": {
                      "kind": "FunctionType",
                      "parameters": [
                        {
                          "kind": "Parameter",
                          "name": {
                            "kind": "Identifier",
                            "text": "this"
                          },
                          "type": {
                            "kind": "TypeReference",
                            "typeName": {
                              "kind": "Identifier",
                              "text": "PermissionStatus"
                            }
                          }
                        },
                        {
                          "kind": "Parameter",
                          "name": {
                            "kind": "Identifier",
                            "text": "ev"
                          },
                          "type": {
                            "indexType": {
                              "kind": "TypeReference",
                              "typeName": {
                                "kind": "Identifier",
                                "text": "K"
                              }
                            },
                            "kind": "IndexedAccessType",
                            "objectType": {
                              "kind": "TypeReference",
                              "typeName": {
                                "kind": "Identifier",
                                "text": "PermissionStatusEventMap"
                              }
                            }
                          }
                        }
                      ],
                      "type": {
                        "kind": "AnyKeyword"
                      }
                    }
                  },
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "options"
                    },
                    "questionToken": {
                      "kind": "QuestionToken"
                    },
                    "type": {
                      "kind": "UnionType",
                      "types": [
                        {
                          "kind": "BooleanKeyword"
                        },
                        {
                          "kind": "TypeReference",
                          "typeName": {
                            "kind": "Identifier",
                            "text": "AddEventListenerOptions"
                          }
                        }
                      ]
                    }
                  }
                ],
                "type": {
                  "kind": "VoidKeyword"
                }
              },
              {
                "kind": "MethodDeclaration",
                "name": {
                  "kind": "Identifier",
                  "text": "addEventListener"
                },
                "parameters": [
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "type"
                    },
                    "type": {
                      "kind": "StringKeyword"
                    }
                  },
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "listener"
                    },
                    "type": {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "EventListenerOrEventListenerObject"
                      }
                    }
                  },
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "options"
                    },
                    "questionToken": {
                      "kind": "QuestionToken"
                    },
                    "type": {
                      "kind": "UnionType",
                      "types": [
                        {
                          "kind": "BooleanKeyword"
                        },
                        {
                          "kind": "TypeReference",
                          "typeName": {
                            "kind": "Identifier",
                            "text": "AddEventListenerOptions"
                          }
                        }
                      ]
                    }
                  }
                ],
                "type": {
                  "kind": "VoidKeyword"
                }
              },
              {
                "kind": "MethodDeclaration",
                "name": {
                  "kind": "Identifier",
                  "text": "removeEventListener"
                },
                "parameters": [
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "type"
                    },
                    "type": {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "K"
                      }
                    }
                  },
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "listener"
                    },
                    "type": {
                      "kind": "FunctionType",
                      "parameters": [
                        {
                          "kind": "Parameter",
                          "name": {
                            "kind": "Identifier",
                            "text": "this"
                          },
                          "type": {
                            "kind": "TypeReference",
                            "typeName": {
                              "kind": "Identifier",
                              "text": "PermissionStatus"
                            }
                          }
                        },
                        {
                          "kind": "Parameter",
                          "name": {
                            "kind": "Identifier",
                            "text": "ev"
                          },
                          "type": {
                            "indexType": {
                              "kind": "TypeReference",
                              "typeName": {
                                "kind": "Identifier",
                                "text": "K"
                              }
                            },
                            "kind": "IndexedAccessType",
                            "objectType": {
                              "kind": "TypeReference",
                              "typeName": {
                                "kind": "Identifier",
                                "text": "PermissionStatusEventMap"
                              }
                            }
                          }
                        }
                      ],
                      "type": {
                        "kind": "AnyKeyword"
                      }
                    }
                  },
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "options"
                    },
                    "questionToken": {
                      "kind": "QuestionToken"
                    },
                    "type": {
                      "kind": "UnionType",
                      "types": [
                        {
                          "kind": "BooleanKeyword"
                        },
                        {
                          "kind": "TypeReference",
                          "typeName": {
                            "kind": "Identifier",
                            "text": "EventListenerOptions"
                          }
                        }
                      ]
                    }
                  }
                ],
                "type": {
                  "kind": "VoidKeyword"
                }
              },
              {
                "kind": "MethodDeclaration",
                "name": {
                  "kind": "Identifier",
                  "text": "removeEventListener"
                },
                "parameters": [
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "type"
                    },
                    "type": {
                      "kind": "StringKeyword"
                    }
                  },
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "listener"
                    },
                    "type": {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "EventListenerOrEventListenerObject"
                      }
                    }
                  },
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "options"
                    },
                    "questionToken": {
                      "kind": "QuestionToken"
                    },
                    "type": {
                      "kind": "UnionType",
                      "types": [
                        {
                          "kind": "BooleanKeyword"
                        },
                        {
                          "kind": "TypeReference",
                          "typeName": {
                            "kind": "Identifier",
                            "text": "EventListenerOptions"
                          }
                        }
                      ]
                    }
                  }
                ],
                "type": {
                  "kind": "VoidKeyword"
                }
              }
            ],
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "PermissionStatus"
            }
          },
          {
            "kind": "ClassDeclaration",
            "members": [
              {
                "kind": "MethodDeclaration",
                "name": {
                  "kind": "Identifier",
                  "text": "query"
                },
                "parameters": [
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "desc"
                    },
                    "type": {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "PermissionDescriptor"
                      }
                    }
                  }
                ],
                "type": {
                  "kind": "TypeReference",
                  "typeArguments": [
                    {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "PermissionStatus"
                      }
                    }
                  ],
                  "typeName": {
                    "kind": "Identifier",
                    "text": "Promise"
                  }
                }
              },
              {
                "kind": "MethodDeclaration",
                "name": {
                  "kind": "Identifier",
                  "text": "querySync"
                },
                "parameters": [
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "desc"
                    },
                    "type": {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "PermissionDescriptor"
                      }
                    }
                  }
                ],
                "type": {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "PermissionStatus"
                  }
                }
              },
              {
                "kind": "MethodDeclaration",
                "name": {
                  "kind": "Identifier",
                  "text": "revoke"
                },
                "parameters": [
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "desc"
                    },
                    "type": {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "PermissionDescriptor"
                      }
                    }
                  }
                ],
                "type": {
                  "kind": "TypeReference",
                  "typeArguments": [
                    {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "PermissionStatus"
                      }
                    }
                  ],
                  "typeName": {
                    "kind": "Identifier",
                    "text": "Promise"
                  }
                }
              },
              {
                "kind": "MethodDeclaration",
                "name": {
                  "kind": "Identifier",
                  "text": "revokeSync"
                },
                "parameters": [
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "desc"
                    },
                    "type": {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "PermissionDescriptor"
                      }
                    }
                  }
                ],
                "type": {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "PermissionStatus"
                  }
                }
              },
              {
                "kind": "MethodDeclaration",
                "name": {
                  "kind": "Identifier",
                  "text": "request"
                },
                "parameters": [
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "desc"
                    },
                    "type": {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "PermissionDescriptor"
                      }
                    }
                  }
                ],
                "type": {
                  "kind": "TypeReference",
                  "typeArguments": [
                    {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "PermissionStatus"
                      }
                    }
                  ],
                  "typeName": {
                    "kind": "Identifier",
                    "text": "Promise"
                  }
                }
              },
              {
                "kind": "MethodDeclaration",
                "name": {
                  "kind": "Identifier",
                  "text": "requestSync"
                },
                "parameters": [
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "desc"
                    },
                    "type": {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "PermissionDescriptor"
                      }
                    }
                  }
                ],
                "type": {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "PermissionStatus"
                  }
                }
              }
            ],
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "Permissions"
            }
          },
          {
            "declarationList": {
              "declarations": [
                {
                  "kind": "VariableDeclaration",
                  "name": {
                    "kind": "Identifier",
                    "text": "permissions"
                  },
                  "type": {
                    "kind": "TypeReference",
                    "typeName": {
                      "kind": "Identifier",
                      "text": "Permissions"
                    }
                  }
                }
              ],
              "kind": "VariableDeclarationList"
            },
            "kind": "FirstStatement",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ]
          },
          {
            "declarationList": {
              "declarations": [
                {
                  "kind": "VariableDeclaration",
                  "name": {
                    "kind": "Identifier",
                    "text": "build"
                  },
                  "type": {
                    "kind": "TypeLiteral",
                    "members": [
                      {
                        "kind": "PropertySignature",
                        "name": {
                          "kind": "Identifier",
                          "text": "target"
                        },
                        "type": {
                          "kind": "StringKeyword"
                        }
                      },
                      {
                        "kind": "PropertySignature",
                        "name": {
                          "kind": "Identifier",
                          "text": "arch"
                        },
                        "type": {
                          "kind": "UnionType",
                          "types": [
                            {
                              "kind": "LiteralType",
                              "literal": {
                                "kind": "StringLiteral",
                                "text": "x86_64"
                              }
                            },
                            {
                              "kind": "LiteralType",
                              "literal": {
                                "kind": "StringLiteral",
                                "text": "aarch64"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "kind": "PropertySignature",
                        "name": {
                          "kind": "Identifier",
                          "text": "os"
                        },
                        "type": {
                          "kind": "UnionType",
                          "types": [
                            {
                              "kind": "LiteralType",
                              "literal": {
                                "kind": "StringLiteral",
                                "text": "darwin"
                              }
                            },
                            {
                              "kind": "LiteralType",
                              "literal": {
                                "kind": "StringLiteral",
                                "text": "linux"
                              }
                            },
                            {
                              "kind": "LiteralType",
                              "literal": {
                                "kind": "StringLiteral",
                                "text": "android"
                              }
                            },
                            {
                              "kind": "LiteralType",
                              "literal": {
                                "kind": "StringLiteral",
                                "text": "windows"
                              }
                            },
                            {
                              "kind": "LiteralType",
                              "literal": {
                                "kind": "StringLiteral",
                                "text": "freebsd"
                              }
                            },
                            {
                              "kind": "LiteralType",
                              "literal": {
                                "kind": "StringLiteral",
                                "text": "netbsd"
                              }
                            },
                            {
                              "kind": "LiteralType",
                              "literal": {
                                "kind": "StringLiteral",
                                "text": "aix"
                              }
                            },
                            {
                              "kind": "LiteralType",
                              "literal": {
                                "kind": "StringLiteral",
                                "text": "solaris"
                              }
                            },
                            {
                              "kind": "LiteralType",
                              "literal": {
                                "kind": "StringLiteral",
                                "text": "illumos"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "kind": "PropertySignature",
                        "name": {
                          "kind": "Identifier",
                          "text": "vendor"
                        },
                        "type": {
                          "kind": "StringKeyword"
                        }
                      },
                      {
                        "kind": "PropertySignature",
                        "name": {
                          "kind": "Identifier",
                          "text": "env"
                        },
                        "questionToken": {
                          "kind": "QuestionToken"
                        },
                        "type": {
                          "kind": "StringKeyword"
                        }
                      }
                    ]
                  }
                }
              ],
              "kind": "VariableDeclarationList"
            },
            "kind": "FirstStatement",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ]
          },
          {
            "declarationList": {
              "declarations": [
                {
                  "kind": "VariableDeclaration",
                  "name": {
                    "kind": "Identifier",
                    "text": "version"
                  },
                  "type": {
                    "kind": "TypeLiteral",
                    "members": [
                      {
                        "kind": "PropertySignature",
                        "name": {
                          "kind": "Identifier",
                          "text": "deno"
                        },
                        "type": {
                          "kind": "StringKeyword"
                        }
                      },
                      {
                        "kind": "PropertySignature",
                        "name": {
                          "kind": "Identifier",
                          "text": "v8"
                        },
                        "type": {
                          "kind": "StringKeyword"
                        }
                      },
                      {
                        "kind": "PropertySignature",
                        "name": {
                          "kind": "Identifier",
                          "text": "typescript"
                        },
                        "type": {
                          "kind": "StringKeyword"
                        }
                      }
                    ]
                  }
                }
              ],
              "kind": "VariableDeclarationList"
            },
            "kind": "FirstStatement",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ]
          },
          {
            "declarationList": {
              "declarations": [
                {
                  "kind": "VariableDeclaration",
                  "name": {
                    "kind": "Identifier",
                    "text": "args"
                  },
                  "type": {
                    "elementType": {
                      "kind": "StringKeyword"
                    },
                    "kind": "ArrayType"
                  }
                }
              ],
              "kind": "VariableDeclarationList"
            },
            "kind": "FirstStatement",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ]
          },
          {
            "declarationList": {
              "declarations": [
                {
                  "kind": "VariableDeclaration",
                  "name": {
                    "kind": "Identifier",
                    "text": "customInspect"
                  },
                  "type": {
                    "kind": "TypeOperator",
                    "type": {
                      "kind": "SymbolKeyword"
                    }
                  }
                }
              ],
              "kind": "VariableDeclarationList"
            },
            "kind": "FirstStatement",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ]
          },
          {
            "declarationList": {
              "declarations": [
                {
                  "kind": "VariableDeclaration",
                  "name": {
                    "kind": "Identifier",
                    "text": "mainModule"
                  },
                  "type": {
                    "kind": "StringKeyword"
                  }
                }
              ],
              "kind": "VariableDeclarationList"
            },
            "kind": "FirstStatement",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ]
          },
          {
            "kind": "InterfaceDeclaration",
            "members": [
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "type"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "LiteralType",
                      "literal": {
                        "kind": "StringLiteral",
                        "text": "file"
                      }
                    },
                    {
                      "kind": "LiteralType",
                      "literal": {
                        "kind": "StringLiteral",
                        "text": "dir"
                      }
                    },
                    {
                      "kind": "LiteralType",
                      "literal": {
                        "kind": "StringLiteral",
                        "text": "junction"
                      }
                    }
                  ]
                }
              }
            ],
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "SymlinkOptions"
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "symlink"
            },
            "parameters": [
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "oldpath"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "StringKeyword"
                    },
                    {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "URL"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "newpath"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "StringKeyword"
                    },
                    {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "URL"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "options"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "SymlinkOptions"
                  }
                }
              }
            ],
            "type": {
              "kind": "TypeReference",
              "typeArguments": [
                {
                  "kind": "VoidKeyword"
                }
              ],
              "typeName": {
                "kind": "Identifier",
                "text": "Promise"
              }
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "symlinkSync"
            },
            "parameters": [
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "oldpath"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "StringKeyword"
                    },
                    {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "URL"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "newpath"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "StringKeyword"
                    },
                    {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "URL"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "options"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "SymlinkOptions"
                  }
                }
              }
            ],
            "type": {
              "kind": "VoidKeyword"
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "ftruncate"
            },
            "parameters": [
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "rid"
                },
                "type": {
                  "kind": "NumberKeyword"
                }
              },
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "len"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "NumberKeyword"
                }
              }
            ],
            "type": {
              "kind": "TypeReference",
              "typeArguments": [
                {
                  "kind": "VoidKeyword"
                }
              ],
              "typeName": {
                "kind": "Identifier",
                "text": "Promise"
              }
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "ftruncateSync"
            },
            "parameters": [
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "rid"
                },
                "type": {
                  "kind": "NumberKeyword"
                }
              },
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "len"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "NumberKeyword"
                }
              }
            ],
            "type": {
              "kind": "VoidKeyword"
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "futimeSync"
            },
            "parameters": [
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "rid"
                },
                "type": {
                  "kind": "NumberKeyword"
                }
              },
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "atime"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "NumberKeyword"
                    },
                    {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "Date"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "mtime"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "NumberKeyword"
                    },
                    {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "Date"
                      }
                    }
                  ]
                }
              }
            ],
            "type": {
              "kind": "VoidKeyword"
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "futime"
            },
            "parameters": [
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "rid"
                },
                "type": {
                  "kind": "NumberKeyword"
                }
              },
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "atime"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "NumberKeyword"
                    },
                    {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "Date"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "mtime"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "NumberKeyword"
                    },
                    {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "Date"
                      }
                    }
                  ]
                }
              }
            ],
            "type": {
              "kind": "TypeReference",
              "typeArguments": [
                {
                  "kind": "VoidKeyword"
                }
              ],
              "typeName": {
                "kind": "Identifier",
                "text": "Promise"
              }
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "fstat"
            },
            "parameters": [
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "rid"
                },
                "type": {
                  "kind": "NumberKeyword"
                }
              }
            ],
            "type": {
              "kind": "TypeReference",
              "typeArguments": [
                {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "FileInfo"
                  }
                }
              ],
              "typeName": {
                "kind": "Identifier",
                "text": "Promise"
              }
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "fstatSync"
            },
            "parameters": [
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "rid"
                },
                "type": {
                  "kind": "NumberKeyword"
                }
              }
            ],
            "type": {
              "kind": "TypeReference",
              "typeName": {
                "kind": "Identifier",
                "text": "FileInfo"
              }
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "utimeSync"
            },
            "parameters": [
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "path"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "StringKeyword"
                    },
                    {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "URL"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "atime"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "NumberKeyword"
                    },
                    {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "Date"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "mtime"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "NumberKeyword"
                    },
                    {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "Date"
                      }
                    }
                  ]
                }
              }
            ],
            "type": {
              "kind": "VoidKeyword"
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "utime"
            },
            "parameters": [
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "path"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "StringKeyword"
                    },
                    {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "URL"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "atime"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "NumberKeyword"
                    },
                    {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "Date"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "mtime"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "NumberKeyword"
                    },
                    {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "Date"
                      }
                    }
                  ]
                }
              }
            ],
            "type": {
              "kind": "TypeReference",
              "typeArguments": [
                {
                  "kind": "VoidKeyword"
                }
              ],
              "typeName": {
                "kind": "Identifier",
                "text": "Promise"
              }
            }
          },
          {
            "kind": "InterfaceDeclaration",
            "members": [
              {
                "kind": "PropertySignature",
                "modifiers": [
                  {
                    "kind": "ReadonlyKeyword"
                  }
                ],
                "name": {
                  "kind": "Identifier",
                  "text": "request"
                },
                "type": {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "Request"
                  }
                }
              },
              {
                "kind": "MethodSignature",
                "name": {
                  "kind": "Identifier",
                  "text": "respondWith"
                },
                "parameters": [
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "r"
                    },
                    "type": {
                      "kind": "UnionType",
                      "types": [
                        {
                          "kind": "TypeReference",
                          "typeName": {
                            "kind": "Identifier",
                            "text": "Response"
                          }
                        },
                        {
                          "kind": "TypeReference",
                          "typeArguments": [
                            {
                              "kind": "TypeReference",
                              "typeName": {
                                "kind": "Identifier",
                                "text": "Response"
                              }
                            }
                          ],
                          "typeName": {
                            "kind": "Identifier",
                            "text": "PromiseLike"
                          }
                        }
                      ]
                    }
                  }
                ],
                "type": {
                  "kind": "TypeReference",
                  "typeArguments": [
                    {
                      "kind": "VoidKeyword"
                    }
                  ],
                  "typeName": {
                    "kind": "Identifier",
                    "text": "Promise"
                  }
                }
              }
            ],
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "RequestEvent"
            }
          },
          {
            "heritageClauses": [
              {
                "kind": "HeritageClause",
                "token": "ExtendsKeyword",
                "types": [
                  {
                    "expression": {
                      "kind": "Identifier",
                      "text": "AsyncIterable"
                    },
                    "kind": "ExpressionWithTypeArguments",
                    "typeArguments": [
                      {
                        "kind": "TypeReference",
                        "typeName": {
                          "kind": "Identifier",
                          "text": "RequestEvent"
                        }
                      }
                    ]
                  },
                  {
                    "expression": {
                      "kind": "Identifier",
                      "text": "Disposable"
                    },
                    "kind": "ExpressionWithTypeArguments"
                  }
                ]
              }
            ],
            "kind": "InterfaceDeclaration",
            "members": [
              {
                "kind": "PropertySignature",
                "modifiers": [
                  {
                    "kind": "ReadonlyKeyword"
                  }
                ],
                "name": {
                  "kind": "Identifier",
                  "text": "rid"
                },
                "type": {
                  "kind": "NumberKeyword"
                }
              },
              {
                "kind": "MethodSignature",
                "name": {
                  "kind": "Identifier",
                  "text": "nextRequest"
                },
                "parameters": [],
                "type": {
                  "kind": "TypeReference",
                  "typeArguments": [
                    {
                      "kind": "UnionType",
                      "types": [
                        {
                          "kind": "TypeReference",
                          "typeName": {
                            "kind": "Identifier",
                            "text": "RequestEvent"
                          }
                        },
                        {
                          "kind": "LiteralType",
                          "literal": {
                            "kind": "NullKeyword"
                          }
                        }
                      ]
                    }
                  ],
                  "typeName": {
                    "kind": "Identifier",
                    "text": "Promise"
                  }
                }
              },
              {
                "kind": "MethodSignature",
                "name": {
                  "kind": "Identifier",
                  "text": "close"
                },
                "parameters": [],
                "type": {
                  "kind": "VoidKeyword"
                }
              }
            ],
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "HttpConn"
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "serveHttp"
            },
            "parameters": [
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "conn"
                },
                "type": {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "Conn"
                  }
                }
              }
            ],
            "type": {
              "kind": "TypeReference",
              "typeName": {
                "kind": "Identifier",
                "text": "HttpConn"
              }
            }
          },
          {
            "kind": "InterfaceDeclaration",
            "members": [
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "response"
                },
                "type": {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "Response"
                  }
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "socket"
                },
                "type": {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "WebSocket"
                  }
                }
              }
            ],
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "WebSocketUpgrade"
            }
          },
          {
            "kind": "InterfaceDeclaration",
            "members": [
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "protocol"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "StringKeyword"
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "idleTimeout"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "NumberKeyword"
                }
              }
            ],
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "UpgradeWebSocketOptions"
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "upgradeWebSocket"
            },
            "parameters": [
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "request"
                },
                "type": {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "Request"
                  }
                }
              },
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "options"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "UpgradeWebSocketOptions"
                  }
                }
              }
            ],
            "type": {
              "kind": "TypeReference",
              "typeName": {
                "kind": "Identifier",
                "text": "WebSocketUpgrade"
              }
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "kill"
            },
            "parameters": [
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "pid"
                },
                "type": {
                  "kind": "NumberKeyword"
                }
              },
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "signo"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "Signal"
                  }
                }
              }
            ],
            "type": {
              "kind": "VoidKeyword"
            }
          },
          {
            "kind": "TypeAliasDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "RecordType"
            },
            "type": {
              "kind": "UnionType",
              "types": [
                {
                  "kind": "LiteralType",
                  "literal": {
                    "kind": "StringLiteral",
                    "text": "A"
                  }
                },
                {
                  "kind": "LiteralType",
                  "literal": {
                    "kind": "StringLiteral",
                    "text": "AAAA"
                  }
                },
                {
                  "kind": "LiteralType",
                  "literal": {
                    "kind": "StringLiteral",
                    "text": "ANAME"
                  }
                },
                {
                  "kind": "LiteralType",
                  "literal": {
                    "kind": "StringLiteral",
                    "text": "CAA"
                  }
                },
                {
                  "kind": "LiteralType",
                  "literal": {
                    "kind": "StringLiteral",
                    "text": "CNAME"
                  }
                },
                {
                  "kind": "LiteralType",
                  "literal": {
                    "kind": "StringLiteral",
                    "text": "MX"
                  }
                },
                {
                  "kind": "LiteralType",
                  "literal": {
                    "kind": "StringLiteral",
                    "text": "NAPTR"
                  }
                },
                {
                  "kind": "LiteralType",
                  "literal": {
                    "kind": "StringLiteral",
                    "text": "NS"
                  }
                },
                {
                  "kind": "LiteralType",
                  "literal": {
                    "kind": "StringLiteral",
                    "text": "PTR"
                  }
                },
                {
                  "kind": "LiteralType",
                  "literal": {
                    "kind": "StringLiteral",
                    "text": "SOA"
                  }
                },
                {
                  "kind": "LiteralType",
                  "literal": {
                    "kind": "StringLiteral",
                    "text": "SRV"
                  }
                },
                {
                  "kind": "LiteralType",
                  "literal": {
                    "kind": "StringLiteral",
                    "text": "TXT"
                  }
                }
              ]
            }
          },
          {
            "kind": "InterfaceDeclaration",
            "members": [
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "nameServer"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "TypeLiteral",
                  "members": [
                    {
                      "kind": "PropertySignature",
                      "name": {
                        "kind": "Identifier",
                        "text": "ipAddr"
                      },
                      "type": {
                        "kind": "StringKeyword"
                      }
                    },
                    {
                      "kind": "PropertySignature",
                      "name": {
                        "kind": "Identifier",
                        "text": "port"
                      },
                      "questionToken": {
                        "kind": "QuestionToken"
                      },
                      "type": {
                        "kind": "NumberKeyword"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "signal"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "AbortSignal"
                  }
                }
              }
            ],
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "ResolveDnsOptions"
            }
          },
          {
            "kind": "InterfaceDeclaration",
            "members": [
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "critical"
                },
                "type": {
                  "kind": "BooleanKeyword"
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "tag"
                },
                "type": {
                  "kind": "StringKeyword"
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "value"
                },
                "type": {
                  "kind": "StringKeyword"
                }
              }
            ],
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "CAARecord"
            }
          },
          {
            "kind": "InterfaceDeclaration",
            "members": [
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "preference"
                },
                "type": {
                  "kind": "NumberKeyword"
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "exchange"
                },
                "type": {
                  "kind": "StringKeyword"
                }
              }
            ],
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "MXRecord"
            }
          },
          {
            "kind": "InterfaceDeclaration",
            "members": [
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "order"
                },
                "type": {
                  "kind": "NumberKeyword"
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "preference"
                },
                "type": {
                  "kind": "NumberKeyword"
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "flags"
                },
                "type": {
                  "kind": "StringKeyword"
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "services"
                },
                "type": {
                  "kind": "StringKeyword"
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "regexp"
                },
                "type": {
                  "kind": "StringKeyword"
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "replacement"
                },
                "type": {
                  "kind": "StringKeyword"
                }
              }
            ],
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "NAPTRRecord"
            }
          },
          {
            "kind": "InterfaceDeclaration",
            "members": [
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "mname"
                },
                "type": {
                  "kind": "StringKeyword"
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "rname"
                },
                "type": {
                  "kind": "StringKeyword"
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "serial"
                },
                "type": {
                  "kind": "NumberKeyword"
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "refresh"
                },
                "type": {
                  "kind": "NumberKeyword"
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "retry"
                },
                "type": {
                  "kind": "NumberKeyword"
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "expire"
                },
                "type": {
                  "kind": "NumberKeyword"
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "minimum"
                },
                "type": {
                  "kind": "NumberKeyword"
                }
              }
            ],
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "SOARecord"
            }
          },
          {
            "kind": "InterfaceDeclaration",
            "members": [
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "priority"
                },
                "type": {
                  "kind": "NumberKeyword"
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "weight"
                },
                "type": {
                  "kind": "NumberKeyword"
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "port"
                },
                "type": {
                  "kind": "NumberKeyword"
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "target"
                },
                "type": {
                  "kind": "StringKeyword"
                }
              }
            ],
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "SRVRecord"
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "resolveDns"
            },
            "parameters": [
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "query"
                },
                "type": {
                  "kind": "StringKeyword"
                }
              },
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "recordType"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "LiteralType",
                      "literal": {
                        "kind": "StringLiteral",
                        "text": "A"
                      }
                    },
                    {
                      "kind": "LiteralType",
                      "literal": {
                        "kind": "StringLiteral",
                        "text": "AAAA"
                      }
                    },
                    {
                      "kind": "LiteralType",
                      "literal": {
                        "kind": "StringLiteral",
                        "text": "ANAME"
                      }
                    },
                    {
                      "kind": "LiteralType",
                      "literal": {
                        "kind": "StringLiteral",
                        "text": "CNAME"
                      }
                    },
                    {
                      "kind": "LiteralType",
                      "literal": {
                        "kind": "StringLiteral",
                        "text": "NS"
                      }
                    },
                    {
                      "kind": "LiteralType",
                      "literal": {
                        "kind": "StringLiteral",
                        "text": "PTR"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "options"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "ResolveDnsOptions"
                  }
                }
              }
            ],
            "type": {
              "kind": "TypeReference",
              "typeArguments": [
                {
                  "elementType": {
                    "kind": "StringKeyword"
                  },
                  "kind": "ArrayType"
                }
              ],
              "typeName": {
                "kind": "Identifier",
                "text": "Promise"
              }
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "resolveDns"
            },
            "parameters": [
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "query"
                },
                "type": {
                  "kind": "StringKeyword"
                }
              },
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "recordType"
                },
                "type": {
                  "kind": "LiteralType",
                  "literal": {
                    "kind": "StringLiteral",
                    "text": "CAA"
                  }
                }
              },
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "options"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "ResolveDnsOptions"
                  }
                }
              }
            ],
            "type": {
              "kind": "TypeReference",
              "typeArguments": [
                {
                  "elementType": {
                    "kind": "TypeReference",
                    "typeName": {
                      "kind": "Identifier",
                      "text": "CAARecord"
                    }
                  },
                  "kind": "ArrayType"
                }
              ],
              "typeName": {
                "kind": "Identifier",
                "text": "Promise"
              }
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "resolveDns"
            },
            "parameters": [
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "query"
                },
                "type": {
                  "kind": "StringKeyword"
                }
              },
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "recordType"
                },
                "type": {
                  "kind": "LiteralType",
                  "literal": {
                    "kind": "StringLiteral",
                    "text": "MX"
                  }
                }
              },
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "options"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "ResolveDnsOptions"
                  }
                }
              }
            ],
            "type": {
              "kind": "TypeReference",
              "typeArguments": [
                {
                  "elementType": {
                    "kind": "TypeReference",
                    "typeName": {
                      "kind": "Identifier",
                      "text": "MXRecord"
                    }
                  },
                  "kind": "ArrayType"
                }
              ],
              "typeName": {
                "kind": "Identifier",
                "text": "Promise"
              }
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "resolveDns"
            },
            "parameters": [
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "query"
                },
                "type": {
                  "kind": "StringKeyword"
                }
              },
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "recordType"
                },
                "type": {
                  "kind": "LiteralType",
                  "literal": {
                    "kind": "StringLiteral",
                    "text": "NAPTR"
                  }
                }
              },
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "options"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "ResolveDnsOptions"
                  }
                }
              }
            ],
            "type": {
              "kind": "TypeReference",
              "typeArguments": [
                {
                  "elementType": {
                    "kind": "TypeReference",
                    "typeName": {
                      "kind": "Identifier",
                      "text": "NAPTRRecord"
                    }
                  },
                  "kind": "ArrayType"
                }
              ],
              "typeName": {
                "kind": "Identifier",
                "text": "Promise"
              }
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "resolveDns"
            },
            "parameters": [
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "query"
                },
                "type": {
                  "kind": "StringKeyword"
                }
              },
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "recordType"
                },
                "type": {
                  "kind": "LiteralType",
                  "literal": {
                    "kind": "StringLiteral",
                    "text": "SOA"
                  }
                }
              },
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "options"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "ResolveDnsOptions"
                  }
                }
              }
            ],
            "type": {
              "kind": "TypeReference",
              "typeArguments": [
                {
                  "elementType": {
                    "kind": "TypeReference",
                    "typeName": {
                      "kind": "Identifier",
                      "text": "SOARecord"
                    }
                  },
                  "kind": "ArrayType"
                }
              ],
              "typeName": {
                "kind": "Identifier",
                "text": "Promise"
              }
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "resolveDns"
            },
            "parameters": [
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "query"
                },
                "type": {
                  "kind": "StringKeyword"
                }
              },
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "recordType"
                },
                "type": {
                  "kind": "LiteralType",
                  "literal": {
                    "kind": "StringLiteral",
                    "text": "SRV"
                  }
                }
              },
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "options"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "ResolveDnsOptions"
                  }
                }
              }
            ],
            "type": {
              "kind": "TypeReference",
              "typeArguments": [
                {
                  "elementType": {
                    "kind": "TypeReference",
                    "typeName": {
                      "kind": "Identifier",
                      "text": "SRVRecord"
                    }
                  },
                  "kind": "ArrayType"
                }
              ],
              "typeName": {
                "kind": "Identifier",
                "text": "Promise"
              }
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "resolveDns"
            },
            "parameters": [
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "query"
                },
                "type": {
                  "kind": "StringKeyword"
                }
              },
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "recordType"
                },
                "type": {
                  "kind": "LiteralType",
                  "literal": {
                    "kind": "StringLiteral",
                    "text": "TXT"
                  }
                }
              },
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "options"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "ResolveDnsOptions"
                  }
                }
              }
            ],
            "type": {
              "kind": "TypeReference",
              "typeArguments": [
                {
                  "elementType": {
                    "elementType": {
                      "kind": "StringKeyword"
                    },
                    "kind": "ArrayType"
                  },
                  "kind": "ArrayType"
                }
              ],
              "typeName": {
                "kind": "Identifier",
                "text": "Promise"
              }
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "resolveDns"
            },
            "parameters": [
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "query"
                },
                "type": {
                  "kind": "StringKeyword"
                }
              },
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "recordType"
                },
                "type": {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "RecordType"
                  }
                }
              },
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "options"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "ResolveDnsOptions"
                  }
                }
              }
            ],
            "type": {
              "kind": "TypeReference",
              "typeArguments": [
                {
                  "kind": "UnionType",
                  "types": [
                    {
                      "elementType": {
                        "kind": "StringKeyword"
                      },
                      "kind": "ArrayType"
                    },
                    {
                      "elementType": {
                        "kind": "TypeReference",
                        "typeName": {
                          "kind": "Identifier",
                          "text": "CAARecord"
                        }
                      },
                      "kind": "ArrayType"
                    },
                    {
                      "elementType": {
                        "kind": "TypeReference",
                        "typeName": {
                          "kind": "Identifier",
                          "text": "MXRecord"
                        }
                      },
                      "kind": "ArrayType"
                    },
                    {
                      "elementType": {
                        "kind": "TypeReference",
                        "typeName": {
                          "kind": "Identifier",
                          "text": "NAPTRRecord"
                        }
                      },
                      "kind": "ArrayType"
                    },
                    {
                      "elementType": {
                        "kind": "TypeReference",
                        "typeName": {
                          "kind": "Identifier",
                          "text": "SOARecord"
                        }
                      },
                      "kind": "ArrayType"
                    },
                    {
                      "elementType": {
                        "kind": "TypeReference",
                        "typeName": {
                          "kind": "Identifier",
                          "text": "SRVRecord"
                        }
                      },
                      "kind": "ArrayType"
                    },
                    {
                      "elementType": {
                        "elementType": {
                          "kind": "StringKeyword"
                        },
                        "kind": "ArrayType"
                      },
                      "kind": "ArrayType"
                    }
                  ]
                }
              ],
              "typeName": {
                "kind": "Identifier",
                "text": "Promise"
              }
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "refTimer"
            },
            "parameters": [
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "id"
                },
                "type": {
                  "kind": "NumberKeyword"
                }
              }
            ],
            "type": {
              "kind": "VoidKeyword"
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "unrefTimer"
            },
            "parameters": [
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "id"
                },
                "type": {
                  "kind": "NumberKeyword"
                }
              }
            ],
            "type": {
              "kind": "VoidKeyword"
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "uid"
            },
            "parameters": [],
            "type": {
              "kind": "UnionType",
              "types": [
                {
                  "kind": "NumberKeyword"
                },
                {
                  "kind": "LiteralType",
                  "literal": {
                    "kind": "NullKeyword"
                  }
                }
              ]
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "gid"
            },
            "parameters": [],
            "type": {
              "kind": "UnionType",
              "types": [
                {
                  "kind": "NumberKeyword"
                },
                {
                  "kind": "LiteralType",
                  "literal": {
                    "kind": "NullKeyword"
                  }
                }
              ]
            }
          },
          {
            "kind": "InterfaceDeclaration",
            "members": [
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "remoteAddr"
                },
                "type": {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "FirstNode",
                    "left": {
                      "kind": "Identifier",
                      "text": "Deno"
                    },
                    "right": {
                      "kind": "Identifier",
                      "text": "NetAddr"
                    }
                  }
                }
              }
            ],
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "ServeHandlerInfo"
            }
          },
          {
            "kind": "TypeAliasDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "ServeHandler"
            },
            "type": {
              "kind": "FunctionType",
              "parameters": [
                {
                  "kind": "Parameter",
                  "name": {
                    "kind": "Identifier",
                    "text": "request"
                  },
                  "type": {
                    "kind": "TypeReference",
                    "typeName": {
                      "kind": "Identifier",
                      "text": "Request"
                    }
                  }
                },
                {
                  "kind": "Parameter",
                  "name": {
                    "kind": "Identifier",
                    "text": "info"
                  },
                  "type": {
                    "kind": "TypeReference",
                    "typeName": {
                      "kind": "Identifier",
                      "text": "ServeHandlerInfo"
                    }
                  }
                }
              ],
              "type": {
                "kind": "UnionType",
                "types": [
                  {
                    "kind": "TypeReference",
                    "typeName": {
                      "kind": "Identifier",
                      "text": "Response"
                    }
                  },
                  {
                    "kind": "TypeReference",
                    "typeArguments": [
                      {
                        "kind": "TypeReference",
                        "typeName": {
                          "kind": "Identifier",
                          "text": "Response"
                        }
                      }
                    ],
                    "typeName": {
                      "kind": "Identifier",
                      "text": "Promise"
                    }
                  }
                ]
              }
            }
          },
          {
            "kind": "InterfaceDeclaration",
            "members": [
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "port"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "NumberKeyword"
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "hostname"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "StringKeyword"
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "signal"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "AbortSignal"
                  }
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "reusePort"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "BooleanKeyword"
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "onError"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "FunctionType",
                  "parameters": [
                    {
                      "kind": "Parameter",
                      "name": {
                        "kind": "Identifier",
                        "text": "error"
                      },
                      "type": {
                        "kind": "UnknownKeyword"
                      }
                    }
                  ],
                  "type": {
                    "kind": "UnionType",
                    "types": [
                      {
                        "kind": "TypeReference",
                        "typeName": {
                          "kind": "Identifier",
                          "text": "Response"
                        }
                      },
                      {
                        "kind": "TypeReference",
                        "typeArguments": [
                          {
                            "kind": "TypeReference",
                            "typeName": {
                              "kind": "Identifier",
                              "text": "Response"
                            }
                          }
                        ],
                        "typeName": {
                          "kind": "Identifier",
                          "text": "Promise"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "onListen"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "FunctionType",
                  "parameters": [
                    {
                      "kind": "Parameter",
                      "name": {
                        "kind": "Identifier",
                        "text": "localAddr"
                      },
                      "type": {
                        "kind": "TypeReference",
                        "typeName": {
                          "kind": "FirstNode",
                          "left": {
                            "kind": "Identifier",
                            "text": "Deno"
                          },
                          "right": {
                            "kind": "Identifier",
                            "text": "NetAddr"
                          }
                        }
                      }
                    }
                  ],
                  "type": {
                    "kind": "VoidKeyword"
                  }
                }
              }
            ],
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "ServeOptions"
            }
          },
          {
            "heritageClauses": [
              {
                "kind": "HeritageClause",
                "token": "ExtendsKeyword",
                "types": [
                  {
                    "expression": {
                      "kind": "Identifier",
                      "text": "ServeOptions"
                    },
                    "kind": "ExpressionWithTypeArguments"
                  }
                ]
              }
            ],
            "kind": "InterfaceDeclaration",
            "members": [
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "cert"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "StringKeyword"
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "key"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "StringKeyword"
                }
              }
            ],
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "ServeTlsOptions"
            }
          },
          {
            "kind": "InterfaceDeclaration",
            "members": [
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "handler"
                },
                "type": {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "ServeHandler"
                  }
                }
              }
            ],
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "ServeInit"
            }
          },
          {
            "kind": "InterfaceDeclaration",
            "members": [
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "handler"
                },
                "type": {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "ServeHandler"
                  }
                }
              }
            ],
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "ServeTlsInit"
            }
          },
          {
            "kind": "InterfaceDeclaration",
            "members": [
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "path"
                },
                "type": {
                  "kind": "StringKeyword"
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "signal"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "AbortSignal"
                  }
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "onError"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "FunctionType",
                  "parameters": [
                    {
                      "kind": "Parameter",
                      "name": {
                        "kind": "Identifier",
                        "text": "error"
                      },
                      "type": {
                        "kind": "UnknownKeyword"
                      }
                    }
                  ],
                  "type": {
                    "kind": "UnionType",
                    "types": [
                      {
                        "kind": "TypeReference",
                        "typeName": {
                          "kind": "Identifier",
                          "text": "Response"
                        }
                      },
                      {
                        "kind": "TypeReference",
                        "typeArguments": [
                          {
                            "kind": "TypeReference",
                            "typeName": {
                              "kind": "Identifier",
                              "text": "Response"
                            }
                          }
                        ],
                        "typeName": {
                          "kind": "Identifier",
                          "text": "Promise"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "onListen"
                },
                "questionToken": {
                  "kind": "QuestionToken"
                },
                "type": {
                  "kind": "FunctionType",
                  "parameters": [
                    {
                      "kind": "Parameter",
                      "name": {
                        "kind": "Identifier",
                        "text": "localAddr"
                      },
                      "type": {
                        "kind": "TypeReference",
                        "typeName": {
                          "kind": "FirstNode",
                          "left": {
                            "kind": "Identifier",
                            "text": "Deno"
                          },
                          "right": {
                            "kind": "Identifier",
                            "text": "UnixAddr"
                          }
                        }
                      }
                    }
                  ],
                  "type": {
                    "kind": "VoidKeyword"
                  }
                }
              }
            ],
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "ServeUnixOptions"
            }
          },
          {
            "kind": "InterfaceDeclaration",
            "members": [
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "remoteAddr"
                },
                "type": {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "FirstNode",
                    "left": {
                      "kind": "Identifier",
                      "text": "Deno"
                    },
                    "right": {
                      "kind": "Identifier",
                      "text": "UnixAddr"
                    }
                  }
                }
              }
            ],
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "ServeUnixHandlerInfo"
            }
          },
          {
            "kind": "TypeAliasDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "ServeUnixHandler"
            },
            "type": {
              "kind": "FunctionType",
              "parameters": [
                {
                  "kind": "Parameter",
                  "name": {
                    "kind": "Identifier",
                    "text": "request"
                  },
                  "type": {
                    "kind": "TypeReference",
                    "typeName": {
                      "kind": "Identifier",
                      "text": "Request"
                    }
                  }
                },
                {
                  "kind": "Parameter",
                  "name": {
                    "kind": "Identifier",
                    "text": "info"
                  },
                  "type": {
                    "kind": "TypeReference",
                    "typeName": {
                      "kind": "Identifier",
                      "text": "ServeUnixHandlerInfo"
                    }
                  }
                }
              ],
              "type": {
                "kind": "UnionType",
                "types": [
                  {
                    "kind": "TypeReference",
                    "typeName": {
                      "kind": "Identifier",
                      "text": "Response"
                    }
                  },
                  {
                    "kind": "TypeReference",
                    "typeArguments": [
                      {
                        "kind": "TypeReference",
                        "typeName": {
                          "kind": "Identifier",
                          "text": "Response"
                        }
                      }
                    ],
                    "typeName": {
                      "kind": "Identifier",
                      "text": "Promise"
                    }
                  }
                ]
              }
            }
          },
          {
            "kind": "InterfaceDeclaration",
            "members": [
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "handler"
                },
                "type": {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "ServeUnixHandler"
                  }
                }
              }
            ],
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "ServeUnixInit"
            }
          },
          {
            "heritageClauses": [
              {
                "kind": "HeritageClause",
                "token": "ExtendsKeyword",
                "types": [
                  {
                    "expression": {
                      "kind": "Identifier",
                      "text": "AsyncDisposable"
                    },
                    "kind": "ExpressionWithTypeArguments"
                  }
                ]
              }
            ],
            "kind": "InterfaceDeclaration",
            "members": [
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "finished"
                },
                "type": {
                  "kind": "TypeReference",
                  "typeArguments": [
                    {
                      "kind": "VoidKeyword"
                    }
                  ],
                  "typeName": {
                    "kind": "Identifier",
                    "text": "Promise"
                  }
                }
              },
              {
                "kind": "PropertySignature",
                "name": {
                  "kind": "Identifier",
                  "text": "addr"
                },
                "type": {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "A"
                  }
                }
              },
              {
                "kind": "MethodSignature",
                "name": {
                  "kind": "Identifier",
                  "text": "ref"
                },
                "parameters": [],
                "type": {
                  "kind": "VoidKeyword"
                }
              },
              {
                "kind": "MethodSignature",
                "name": {
                  "kind": "Identifier",
                  "text": "unref"
                },
                "parameters": [],
                "type": {
                  "kind": "VoidKeyword"
                }
              },
              {
                "kind": "MethodSignature",
                "name": {
                  "kind": "Identifier",
                  "text": "shutdown"
                },
                "parameters": [],
                "type": {
                  "kind": "TypeReference",
                  "typeArguments": [
                    {
                      "kind": "VoidKeyword"
                    }
                  ],
                  "typeName": {
                    "kind": "Identifier",
                    "text": "Promise"
                  }
                }
              }
            ],
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "HttpServer"
            }
          },
          {
            "kind": "TypeAliasDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "Server"
            },
            "type": {
              "kind": "TypeReference",
              "typeName": {
                "kind": "Identifier",
                "text": "HttpServer"
              }
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "serve"
            },
            "parameters": [
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "handler"
                },
                "type": {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "ServeHandler"
                  }
                }
              }
            ],
            "type": {
              "kind": "TypeReference",
              "typeArguments": [
                {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "FirstNode",
                    "left": {
                      "kind": "Identifier",
                      "text": "Deno"
                    },
                    "right": {
                      "kind": "Identifier",
                      "text": "NetAddr"
                    }
                  }
                }
              ],
              "typeName": {
                "kind": "Identifier",
                "text": "HttpServer"
              }
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "serve"
            },
            "parameters": [
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "options"
                },
                "type": {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "ServeUnixOptions"
                  }
                }
              },
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "handler"
                },
                "type": {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "ServeUnixHandler"
                  }
                }
              }
            ],
            "type": {
              "kind": "TypeReference",
              "typeArguments": [
                {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "FirstNode",
                    "left": {
                      "kind": "Identifier",
                      "text": "Deno"
                    },
                    "right": {
                      "kind": "Identifier",
                      "text": "UnixAddr"
                    }
                  }
                }
              ],
              "typeName": {
                "kind": "Identifier",
                "text": "HttpServer"
              }
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "serve"
            },
            "parameters": [
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "options"
                },
                "type": {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "ServeOptions"
                  }
                }
              },
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "handler"
                },
                "type": {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "ServeHandler"
                  }
                }
              }
            ],
            "type": {
              "kind": "TypeReference",
              "typeArguments": [
                {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "FirstNode",
                    "left": {
                      "kind": "Identifier",
                      "text": "Deno"
                    },
                    "right": {
                      "kind": "Identifier",
                      "text": "NetAddr"
                    }
                  }
                }
              ],
              "typeName": {
                "kind": "Identifier",
                "text": "HttpServer"
              }
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "serve"
            },
            "parameters": [
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "options"
                },
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "ServeTlsOptions"
                      }
                    },
                    {
                      "kind": "ParenthesizedType",
                      "type": {
                        "kind": "IntersectionType",
                        "types": [
                          {
                            "kind": "TypeReference",
                            "typeName": {
                              "kind": "Identifier",
                              "text": "ServeTlsOptions"
                            }
                          },
                          {
                            "kind": "TypeReference",
                            "typeName": {
                              "kind": "Identifier",
                              "text": "TlsCertifiedKeyOptions"
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "handler"
                },
                "type": {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "Identifier",
                    "text": "ServeHandler"
                  }
                }
              }
            ],
            "type": {
              "kind": "TypeReference",
              "typeArguments": [
                {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "FirstNode",
                    "left": {
                      "kind": "Identifier",
                      "text": "Deno"
                    },
                    "right": {
                      "kind": "Identifier",
                      "text": "NetAddr"
                    }
                  }
                }
              ],
              "typeName": {
                "kind": "Identifier",
                "text": "HttpServer"
              }
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "serve"
            },
            "parameters": [
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "options"
                },
                "type": {
                  "kind": "IntersectionType",
                  "types": [
                    {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "ServeUnixInit"
                      }
                    },
                    {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "ServeUnixOptions"
                      }
                    }
                  ]
                }
              }
            ],
            "type": {
              "kind": "TypeReference",
              "typeArguments": [
                {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "FirstNode",
                    "left": {
                      "kind": "Identifier",
                      "text": "Deno"
                    },
                    "right": {
                      "kind": "Identifier",
                      "text": "UnixAddr"
                    }
                  }
                }
              ],
              "typeName": {
                "kind": "Identifier",
                "text": "HttpServer"
              }
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "serve"
            },
            "parameters": [
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "options"
                },
                "type": {
                  "kind": "IntersectionType",
                  "types": [
                    {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "ServeInit"
                      }
                    },
                    {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "ServeOptions"
                      }
                    }
                  ]
                }
              }
            ],
            "type": {
              "kind": "TypeReference",
              "typeArguments": [
                {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "FirstNode",
                    "left": {
                      "kind": "Identifier",
                      "text": "Deno"
                    },
                    "right": {
                      "kind": "Identifier",
                      "text": "NetAddr"
                    }
                  }
                }
              ],
              "typeName": {
                "kind": "Identifier",
                "text": "HttpServer"
              }
            }
          },
          {
            "kind": "FunctionDeclaration",
            "modifiers": [
              {
                "kind": "ExportKeyword"
              }
            ],
            "name": {
              "kind": "Identifier",
              "text": "serve"
            },
            "parameters": [
              {
                "kind": "Parameter",
                "name": {
                  "kind": "Identifier",
                  "text": "options"
                },
                "type": {
                  "kind": "IntersectionType",
                  "types": [
                    {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "ServeTlsInit"
                      }
                    },
                    {
                      "kind": "ParenthesizedType",
                      "type": {
                        "kind": "UnionType",
                        "types": [
                          {
                            "kind": "TypeReference",
                            "typeName": {
                              "kind": "Identifier",
                              "text": "ServeTlsOptions"
                            }
                          },
                          {
                            "kind": "ParenthesizedType",
                            "type": {
                              "kind": "IntersectionType",
                              "types": [
                                {
                                  "kind": "TypeReference",
                                  "typeName": {
                                    "kind": "Identifier",
                                    "text": "ServeTlsOptions"
                                  }
                                },
                                {
                                  "kind": "TypeReference",
                                  "typeName": {
                                    "kind": "Identifier",
                                    "text": "TlsCertifiedKeyOptions"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ],
            "type": {
              "kind": "TypeReference",
              "typeArguments": [
                {
                  "kind": "TypeReference",
                  "typeName": {
                    "kind": "FirstNode",
                    "left": {
                      "kind": "Identifier",
                      "text": "Deno"
                    },
                    "right": {
                      "kind": "Identifier",
                      "text": "NetAddr"
                    }
                  }
                }
              ],
              "typeName": {
                "kind": "Identifier",
                "text": "HttpServer"
              }
            }
          }
        ]
      },
      "kind": "ModuleDeclaration",
      "modifiers": [
        {
          "kind": "DeclareKeyword"
        }
      ],
      "name": {
        "kind": "Identifier",
        "text": "Deno"
      }
    }
  ],
  "text": "// Copyright 2018-2024 the Deno authors. All rights reserved. MIT license.\n\n/// <reference no-default-lib=\"true\" />\n/// <reference lib=\"esnext\" />\n/// <reference lib=\"deno.net\" />\n\n/** Deno provides extra properties on `import.meta`. These are included here\n * to ensure that these are still available when using the Deno namespace in\n * conjunction with other type libs, like `dom`.\n *\n * @category Platform\n */\ndeclare interface ImportMeta {\n  /** A string representation of the fully qualified module URL. When the\n   * module is loaded locally, the value will be a file URL (e.g.\n   * `file:///path/module.ts`).\n   *\n   * You can also parse the string as a URL to determine more information about\n   * how the current module was loaded. For example to determine if a module was\n   * local or not:\n   *\n   * ```ts\n   * const url = new URL(import.meta.url);\n   * if (url.protocol === \"file:\") {\n   *   console.log(\"this module was loaded locally\");\n   * }\n   * ```\n   */\n  url: string;\n\n  /** The absolute path of the current module.\n   *\n   * This property is only provided for local modules (ie. using `file://` URLs).\n   *\n   * Example:\n   * ```\n   * // Unix\n   * console.log(import.meta.filename); // /home/alice/my_module.ts\n   *\n   * // Windows\n   * console.log(import.meta.filename); // C:\\alice\\my_module.ts\n   * ```\n   */\n  filename?: string;\n\n  /** The absolute path of the directory containing the current module.\n   *\n   * This property is only provided for local modules (ie. using `file://` URLs).\n   *\n   * * Example:\n   * ```\n   * // Unix\n   * console.log(import.meta.dirname); // /home/alice\n   *\n   * // Windows\n   * console.log(import.meta.dirname); // C:\\alice\n   * ```\n   */\n  dirname?: string;\n\n  /** A flag that indicates if the current module is the main module that was\n   * called when starting the program under Deno.\n   *\n   * ```ts\n   * if (import.meta.main) {\n   *   // this was loaded as the main module, maybe do some bootstrapping\n   * }\n   * ```\n   */\n  main: boolean;\n\n  /** A function that returns resolved specifier as if it would be imported\n   * using `import(specifier)`.\n   *\n   * ```ts\n   * console.log(import.meta.resolve(\"./foo.js\"));\n   * // file:///dev/foo.js\n   * ```\n   */\n  resolve(specifier: string): string;\n}\n\n/** Deno supports [User Timing Level 3](https://w3c.github.io/user-timing)\n * which is not widely supported yet in other runtimes.\n *\n * Check out the\n * [Performance API](https://developer.mozilla.org/en-US/docs/Web/API/Performance)\n * documentation on MDN for further information about how to use the API.\n *\n * @category Performance\n */\ndeclare interface Performance {\n  /** Stores a timestamp with the associated name (a \"mark\"). */\n  mark(markName: string, options?: PerformanceMarkOptions): PerformanceMark;\n\n  /** Stores the `DOMHighResTimeStamp` duration between two marks along with the\n   * associated name (a \"measure\"). */\n  measure(\n    measureName: string,\n    options?: PerformanceMeasureOptions,\n  ): PerformanceMeasure;\n}\n\n/**\n * Options which are used in conjunction with `performance.mark`. Check out the\n * MDN\n * [`performance.mark()`](https://developer.mozilla.org/en-US/docs/Web/API/Performance/mark#markoptions)\n * documentation for more details.\n *\n * @category Performance\n */\ndeclare interface PerformanceMarkOptions {\n  /** Metadata to be included in the mark. */\n  // deno-lint-ignore no-explicit-any\n  detail?: any;\n\n  /** Timestamp to be used as the mark time. */\n  startTime?: number;\n}\n\n/**\n * Options which are used in conjunction with `performance.measure`. Check out the\n * MDN\n * [`performance.mark()`](https://developer.mozilla.org/en-US/docs/Web/API/Performance/measure#measureoptions)\n * documentation for more details.\n *\n * @category Performance\n */\ndeclare interface PerformanceMeasureOptions {\n  /** Metadata to be included in the measure. */\n  // deno-lint-ignore no-explicit-any\n  detail?: any;\n\n  /** Timestamp to be used as the start time or string to be used as start\n   * mark. */\n  start?: string | number;\n\n  /** Duration between the start and end times. */\n  duration?: number;\n\n  /** Timestamp to be used as the end time or string to be used as end mark. */\n  end?: string | number;\n}\n\n/** The global namespace where Deno specific, non-standard APIs are located. */\ndeclare namespace Deno {\n  /** A set of error constructors that are raised by Deno APIs.\n   *\n   * Can be used to provide more specific handling of failures within code\n   * which is using Deno APIs. For example, handling attempting to open a file\n   * which does not exist:\n   *\n   * ```ts\n   * try {\n   *   const file = await Deno.open(\"./some/file.txt\");\n   * } catch (error) {\n   *   if (error instanceof Deno.errors.NotFound) {\n   *     console.error(\"the file was not found\");\n   *   } else {\n   *     // otherwise re-throw\n   *     throw error;\n   *   }\n   * }\n   * ```\n   *\n   * @category Errors\n   */\n  export namespace errors {\n    /**\n     * Raised when the underlying operating system indicates that the file\n     * was not found.\n     *\n     * @category Errors */\n    export class NotFound extends Error {}\n    /**\n     * Raised when the underlying operating system indicates the current user\n     * which the Deno process is running under does not have the appropriate\n     * permissions to a file or resource, or the user _did not_ provide required\n     * `--allow-*` flag.\n     *\n     * @category Errors */\n    export class PermissionDenied extends Error {}\n    /**\n     * Raised when the underlying operating system reports that a connection to\n     * a resource is refused.\n     *\n     * @category Errors */\n    export class ConnectionRefused extends Error {}\n    /**\n     * Raised when the underlying operating system reports that a connection has\n     * been reset. With network servers, it can be a _normal_ occurrence where a\n     * client will abort a connection instead of properly shutting it down.\n     *\n     * @category Errors */\n    export class ConnectionReset extends Error {}\n    /**\n     * Raised when the underlying operating system reports an `ECONNABORTED`\n     * error.\n     *\n     * @category Errors */\n    export class ConnectionAborted extends Error {}\n    /**\n     * Raised when the underlying operating system reports an `ENOTCONN` error.\n     *\n     * @category Errors */\n    export class NotConnected extends Error {}\n    /**\n     * Raised when attempting to open a server listener on an address and port\n     * that already has a listener.\n     *\n     * @category Errors */\n    export class AddrInUse extends Error {}\n    /**\n     * Raised when the underlying operating system reports an `EADDRNOTAVAIL`\n     * error.\n     *\n     * @category Errors */\n    export class AddrNotAvailable extends Error {}\n    /**\n     * Raised when trying to write to a resource and a broken pipe error occurs.\n     * This can happen when trying to write directly to `stdout` or `stderr`\n     * and the operating system is unable to pipe the output for a reason\n     * external to the Deno runtime.\n     *\n     * @category Errors */\n    export class BrokenPipe extends Error {}\n    /**\n     * Raised when trying to create a resource, like a file, that already\n     * exits.\n     *\n     * @category Errors */\n    export class AlreadyExists extends Error {}\n    /**\n     * Raised when an operation to returns data that is invalid for the\n     * operation being performed.\n     *\n     * @category Errors */\n    export class InvalidData extends Error {}\n    /**\n     * Raised when the underlying operating system reports that an I/O operation\n     * has timed out (`ETIMEDOUT`).\n     *\n     * @category Errors */\n    export class TimedOut extends Error {}\n    /**\n     * Raised when the underlying operating system reports an `EINTR` error. In\n     * many cases, this underlying IO error will be handled internally within\n     * Deno, or result in an @{link BadResource} error instead.\n     *\n     * @category Errors */\n    export class Interrupted extends Error {}\n    /**\n     * Raised when the underlying operating system would need to block to\n     * complete but an asynchronous (non-blocking) API is used.\n     *\n     * @category Errors */\n    export class WouldBlock extends Error {}\n    /**\n     * Raised when expecting to write to a IO buffer resulted in zero bytes\n     * being written.\n     *\n     * @category Errors */\n    export class WriteZero extends Error {}\n    /**\n     * Raised when attempting to read bytes from a resource, but the EOF was\n     * unexpectedly encountered.\n     *\n     * @category Errors */\n    export class UnexpectedEof extends Error {}\n    /**\n     * The underlying IO resource is invalid or closed, and so the operation\n     * could not be performed.\n     *\n     * @category Errors */\n    export class BadResource extends Error {}\n    /**\n     * Raised in situations where when attempting to load a dynamic import,\n     * too many redirects were encountered.\n     *\n     * @category Errors */\n    export class Http extends Error {}\n    /**\n     * Raised when the underlying IO resource is not available because it is\n     * being awaited on in another block of code.\n     *\n     * @category Errors */\n    export class Busy extends Error {}\n    /**\n     * Raised when the underlying Deno API is asked to perform a function that\n     * is not currently supported.\n     *\n     * @category Errors */\n    export class NotSupported extends Error {}\n    /**\n     * Raised when too many symbolic links were encountered when resolving the\n     * filename.\n     *\n     * @category Errors */\n    export class FilesystemLoop extends Error {}\n    /**\n     * Raised when trying to open, create or write to a directory.\n     *\n     * @category Errors */\n    export class IsADirectory extends Error {}\n    /**\n     * Raised when performing a socket operation but the remote host is\n     * not reachable.\n     *\n     * @category Errors */\n    export class NetworkUnreachable extends Error {}\n    /**\n     * Raised when trying to perform an operation on a path that is not a\n     * directory, when directory is required.\n     *\n     * @category Errors */\n    export class NotADirectory extends Error {}\n  }\n\n  /** The current process ID of this instance of the Deno CLI.\n   *\n   * ```ts\n   * console.log(Deno.pid);\n   * ```\n   *\n   * @category Runtime\n   */\n  export const pid: number;\n\n  /**\n   * The process ID of parent process of this instance of the Deno CLI.\n   *\n   * ```ts\n   * console.log(Deno.ppid);\n   * ```\n   *\n   * @category Runtime\n   */\n  export const ppid: number;\n\n  /** @category Runtime */\n  export interface MemoryUsage {\n    /** The number of bytes of the current Deno's process resident set size,\n     * which is the amount of memory occupied in main memory (RAM). */\n    rss: number;\n    /** The total size of the heap for V8, in bytes. */\n    heapTotal: number;\n    /** The amount of the heap used for V8, in bytes. */\n    heapUsed: number;\n    /** Memory, in bytes, associated with JavaScript objects outside of the\n     * JavaScript isolate. */\n    external: number;\n  }\n\n  /**\n   * Returns an object describing the memory usage of the Deno process and the\n   * V8 subsystem measured in bytes.\n   *\n   * @category Runtime\n   */\n  export function memoryUsage(): MemoryUsage;\n\n  /**\n   * Get the `hostname` of the machine the Deno process is running on.\n   *\n   * ```ts\n   * console.log(Deno.hostname());\n   * ```\n   *\n   * Requires `allow-sys` permission.\n   *\n   * @tags allow-sys\n   * @category Runtime\n   */\n  export function hostname(): string;\n\n  /**\n   * Returns an array containing the 1, 5, and 15 minute load averages. The\n   * load average is a measure of CPU and IO utilization of the last one, five,\n   * and 15 minute periods expressed as a fractional number.  Zero means there\n   * is no load. On Windows, the three values are always the same and represent\n   * the current load, not the 1, 5 and 15 minute load averages.\n   *\n   * ```ts\n   * console.log(Deno.loadavg());  // e.g. [ 0.71, 0.44, 0.44 ]\n   * ```\n   *\n   * Requires `allow-sys` permission.\n   *\n   * On Windows there is no API available to retrieve this information and this method returns `[ 0, 0, 0 ]`.\n   *\n   * @tags allow-sys\n   * @category Runtime\n   */\n  export function loadavg(): number[];\n\n  /**\n   * The information for a network interface returned from a call to\n   * {@linkcode Deno.networkInterfaces}.\n   *\n   * @category Network\n   */\n  export interface NetworkInterfaceInfo {\n    /** The network interface name. */\n    name: string;\n    /** The IP protocol version. */\n    family: \"IPv4\" | \"IPv6\";\n    /** The IP address bound to the interface. */\n    address: string;\n    /** The netmask applied to the interface. */\n    netmask: string;\n    /** The IPv6 scope id or `null`. */\n    scopeid: number | null;\n    /** The CIDR range. */\n    cidr: string;\n    /** The MAC address. */\n    mac: string;\n  }\n\n  /**\n   * Returns an array of the network interface information.\n   *\n   * ```ts\n   * console.log(Deno.networkInterfaces());\n   * ```\n   *\n   * Requires `allow-sys` permission.\n   *\n   * @tags allow-sys\n   * @category Network\n   */\n  export function networkInterfaces(): NetworkInterfaceInfo[];\n\n  /**\n   * Displays the total amount of free and used physical and swap memory in the\n   * system, as well as the buffers and caches used by the kernel.\n   *\n   * This is similar to the `free` command in Linux\n   *\n   * ```ts\n   * console.log(Deno.systemMemoryInfo());\n   * ```\n   *\n   * Requires `allow-sys` permission.\n   *\n   * @tags allow-sys\n   * @category Runtime\n   */\n  export function systemMemoryInfo(): SystemMemoryInfo;\n\n  /**\n   * Information returned from a call to {@linkcode Deno.systemMemoryInfo}.\n   *\n   * @category Runtime\n   */\n  export interface SystemMemoryInfo {\n    /** Total installed memory in bytes. */\n    total: number;\n    /** Unused memory in bytes. */\n    free: number;\n    /** Estimation of how much memory, in bytes, is available for starting new\n     * applications, without swapping. Unlike the data provided by the cache or\n     * free fields, this field takes into account page cache and also that not\n     * all reclaimable memory will be reclaimed due to items being in use.\n     */\n    available: number;\n    /** Memory used by kernel buffers. */\n    buffers: number;\n    /** Memory used by the page cache and slabs. */\n    cached: number;\n    /** Total swap memory. */\n    swapTotal: number;\n    /** Unused swap memory. */\n    swapFree: number;\n  }\n\n  /** Reflects the `NO_COLOR` environment variable at program start.\n   *\n   * When the value is `true`, the Deno CLI will attempt to not send color codes\n   * to `stderr` or `stdout` and other command line programs should also attempt\n   * to respect this value.\n   *\n   * See: https://no-color.org/\n   *\n   * @category Runtime\n   */\n  export const noColor: boolean;\n\n  /**\n   * Returns the release version of the Operating System.\n   *\n   * ```ts\n   * console.log(Deno.osRelease());\n   * ```\n   *\n   * Requires `allow-sys` permission.\n   * Under consideration to possibly move to Deno.build or Deno.versions and if\n   * it should depend sys-info, which may not be desirable.\n   *\n   * @tags allow-sys\n   * @category Runtime\n   */\n  export function osRelease(): string;\n\n  /**\n   * Returns the Operating System uptime in number of seconds.\n   *\n   * ```ts\n   * console.log(Deno.osUptime());\n   * ```\n   *\n   * Requires `allow-sys` permission.\n   *\n   * @tags allow-sys\n   * @category Runtime\n   */\n  export function osUptime(): number;\n\n  /**\n   * Options which define the permissions within a test or worker context.\n   *\n   * `\"inherit\"` ensures that all permissions of the parent process will be\n   * applied to the test context. `\"none\"` ensures the test context has no\n   * permissions. A `PermissionOptionsObject` provides a more specific\n   * set of permissions to the test context.\n   *\n   * @category Permissions */\n  export type PermissionOptions =\n    | \"inherit\"\n    | \"none\"\n    | PermissionOptionsObject;\n\n  /**\n   * A set of options which can define the permissions within a test or worker\n   * context at a highly specific level.\n   *\n   * @category Permissions */\n  export interface PermissionOptionsObject {\n    /** Specifies if the `env` permission should be requested or revoked.\n     * If set to `\"inherit\"`, the current `env` permission will be inherited.\n     * If set to `true`, the global `env` permission will be requested.\n     * If set to `false`, the global `env` permission will be revoked.\n     *\n     * @default {false}\n     */\n    env?: \"inherit\" | boolean | string[];\n\n    /** Specifies if the `sys` permission should be requested or revoked.\n     * If set to `\"inherit\"`, the current `sys` permission will be inherited.\n     * If set to `true`, the global `sys` permission will be requested.\n     * If set to `false`, the global `sys` permission will be revoked.\n     *\n     * @default {false}\n     */\n    sys?: \"inherit\" | boolean | string[];\n\n    /** Specifies if the `hrtime` permission should be requested or revoked.\n     * If set to `\"inherit\"`, the current `hrtime` permission will be inherited.\n     * If set to `true`, the global `hrtime` permission will be requested.\n     * If set to `false`, the global `hrtime` permission will be revoked.\n     *\n     * @default {false}\n     */\n    hrtime?: \"inherit\" | boolean;\n\n    /** Specifies if the `net` permission should be requested or revoked.\n     * if set to `\"inherit\"`, the current `net` permission will be inherited.\n     * if set to `true`, the global `net` permission will be requested.\n     * if set to `false`, the global `net` permission will be revoked.\n     * if set to `string[]`, the `net` permission will be requested with the\n     * specified host strings with the format `\"<host>[:<port>]`.\n     *\n     * @default {false}\n     *\n     * Examples:\n     *\n     * ```ts\n     * import { assertEquals } from \"jsr:@std/assert\";\n     *\n     * Deno.test({\n     *   name: \"inherit\",\n     *   permissions: {\n     *     net: \"inherit\",\n     *   },\n     *   async fn() {\n     *     const status = await Deno.permissions.query({ name: \"net\" })\n     *     assertEquals(status.state, \"granted\");\n     *   },\n     * });\n     * ```\n     *\n     * ```ts\n     * import { assertEquals } from \"jsr:@std/assert\";\n     *\n     * Deno.test({\n     *   name: \"true\",\n     *   permissions: {\n     *     net: true,\n     *   },\n     *   async fn() {\n     *     const status = await Deno.permissions.query({ name: \"net\" });\n     *     assertEquals(status.state, \"granted\");\n     *   },\n     * });\n     * ```\n     *\n     * ```ts\n     * import { assertEquals } from \"jsr:@std/assert\";\n     *\n     * Deno.test({\n     *   name: \"false\",\n     *   permissions: {\n     *     net: false,\n     *   },\n     *   async fn() {\n     *     const status = await Deno.permissions.query({ name: \"net\" });\n     *     assertEquals(status.state, \"denied\");\n     *   },\n     * });\n     * ```\n     *\n     * ```ts\n     * import { assertEquals } from \"jsr:@std/assert\";\n     *\n     * Deno.test({\n     *   name: \"localhost:8080\",\n     *   permissions: {\n     *     net: [\"localhost:8080\"],\n     *   },\n     *   async fn() {\n     *     const status = await Deno.permissions.query({ name: \"net\", host: \"localhost:8080\" });\n     *     assertEquals(status.state, \"granted\");\n     *   },\n     * });\n     * ```\n     */\n    net?: \"inherit\" | boolean | string[];\n\n    /** Specifies if the `ffi` permission should be requested or revoked.\n     * If set to `\"inherit\"`, the current `ffi` permission will be inherited.\n     * If set to `true`, the global `ffi` permission will be requested.\n     * If set to `false`, the global `ffi` permission will be revoked.\n     *\n     * @default {false}\n     */\n    ffi?: \"inherit\" | boolean | Array<string | URL>;\n\n    /** Specifies if the `read` permission should be requested or revoked.\n     * If set to `\"inherit\"`, the current `read` permission will be inherited.\n     * If set to `true`, the global `read` permission will be requested.\n     * If set to `false`, the global `read` permission will be revoked.\n     * If set to `Array<string | URL>`, the `read` permission will be requested with the\n     * specified file paths.\n     *\n     * @default {false}\n     */\n    read?: \"inherit\" | boolean | Array<string | URL>;\n\n    /** Specifies if the `run` permission should be requested or revoked.\n     * If set to `\"inherit\"`, the current `run` permission will be inherited.\n     * If set to `true`, the global `run` permission will be requested.\n     * If set to `false`, the global `run` permission will be revoked.\n     *\n     * @default {false}\n     */\n    run?: \"inherit\" | boolean | Array<string | URL>;\n\n    /** Specifies if the `write` permission should be requested or revoked.\n     * If set to `\"inherit\"`, the current `write` permission will be inherited.\n     * If set to `true`, the global `write` permission will be requested.\n     * If set to `false`, the global `write` permission will be revoked.\n     * If set to `Array<string | URL>`, the `write` permission will be requested with the\n     * specified file paths.\n     *\n     * @default {false}\n     */\n    write?: \"inherit\" | boolean | Array<string | URL>;\n  }\n\n  /**\n   * Context that is passed to a testing function, which can be used to either\n   * gain information about the current test, or register additional test\n   * steps within the current test.\n   *\n   * @category Testing */\n  export interface TestContext {\n    /** The current test name. */\n    name: string;\n    /** The string URL of the current test. */\n    origin: string;\n    /** If the current test is a step of another test, the parent test context\n     * will be set here. */\n    parent?: TestContext;\n\n    /** Run a sub step of the parent test or step. Returns a promise\n     * that resolves to a boolean signifying if the step completed successfully.\n     *\n     * The returned promise never rejects unless the arguments are invalid.\n     *\n     * If the test was ignored the promise returns `false`.\n     *\n     * ```ts\n     * Deno.test({\n     *   name: \"a parent test\",\n     *   async fn(t) {\n     *     console.log(\"before the step\");\n     *     await t.step({\n     *       name: \"step 1\",\n     *       fn(t) {\n     *         console.log(\"current step:\", t.name);\n     *       }\n     *     });\n     *     console.log(\"after the step\");\n     *   }\n     * });\n     * ```\n     */\n    step(definition: TestStepDefinition): Promise<boolean>;\n\n    /** Run a sub step of the parent test or step. Returns a promise\n     * that resolves to a boolean signifying if the step completed successfully.\n     *\n     * The returned promise never rejects unless the arguments are invalid.\n     *\n     * If the test was ignored the promise returns `false`.\n     *\n     * ```ts\n     * Deno.test(\n     *   \"a parent test\",\n     *   async (t) => {\n     *     console.log(\"before the step\");\n     *     await t.step(\n     *       \"step 1\",\n     *       (t) => {\n     *         console.log(\"current step:\", t.name);\n     *       }\n     *     );\n     *     console.log(\"after the step\");\n     *   }\n     * );\n     * ```\n     */\n    step(\n      name: string,\n      fn: (t: TestContext) => void | Promise<void>,\n    ): Promise<boolean>;\n\n    /** Run a sub step of the parent test or step. Returns a promise\n     * that resolves to a boolean signifying if the step completed successfully.\n     *\n     * The returned promise never rejects unless the arguments are invalid.\n     *\n     * If the test was ignored the promise returns `false`.\n     *\n     * ```ts\n     * Deno.test(async function aParentTest(t) {\n     *   console.log(\"before the step\");\n     *   await t.step(function step1(t) {\n     *     console.log(\"current step:\", t.name);\n     *   });\n     *   console.log(\"after the step\");\n     * });\n     * ```\n     */\n    step(fn: (t: TestContext) => void | Promise<void>): Promise<boolean>;\n  }\n\n  /** @category Testing */\n  export interface TestStepDefinition {\n    /** The test function that will be tested when this step is executed. The\n     * function can take an argument which will provide information about the\n     * current step's context. */\n    fn: (t: TestContext) => void | Promise<void>;\n    /** The name of the step. */\n    name: string;\n    /** If truthy the current test step will be ignored.\n     *\n     * This is a quick way to skip over a step, but also can be used for\n     * conditional logic, like determining if an environment feature is present.\n     */\n    ignore?: boolean;\n    /** Check that the number of async completed operations after the test step\n     * is the same as number of dispatched operations. This ensures that the\n     * code tested does not start async operations which it then does\n     * not await. This helps in preventing logic errors and memory leaks\n     * in the application code.\n     *\n     * Defaults to the parent test or step's value. */\n    sanitizeOps?: boolean;\n    /** Ensure the test step does not \"leak\" resources - like open files or\n     * network connections - by ensuring the open resources at the start of the\n     * step match the open resources at the end of the step.\n     *\n     * Defaults to the parent test or step's value. */\n    sanitizeResources?: boolean;\n    /** Ensure the test step does not prematurely cause the process to exit,\n     * for example via a call to {@linkcode Deno.exit}.\n     *\n     * Defaults to the parent test or step's value. */\n    sanitizeExit?: boolean;\n  }\n\n  /** @category Testing */\n  export interface TestDefinition {\n    fn: (t: TestContext) => void | Promise<void>;\n    /** The name of the test. */\n    name: string;\n    /** If truthy the current test step will be ignored.\n     *\n     * It is a quick way to skip over a step, but also can be used for\n     * conditional logic, like determining if an environment feature is present.\n     */\n    ignore?: boolean;\n    /** If at least one test has `only` set to `true`, only run tests that have\n     * `only` set to `true` and fail the test suite. */\n    only?: boolean;\n    /** Check that the number of async completed operations after the test step\n     * is the same as number of dispatched operations. This ensures that the\n     * code tested does not start async operations which it then does\n     * not await. This helps in preventing logic errors and memory leaks\n     * in the application code.\n     *\n     * @default {true} */\n    sanitizeOps?: boolean;\n    /** Ensure the test step does not \"leak\" resources - like open files or\n     * network connections - by ensuring the open resources at the start of the\n     * test match the open resources at the end of the test.\n     *\n     * @default {true} */\n    sanitizeResources?: boolean;\n    /** Ensure the test case does not prematurely cause the process to exit,\n     * for example via a call to {@linkcode Deno.exit}.\n     *\n     * @default {true} */\n    sanitizeExit?: boolean;\n    /** Specifies the permissions that should be used to run the test.\n     *\n     * Set this to \"inherit\" to keep the calling runtime permissions, set this\n     * to \"none\" to revoke all permissions, or set a more specific set of\n     * permissions using a {@linkcode PermissionOptionsObject}.\n     *\n     * @default {\"inherit\"} */\n    permissions?: PermissionOptions;\n  }\n\n  /** Register a test which will be run when `deno test` is used on the command\n   * line and the containing module looks like a test module.\n   *\n   * `fn` can be async if required.\n   *\n   * ```ts\n   * import { assertEquals } from \"jsr:@std/assert\";\n   *\n   * Deno.test({\n   *   name: \"example test\",\n   *   fn() {\n   *     assertEquals(\"world\", \"world\");\n   *   },\n   * });\n   *\n   * Deno.test({\n   *   name: \"example ignored test\",\n   *   ignore: Deno.build.os === \"windows\",\n   *   fn() {\n   *     // This test is ignored only on Windows machines\n   *   },\n   * });\n   *\n   * Deno.test({\n   *   name: \"example async test\",\n   *   async fn() {\n   *     const decoder = new TextDecoder(\"utf-8\");\n   *     const data = await Deno.readFile(\"hello_world.txt\");\n   *     assertEquals(decoder.decode(data), \"Hello world\");\n   *   }\n   * });\n   * ```\n   *\n   * @category Testing\n   */\n  export const test: DenoTest;\n\n  /**\n   * @category Testing\n   */\n  export interface DenoTest {\n    /** Register a test which will be run when `deno test` is used on the command\n     * line and the containing module looks like a test module.\n     *\n     * `fn` can be async if required.\n     *\n     * ```ts\n     * import { assertEquals } from \"jsr:@std/assert\";\n     *\n     * Deno.test({\n     *   name: \"example test\",\n     *   fn() {\n     *     assertEquals(\"world\", \"world\");\n     *   },\n     * });\n     *\n     * Deno.test({\n     *   name: \"example ignored test\",\n     *   ignore: Deno.build.os === \"windows\",\n     *   fn() {\n     *     // This test is ignored only on Windows machines\n     *   },\n     * });\n     *\n     * Deno.test({\n     *   name: \"example async test\",\n     *   async fn() {\n     *     const decoder = new TextDecoder(\"utf-8\");\n     *     const data = await Deno.readFile(\"hello_world.txt\");\n     *     assertEquals(decoder.decode(data), \"Hello world\");\n     *   }\n     * });\n     * ```\n     *\n     * @category Testing\n     */\n    (t: TestDefinition): void;\n\n    /** Register a test which will be run when `deno test` is used on the command\n     * line and the containing module looks like a test module.\n     *\n     * `fn` can be async if required.\n     *\n     * ```ts\n     * import { assertEquals } from \"jsr:@std/assert\";\n     *\n     * Deno.test(\"My test description\", () => {\n     *   assertEquals(\"hello\", \"hello\");\n     * });\n     *\n     * Deno.test(\"My async test description\", async () => {\n     *   const decoder = new TextDecoder(\"utf-8\");\n     *   const data = await Deno.readFile(\"hello_world.txt\");\n     *   assertEquals(decoder.decode(data), \"Hello world\");\n     * });\n     * ```\n     *\n     * @category Testing\n     */\n    (\n      name: string,\n      fn: (t: TestContext) => void | Promise<void>,\n    ): void;\n\n    /** Register a test which will be run when `deno test` is used on the command\n     * line and the containing module looks like a test module.\n     *\n     * `fn` can be async if required. Declared function must have a name.\n     *\n     * ```ts\n     * import { assertEquals } from \"jsr:@std/assert\";\n     *\n     * Deno.test(function myTestName() {\n     *   assertEquals(\"hello\", \"hello\");\n     * });\n     *\n     * Deno.test(async function myOtherTestName() {\n     *   const decoder = new TextDecoder(\"utf-8\");\n     *   const data = await Deno.readFile(\"hello_world.txt\");\n     *   assertEquals(decoder.decode(data), \"Hello world\");\n     * });\n     * ```\n     *\n     * @category Testing\n     */\n    (fn: (t: TestContext) => void | Promise<void>): void;\n\n    /** Register a test which will be run when `deno test` is used on the command\n     * line and the containing module looks like a test module.\n     *\n     * `fn` can be async if required.\n     *\n     * ```ts\n     * import { assert, fail, assertEquals } from \"jsr:@std/assert\";\n     *\n     * Deno.test(\"My test description\", { permissions: { read: true } }, (): void => {\n     *   assertEquals(\"hello\", \"hello\");\n     * });\n     *\n     * Deno.test(\"My async test description\", { permissions: { read: false } }, async (): Promise<void> => {\n     *   const decoder = new TextDecoder(\"utf-8\");\n     *   const data = await Deno.readFile(\"hello_world.txt\");\n     *   assertEquals(decoder.decode(data), \"Hello world\");\n     * });\n     * ```\n     *\n     * @category Testing\n     */\n    (\n      name: string,\n      options: Omit<TestDefinition, \"fn\" | \"name\">,\n      fn: (t: TestContext) => void | Promise<void>,\n    ): void;\n\n    /** Register a test which will be run when `deno test` is used on the command\n     * line and the containing module looks like a test module.\n     *\n     * `fn` can be async if required.\n     *\n     * ```ts\n     * import { assertEquals } from \"jsr:@std/assert\";\n     *\n     * Deno.test(\n     *   {\n     *     name: \"My test description\",\n     *     permissions: { read: true },\n     *   },\n     *   () => {\n     *     assertEquals(\"hello\", \"hello\");\n     *   },\n     * );\n     *\n     * Deno.test(\n     *   {\n     *     name: \"My async test description\",\n     *     permissions: { read: false },\n     *   },\n     *   async () => {\n     *     const decoder = new TextDecoder(\"utf-8\");\n     *     const data = await Deno.readFile(\"hello_world.txt\");\n     *     assertEquals(decoder.decode(data), \"Hello world\");\n     *   },\n     * );\n     * ```\n     *\n     * @category Testing\n     */\n    (\n      options: Omit<TestDefinition, \"fn\" | \"name\">,\n      fn: (t: TestContext) => void | Promise<void>,\n    ): void;\n\n    /** Register a test which will be run when `deno test` is used on the command\n     * line and the containing module looks like a test module.\n     *\n     * `fn` can be async if required. Declared function must have a name.\n     *\n     * ```ts\n     * import { assertEquals } from \"jsr:@std/assert\";\n     *\n     * Deno.test(\n     *   { permissions: { read: true } },\n     *   function myTestName() {\n     *     assertEquals(\"hello\", \"hello\");\n     *   },\n     * );\n     *\n     * Deno.test(\n     *   { permissions: { read: false } },\n     *   async function myOtherTestName() {\n     *     const decoder = new TextDecoder(\"utf-8\");\n     *     const data = await Deno.readFile(\"hello_world.txt\");\n     *     assertEquals(decoder.decode(data), \"Hello world\");\n     *   },\n     * );\n     * ```\n     *\n     * @category Testing\n     */\n    (\n      options: Omit<TestDefinition, \"fn\">,\n      fn: (t: TestContext) => void | Promise<void>,\n    ): void;\n\n    /** Shorthand property for ignoring a particular test case.\n     *\n     * @category Testing\n     */\n    ignore(t: Omit<TestDefinition, \"ignore\">): void;\n\n    /** Shorthand property for ignoring a particular test case.\n     *\n     * @category Testing\n     */\n    ignore(\n      name: string,\n      fn: (t: TestContext) => void | Promise<void>,\n    ): void;\n\n    /** Shorthand property for ignoring a particular test case.\n     *\n     * @category Testing\n     */\n    ignore(fn: (t: TestContext) => void | Promise<void>): void;\n\n    /** Shorthand property for ignoring a particular test case.\n     *\n     * @category Testing\n     */\n    ignore(\n      name: string,\n      options: Omit<TestDefinition, \"fn\" | \"name\" | \"ignore\">,\n      fn: (t: TestContext) => void | Promise<void>,\n    ): void;\n\n    /** Shorthand property for ignoring a particular test case.\n     *\n     * @category Testing\n     */\n    ignore(\n      options: Omit<TestDefinition, \"fn\" | \"name\" | \"ignore\">,\n      fn: (t: TestContext) => void | Promise<void>,\n    ): void;\n\n    /** Shorthand property for ignoring a particular test case.\n     *\n     * @category Testing\n     */\n    ignore(\n      options: Omit<TestDefinition, \"fn\" | \"ignore\">,\n      fn: (t: TestContext) => void | Promise<void>,\n    ): void;\n\n    /** Shorthand property for focusing a particular test case.\n     *\n     * @category Testing\n     */\n    only(t: Omit<TestDefinition, \"only\">): void;\n\n    /** Shorthand property for focusing a particular test case.\n     *\n     * @category Testing\n     */\n    only(\n      name: string,\n      fn: (t: TestContext) => void | Promise<void>,\n    ): void;\n\n    /** Shorthand property for focusing a particular test case.\n     *\n     * @category Testing\n     */\n    only(fn: (t: TestContext) => void | Promise<void>): void;\n\n    /** Shorthand property for focusing a particular test case.\n     *\n     * @category Testing\n     */\n    only(\n      name: string,\n      options: Omit<TestDefinition, \"fn\" | \"name\" | \"only\">,\n      fn: (t: TestContext) => void | Promise<void>,\n    ): void;\n\n    /** Shorthand property for focusing a particular test case.\n     *\n     * @category Testing\n     */\n    only(\n      options: Omit<TestDefinition, \"fn\" | \"name\" | \"only\">,\n      fn: (t: TestContext) => void | Promise<void>,\n    ): void;\n\n    /** Shorthand property for focusing a particular test case.\n     *\n     * @category Testing\n     */\n    only(\n      options: Omit<TestDefinition, \"fn\" | \"only\">,\n      fn: (t: TestContext) => void | Promise<void>,\n    ): void;\n  }\n\n  /**\n   * Context that is passed to a benchmarked function. The instance is shared\n   * between iterations of the benchmark. Its methods can be used for example\n   * to override of the measured portion of the function.\n   *\n   * @category Testing\n   */\n  export interface BenchContext {\n    /** The current benchmark name. */\n    name: string;\n    /** The string URL of the current benchmark. */\n    origin: string;\n\n    /** Restarts the timer for the bench measurement. This should be called\n     * after doing setup work which should not be measured.\n     *\n     * Warning: This method should not be used for benchmarks averaging less\n     * than 10μs per iteration. In such cases it will be disabled but the call\n     * will still have noticeable overhead, resulting in a warning.\n     *\n     * ```ts\n     * Deno.bench(\"foo\", async (t) => {\n     *   const data = await Deno.readFile(\"data.txt\");\n     *   t.start();\n     *   // some operation on `data`...\n     * });\n     * ```\n     */\n    start(): void;\n\n    /** End the timer early for the bench measurement. This should be called\n     * before doing teardown work which should not be measured.\n     *\n     * Warning: This method should not be used for benchmarks averaging less\n     * than 10μs per iteration. In such cases it will be disabled but the call\n     * will still have noticeable overhead, resulting in a warning.\n     *\n     * ```ts\n     * Deno.bench(\"foo\", async (t) => {\n     *   using file = await Deno.open(\"data.txt\");\n     *   t.start();\n     *   // some operation on `file`...\n     *   t.end();\n     * });\n     * ```\n     */\n    end(): void;\n  }\n\n  /**\n   * The interface for defining a benchmark test using {@linkcode Deno.bench}.\n   *\n   * @category Testing\n   */\n  export interface BenchDefinition {\n    /** The test function which will be benchmarked. */\n    fn: (b: BenchContext) => void | Promise<void>;\n    /** The name of the test, which will be used in displaying the results. */\n    name: string;\n    /** If truthy, the benchmark test will be ignored/skipped. */\n    ignore?: boolean;\n    /** Group name for the benchmark.\n     *\n     * Grouped benchmarks produce a group time summary, where the difference\n     * in performance between each test of the group is compared. */\n    group?: string;\n    /** Benchmark should be used as the baseline for other benchmarks.\n     *\n     * If there are multiple baselines in a group, the first one is used as the\n     * baseline. */\n    baseline?: boolean;\n    /** If at least one bench has `only` set to true, only run benches that have\n     * `only` set to `true` and fail the bench suite. */\n    only?: boolean;\n    /** Ensure the bench case does not prematurely cause the process to exit,\n     * for example via a call to {@linkcode Deno.exit}.\n     *\n     * @default {true} */\n    sanitizeExit?: boolean;\n    /** Specifies the permissions that should be used to run the bench.\n     *\n     * Set this to `\"inherit\"` to keep the calling thread's permissions.\n     *\n     * Set this to `\"none\"` to revoke all permissions.\n     *\n     * @default {\"inherit\"}\n     */\n    permissions?: PermissionOptions;\n  }\n\n  /**\n   * Register a benchmark test which will be run when `deno bench` is used on\n   * the command line and the containing module looks like a bench module.\n   *\n   * If the test function (`fn`) returns a promise or is async, the test runner\n   * will await resolution to consider the test complete.\n   *\n   * ```ts\n   * import { assertEquals } from \"jsr:@std/assert\";\n   *\n   * Deno.bench({\n   *   name: \"example test\",\n   *   fn() {\n   *     assertEquals(\"world\", \"world\");\n   *   },\n   * });\n   *\n   * Deno.bench({\n   *   name: \"example ignored test\",\n   *   ignore: Deno.build.os === \"windows\",\n   *   fn() {\n   *     // This test is ignored only on Windows machines\n   *   },\n   * });\n   *\n   * Deno.bench({\n   *   name: \"example async test\",\n   *   async fn() {\n   *     const decoder = new TextDecoder(\"utf-8\");\n   *     const data = await Deno.readFile(\"hello_world.txt\");\n   *     assertEquals(decoder.decode(data), \"Hello world\");\n   *   }\n   * });\n   * ```\n   *\n   * @category Testing\n   */\n  export function bench(b: BenchDefinition): void;\n\n  /**\n   * Register a benchmark test which will be run when `deno bench` is used on\n   * the command line and the containing module looks like a bench module.\n   *\n   * If the test function (`fn`) returns a promise or is async, the test runner\n   * will await resolution to consider the test complete.\n   *\n   * ```ts\n   * import { assertEquals } from \"jsr:@std/assert\";\n   *\n   * Deno.bench(\"My test description\", () => {\n   *   assertEquals(\"hello\", \"hello\");\n   * });\n   *\n   * Deno.bench(\"My async test description\", async () => {\n   *   const decoder = new TextDecoder(\"utf-8\");\n   *   const data = await Deno.readFile(\"hello_world.txt\");\n   *   assertEquals(decoder.decode(data), \"Hello world\");\n   * });\n   * ```\n   *\n   * @category Testing\n   */\n  export function bench(\n    name: string,\n    fn: (b: BenchContext) => void | Promise<void>,\n  ): void;\n\n  /**\n   * Register a benchmark test which will be run when `deno bench` is used on\n   * the command line and the containing module looks like a bench module.\n   *\n   * If the test function (`fn`) returns a promise or is async, the test runner\n   * will await resolution to consider the test complete.\n   *\n   * ```ts\n   * import { assertEquals } from \"jsr:@std/assert\";\n   *\n   * Deno.bench(function myTestName() {\n   *   assertEquals(\"hello\", \"hello\");\n   * });\n   *\n   * Deno.bench(async function myOtherTestName() {\n   *   const decoder = new TextDecoder(\"utf-8\");\n   *   const data = await Deno.readFile(\"hello_world.txt\");\n   *   assertEquals(decoder.decode(data), \"Hello world\");\n   * });\n   * ```\n   *\n   * @category Testing\n   */\n  export function bench(fn: (b: BenchContext) => void | Promise<void>): void;\n\n  /**\n   * Register a benchmark test which will be run when `deno bench` is used on\n   * the command line and the containing module looks like a bench module.\n   *\n   * If the test function (`fn`) returns a promise or is async, the test runner\n   * will await resolution to consider the test complete.\n   *\n   * ```ts\n   * import { assertEquals } from \"jsr:@std/assert\";\n   *\n   * Deno.bench(\n   *   \"My test description\",\n   *   { permissions: { read: true } },\n   *   () => {\n   *    assertEquals(\"hello\", \"hello\");\n   *   }\n   * );\n   *\n   * Deno.bench(\n   *   \"My async test description\",\n   *   { permissions: { read: false } },\n   *   async () => {\n   *     const decoder = new TextDecoder(\"utf-8\");\n   *     const data = await Deno.readFile(\"hello_world.txt\");\n   *     assertEquals(decoder.decode(data), \"Hello world\");\n   *   }\n   * );\n   * ```\n   *\n   * @category Testing\n   */\n  export function bench(\n    name: string,\n    options: Omit<BenchDefinition, \"fn\" | \"name\">,\n    fn: (b: BenchContext) => void | Promise<void>,\n  ): void;\n\n  /**\n   * Register a benchmark test which will be run when `deno bench` is used on\n   * the command line and the containing module looks like a bench module.\n   *\n   * If the test function (`fn`) returns a promise or is async, the test runner\n   * will await resolution to consider the test complete.\n   *\n   * ```ts\n   * import { assertEquals } from \"jsr:@std/assert\";\n   *\n   * Deno.bench(\n   *   { name: \"My test description\", permissions: { read: true } },\n   *   () => {\n   *     assertEquals(\"hello\", \"hello\");\n   *   }\n   * );\n   *\n   * Deno.bench(\n   *   { name: \"My async test description\", permissions: { read: false } },\n   *   async () => {\n   *     const decoder = new TextDecoder(\"utf-8\");\n   *     const data = await Deno.readFile(\"hello_world.txt\");\n   *     assertEquals(decoder.decode(data), \"Hello world\");\n   *   }\n   * );\n   * ```\n   *\n   * @category Testing\n   */\n  export function bench(\n    options: Omit<BenchDefinition, \"fn\">,\n    fn: (b: BenchContext) => void | Promise<void>,\n  ): void;\n\n  /**\n   * Register a benchmark test which will be run when `deno bench` is used on\n   * the command line and the containing module looks like a bench module.\n   *\n   * If the test function (`fn`) returns a promise or is async, the test runner\n   * will await resolution to consider the test complete.\n   *\n   * ```ts\n   * import { assertEquals } from \"jsr:@std/assert\";\n   *\n   * Deno.bench(\n   *   { permissions: { read: true } },\n   *   function myTestName() {\n   *     assertEquals(\"hello\", \"hello\");\n   *   }\n   * );\n   *\n   * Deno.bench(\n   *   { permissions: { read: false } },\n   *   async function myOtherTestName() {\n   *     const decoder = new TextDecoder(\"utf-8\");\n   *     const data = await Deno.readFile(\"hello_world.txt\");\n   *     assertEquals(decoder.decode(data), \"Hello world\");\n   *   }\n   * );\n   * ```\n   *\n   * @category Testing\n   */\n  export function bench(\n    options: Omit<BenchDefinition, \"fn\" | \"name\">,\n    fn: (b: BenchContext) => void | Promise<void>,\n  ): void;\n\n  /** Exit the Deno process with optional exit code.\n   *\n   * If no exit code is supplied then Deno will exit with return code of `0`.\n   *\n   * In worker contexts this is an alias to `self.close();`.\n   *\n   * ```ts\n   * Deno.exit(5);\n   * ```\n   *\n   * @category Runtime\n   */\n  export function exit(code?: number): never;\n\n  /** The exit code for the Deno process.\n   *\n   * If no exit code has been supplied, then Deno will assume a return code of `0`.\n   *\n   * When setting an exit code value, a number or non-NaN string must be provided,\n   * otherwise a TypeError will be thrown.\n   *\n   * ```ts\n   * console.log(Deno.exitCode); //-> 0\n   * Deno.exitCode = 1;\n   * console.log(Deno.exitCode); //-> 1\n   * ```\n   *\n   * @category Runtime\n   */\n  export var exitCode: number;\n\n  /** An interface containing methods to interact with the process environment\n   * variables.\n   *\n   * @tags allow-env\n   * @category Runtime\n   */\n  export interface Env {\n    /** Retrieve the value of an environment variable.\n     *\n     * Returns `undefined` if the supplied environment variable is not defined.\n     *\n     * ```ts\n     * console.log(Deno.env.get(\"HOME\"));  // e.g. outputs \"/home/alice\"\n     * console.log(Deno.env.get(\"MADE_UP_VAR\"));  // outputs \"undefined\"\n     * ```\n     *\n     * Requires `allow-env` permission.\n     *\n     * @tags allow-env\n     */\n    get(key: string): string | undefined;\n\n    /** Set the value of an environment variable.\n     *\n     * ```ts\n     * Deno.env.set(\"SOME_VAR\", \"Value\");\n     * Deno.env.get(\"SOME_VAR\");  // outputs \"Value\"\n     * ```\n     *\n     * Requires `allow-env` permission.\n     *\n     * @tags allow-env\n     */\n    set(key: string, value: string): void;\n\n    /** Delete the value of an environment variable.\n     *\n     * ```ts\n     * Deno.env.set(\"SOME_VAR\", \"Value\");\n     * Deno.env.delete(\"SOME_VAR\");  // outputs \"undefined\"\n     * ```\n     *\n     * Requires `allow-env` permission.\n     *\n     * @tags allow-env\n     */\n    delete(key: string): void;\n\n    /** Check whether an environment variable is present or not.\n     *\n     * ```ts\n     * Deno.env.set(\"SOME_VAR\", \"Value\");\n     * Deno.env.has(\"SOME_VAR\");  // outputs true\n     * ```\n     *\n     * Requires `allow-env` permission.\n     *\n     * @tags allow-env\n     */\n    has(key: string): boolean;\n\n    /** Returns a snapshot of the environment variables at invocation as a\n     * simple object of keys and values.\n     *\n     * ```ts\n     * Deno.env.set(\"TEST_VAR\", \"A\");\n     * const myEnv = Deno.env.toObject();\n     * console.log(myEnv.SHELL);\n     * Deno.env.set(\"TEST_VAR\", \"B\");\n     * console.log(myEnv.TEST_VAR);  // outputs \"A\"\n     * ```\n     *\n     * Requires `allow-env` permission.\n     *\n     * @tags allow-env\n     */\n    toObject(): { [index: string]: string };\n  }\n\n  /** An interface containing methods to interact with the process environment\n   * variables.\n   *\n   * @tags allow-env\n   * @category Runtime\n   */\n  export const env: Env;\n\n  /**\n   * Returns the path to the current deno executable.\n   *\n   * ```ts\n   * console.log(Deno.execPath());  // e.g. \"/home/alice/.local/bin/deno\"\n   * ```\n   *\n   * Requires `allow-read` permission.\n   *\n   * @tags allow-read\n   * @category Runtime\n   */\n  export function execPath(): string;\n\n  /**\n   * Change the current working directory to the specified path.\n   *\n   * ```ts\n   * Deno.chdir(\"/home/userA\");\n   * Deno.chdir(\"../userB\");\n   * Deno.chdir(\"C:\\\\Program Files (x86)\\\\Java\");\n   * ```\n   *\n   * Throws {@linkcode Deno.errors.NotFound} if directory not found.\n   *\n   * Throws {@linkcode Deno.errors.PermissionDenied} if the user does not have\n   * operating system file access rights.\n   *\n   * Requires `allow-read` permission.\n   *\n   * @tags allow-read\n   * @category Runtime\n   */\n  export function chdir(directory: string | URL): void;\n\n  /**\n   * Return a string representing the current working directory.\n   *\n   * If the current directory can be reached via multiple paths (due to symbolic\n   * links), `cwd()` may return any one of them.\n   *\n   * ```ts\n   * const currentWorkingDirectory = Deno.cwd();\n   * ```\n   *\n   * Throws {@linkcode Deno.errors.NotFound} if directory not available.\n   *\n   * Requires `allow-read` permission.\n   *\n   * @tags allow-read\n   * @category Runtime\n   */\n  export function cwd(): string;\n\n  /**\n   * Creates `newpath` as a hard link to `oldpath`.\n   *\n   * ```ts\n   * await Deno.link(\"old/name\", \"new/name\");\n   * ```\n   *\n   * Requires `allow-read` and `allow-write` permissions.\n   *\n   * @tags allow-read, allow-write\n   * @category File System\n   */\n  export function link(oldpath: string, newpath: string): Promise<void>;\n\n  /**\n   * Synchronously creates `newpath` as a hard link to `oldpath`.\n   *\n   * ```ts\n   * Deno.linkSync(\"old/name\", \"new/name\");\n   * ```\n   *\n   * Requires `allow-read` and `allow-write` permissions.\n   *\n   * @tags allow-read, allow-write\n   * @category File System\n   */\n  export function linkSync(oldpath: string, newpath: string): void;\n\n  /**\n   * A enum which defines the seek mode for IO related APIs that support\n   * seeking.\n   *\n   * @category I/O */\n  export enum SeekMode {\n    /* Seek from the start of the file/resource. */\n    Start = 0,\n    /* Seek from the current position within the file/resource. */\n    Current = 1,\n    /* Seek from the end of the current file/resource. */\n    End = 2,\n  }\n\n  /**\n   * An abstract interface which when implemented provides an interface to read\n   * bytes into an array buffer asynchronously.\n   *\n   * @deprecated This will be removed in Deno 2.0. See the\n   * {@link https://docs.deno.com/runtime/manual/advanced/migrate_deprecations | Deno 1.x to 2.x Migration Guide}\n   * for migration instructions.\n   *\n   * @category I/O */\n  export interface Reader {\n    /** Reads up to `p.byteLength` bytes into `p`. It resolves to the number of\n     * bytes read (`0` < `n` <= `p.byteLength`) and rejects if any error\n     * encountered. Even if `read()` resolves to `n` < `p.byteLength`, it may\n     * use all of `p` as scratch space during the call. If some data is\n     * available but not `p.byteLength` bytes, `read()` conventionally resolves\n     * to what is available instead of waiting for more.\n     *\n     * When `read()` encounters end-of-file condition, it resolves to EOF\n     * (`null`).\n     *\n     * When `read()` encounters an error, it rejects with an error.\n     *\n     * Callers should always process the `n` > `0` bytes returned before\n     * considering the EOF (`null`). Doing so correctly handles I/O errors that\n     * happen after reading some bytes and also both of the allowed EOF\n     * behaviors.\n     *\n     * Implementations should not retain a reference to `p`.\n     *\n     * Use\n     * {@linkcode https://jsr.io/@std/io/doc/iterate-reader/~/iterateReader | iterateReader}\n     * to turn {@linkcode Reader} into an {@linkcode AsyncIterator}.\n     */\n    read(p: Uint8Array): Promise<number | null>;\n  }\n\n  /**\n   * An abstract interface which when implemented provides an interface to read\n   * bytes into an array buffer synchronously.\n   *\n   * @deprecated This will be removed in Deno 2.0. See the\n   * {@link https://docs.deno.com/runtime/manual/advanced/migrate_deprecations | Deno 1.x to 2.x Migration Guide}\n   * for migration instructions.\n   *\n   * @category I/O */\n  export interface ReaderSync {\n    /** Reads up to `p.byteLength` bytes into `p`. It resolves to the number\n     * of bytes read (`0` < `n` <= `p.byteLength`) and rejects if any error\n     * encountered. Even if `readSync()` returns `n` < `p.byteLength`, it may use\n     * all of `p` as scratch space during the call. If some data is available\n     * but not `p.byteLength` bytes, `readSync()` conventionally returns what is\n     * available instead of waiting for more.\n     *\n     * When `readSync()` encounters end-of-file condition, it returns EOF\n     * (`null`).\n     *\n     * When `readSync()` encounters an error, it throws with an error.\n     *\n     * Callers should always process the `n` > `0` bytes returned before\n     * considering the EOF (`null`). Doing so correctly handles I/O errors that\n     * happen after reading some bytes and also both of the allowed EOF\n     * behaviors.\n     *\n     * Implementations should not retain a reference to `p`.\n     *\n     * Use\n     * {@linkcode https://jsr.io/@std/io/doc/iterate-reader/~/iterateReaderSync | iterateReaderSync}\n     * to turn {@linkcode ReaderSync} into an {@linkcode Iterator}.\n     */\n    readSync(p: Uint8Array): number | null;\n  }\n\n  /**\n   * An abstract interface which when implemented provides an interface to write\n   * bytes from an array buffer to a file/resource asynchronously.\n   *\n   * @deprecated This will be removed in Deno 2.0. See the\n   * {@link https://docs.deno.com/runtime/manual/advanced/migrate_deprecations | Deno 1.x to 2.x Migration Guide}\n   * for migration instructions.\n   *\n   * @category I/O */\n  export interface Writer {\n    /** Writes `p.byteLength` bytes from `p` to the underlying data stream. It\n     * resolves to the number of bytes written from `p` (`0` <= `n` <=\n     * `p.byteLength`) or reject with the error encountered that caused the\n     * write to stop early. `write()` must reject with a non-null error if\n     * would resolve to `n` < `p.byteLength`. `write()` must not modify the\n     * slice data, even temporarily.\n     *\n     * This function is one of the lowest\n     * level APIs and most users should not work with this directly, but rather\n     * use {@linkcode https://jsr.io/@std/io/doc/write-all/~/writeAll | writeAll}\n     * instead.\n     *\n     * Implementations should not retain a reference to `p`.\n     */\n    write(p: Uint8Array): Promise<number>;\n  }\n\n  /**\n   * An abstract interface which when implemented provides an interface to write\n   * bytes from an array buffer to a file/resource synchronously.\n   *\n   * @deprecated This will be removed in Deno 2.0. See the\n   * {@link https://docs.deno.com/runtime/manual/advanced/migrate_deprecations | Deno 1.x to 2.x Migration Guide}\n   * for migration instructions.\n   *\n   * @category I/O */\n  export interface WriterSync {\n    /** Writes `p.byteLength` bytes from `p` to the underlying data\n     * stream. It returns the number of bytes written from `p` (`0` <= `n`\n     * <= `p.byteLength`) and any error encountered that caused the write to\n     * stop early. `writeSync()` must throw a non-null error if it returns `n` <\n     * `p.byteLength`. `writeSync()` must not modify the slice data, even\n     * temporarily.\n     *\n     * Implementations should not retain a reference to `p`.\n     */\n    writeSync(p: Uint8Array): number;\n  }\n\n  /**\n   * An abstract interface which when implemented provides an interface to close\n   * files/resources that were previously opened.\n   *\n   * @deprecated This will be removed in Deno 2.0. See the\n   * {@link https://docs.deno.com/runtime/manual/advanced/migrate_deprecations | Deno 1.x to 2.x Migration Guide}\n   * for migration instructions.\n   *\n   * @category I/O */\n  export interface Closer {\n    /** Closes the resource, \"freeing\" the backing file/resource. */\n    close(): void;\n  }\n\n  /**\n   * An abstract interface which when implemented provides an interface to seek\n   * within an open file/resource asynchronously.\n   *\n   * @category I/O */\n  export interface Seeker {\n    /** Seek sets the offset for the next `read()` or `write()` to offset,\n     * interpreted according to `whence`: `Start` means relative to the\n     * start of the file, `Current` means relative to the current offset,\n     * and `End` means relative to the end. Seek resolves to the new offset\n     * relative to the start of the file.\n     *\n     * Seeking to an offset before the start of the file is an error. Seeking to\n     * any positive offset is legal, but the behavior of subsequent I/O\n     * operations on the underlying object is implementation-dependent.\n     *\n     * It resolves with the updated offset.\n     */\n    seek(offset: number | bigint, whence: SeekMode): Promise<number>;\n  }\n\n  /**\n   * An abstract interface which when implemented provides an interface to seek\n   * within an open file/resource synchronously.\n   *\n   * @category I/O */\n  export interface SeekerSync {\n    /** Seek sets the offset for the next `readSync()` or `writeSync()` to\n     * offset, interpreted according to `whence`: `Start` means relative\n     * to the start of the file, `Current` means relative to the current\n     * offset, and `End` means relative to the end.\n     *\n     * Seeking to an offset before the start of the file is an error. Seeking to\n     * any positive offset is legal, but the behavior of subsequent I/O\n     * operations on the underlying object is implementation-dependent.\n     *\n     * It returns the updated offset.\n     */\n    seekSync(offset: number | bigint, whence: SeekMode): number;\n  }\n\n  /**\n   * Copies from `src` to `dst` until either EOF (`null`) is read from `src` or\n   * an error occurs. It resolves to the number of bytes copied or rejects with\n   * the first error encountered while copying.\n   *\n   * @deprecated This will be removed in Deno 2.0. See the\n   * {@link https://docs.deno.com/runtime/manual/advanced/migrate_deprecations | Deno 1.x to 2.x Migration Guide}\n   * for migration instructions.\n   *\n   * @category I/O\n   *\n   * @param src The source to copy from\n   * @param dst The destination to copy to\n   * @param options Can be used to tune size of the buffer. Default size is 32kB\n   */\n  export function copy(\n    src: Reader,\n    dst: Writer,\n    options?: { bufSize?: number },\n  ): Promise<number>;\n\n  /**\n   * Turns a Reader, `r`, into an async iterator.\n   *\n   * @deprecated This will be removed in Deno 2.0. See the\n   * {@link https://docs.deno.com/runtime/manual/advanced/migrate_deprecations | Deno 1.x to 2.x Migration Guide}\n   * for migration instructions.\n   *\n   * @category I/O\n   */\n  export function iter(\n    r: Reader,\n    options?: { bufSize?: number },\n  ): AsyncIterableIterator<Uint8Array>;\n\n  /**\n   * Turns a ReaderSync, `r`, into an iterator.\n   *\n   * @deprecated This will be removed in Deno 2.0. See the\n   * {@link https://docs.deno.com/runtime/manual/advanced/migrate_deprecations | Deno 1.x to 2.x Migration Guide}\n   * for migration instructions.\n   *\n   * @category I/O\n   */\n  export function iterSync(\n    r: ReaderSync,\n    options?: {\n      bufSize?: number;\n    },\n  ): IterableIterator<Uint8Array>;\n\n  /** Open a file and resolve to an instance of {@linkcode Deno.FsFile}. The\n   * file does not need to previously exist if using the `create` or `createNew`\n   * open options. The caller may have the resulting file automatically closed\n   * by the runtime once it's out of scope by declaring the file variable with\n   * the `using` keyword.\n   *\n   * ```ts\n   * using file = await Deno.open(\"/foo/bar.txt\", { read: true, write: true });\n   * // Do work with file\n   * ```\n   *\n   * Alternatively, the caller may manually close the resource when finished with\n   * it.\n   *\n   * ```ts\n   * const file = await Deno.open(\"/foo/bar.txt\", { read: true, write: true });\n   * // Do work with file\n   * file.close();\n   * ```\n   *\n   * Requires `allow-read` and/or `allow-write` permissions depending on\n   * options.\n   *\n   * @tags allow-read, allow-write\n   * @category File System\n   */\n  export function open(\n    path: string | URL,\n    options?: OpenOptions,\n  ): Promise<FsFile>;\n\n  /** Synchronously open a file and return an instance of\n   * {@linkcode Deno.FsFile}. The file does not need to previously exist if\n   * using the `create` or `createNew` open options. The caller may have the\n   * resulting file automatically closed by the runtime once it's out of scope\n   * by declaring the file variable with the `using` keyword.\n   *\n   * ```ts\n   * using file = Deno.openSync(\"/foo/bar.txt\", { read: true, write: true });\n   * // Do work with file\n   * ```\n   *\n   * Alternatively, the caller may manually close the resource when finished with\n   * it.\n   *\n   * ```ts\n   * const file = Deno.openSync(\"/foo/bar.txt\", { read: true, write: true });\n   * // Do work with file\n   * file.close();\n   * ```\n   *\n   * Requires `allow-read` and/or `allow-write` permissions depending on\n   * options.\n   *\n   * @tags allow-read, allow-write\n   * @category File System\n   */\n  export function openSync(path: string | URL, options?: OpenOptions): FsFile;\n\n  /** Creates a file if none exists or truncates an existing file and resolves to\n   *  an instance of {@linkcode Deno.FsFile}.\n   *\n   * ```ts\n   * const file = await Deno.create(\"/foo/bar.txt\");\n   * ```\n   *\n   * Requires `allow-read` and `allow-write` permissions.\n   *\n   * @tags allow-read, allow-write\n   * @category File System\n   */\n  export function create(path: string | URL): Promise<FsFile>;\n\n  /** Creates a file if none exists or truncates an existing file and returns\n   *  an instance of {@linkcode Deno.FsFile}.\n   *\n   * ```ts\n   * const file = Deno.createSync(\"/foo/bar.txt\");\n   * ```\n   *\n   * Requires `allow-read` and `allow-write` permissions.\n   *\n   * @tags allow-read, allow-write\n   * @category File System\n   */\n  export function createSync(path: string | URL): FsFile;\n\n  /** Read from a resource ID (`rid`) into an array buffer (`buffer`).\n   *\n   * Resolves to either the number of bytes read during the operation or EOF\n   * (`null`) if there was nothing more to read.\n   *\n   * It is possible for a read to successfully return with `0` bytes. This does\n   * not indicate EOF.\n   *\n   * This function is one of the lowest level APIs and most users should not\n   * work with this directly, but rather use {@linkcode ReadableStream} and\n   * {@linkcode https://jsr.io/@std/streams/doc/to-array-buffer/~/toArrayBuffer | toArrayBuffer}\n   * instead.\n   *\n   * **It is not guaranteed that the full buffer will be read in a single call.**\n   *\n   * ```ts\n   * // if \"/foo/bar.txt\" contains the text \"hello world\":\n   * using file = await Deno.open(\"/foo/bar.txt\");\n   * const buf = new Uint8Array(100);\n   * const numberOfBytesRead = await Deno.read(file.rid, buf); // 11 bytes\n   * const text = new TextDecoder().decode(buf);  // \"hello world\"\n   * ```\n   *\n   * @deprecated This will be removed in Deno 2.0. See the\n   * {@link https://docs.deno.com/runtime/manual/advanced/migrate_deprecations | Deno 1.x to 2.x Migration Guide}\n   * for migration instructions.\n   *\n   * @category I/O\n   */\n  export function read(rid: number, buffer: Uint8Array): Promise<number | null>;\n\n  /** Synchronously read from a resource ID (`rid`) into an array buffer\n   * (`buffer`).\n   *\n   * Returns either the number of bytes read during the operation or EOF\n   * (`null`) if there was nothing more to read.\n   *\n   * It is possible for a read to successfully return with `0` bytes. This does\n   * not indicate EOF.\n   *\n   * This function is one of the lowest level APIs and most users should not\n   * work with this directly, but rather use {@linkcode ReadableStream} and\n   * {@linkcode https://jsr.io/@std/streams/doc/to-array-buffer/~/toArrayBuffer | toArrayBuffer}\n   * instead.\n   *\n   * **It is not guaranteed that the full buffer will be read in a single\n   * call.**\n   *\n   * ```ts\n   * // if \"/foo/bar.txt\" contains the text \"hello world\":\n   * using file = Deno.openSync(\"/foo/bar.txt\");\n   * const buf = new Uint8Array(100);\n   * const numberOfBytesRead = Deno.readSync(file.rid, buf); // 11 bytes\n   * const text = new TextDecoder().decode(buf);  // \"hello world\"\n   * ```\n   *\n   * @deprecated This will be removed in Deno 2.0. See the\n   * {@link https://docs.deno.com/runtime/manual/advanced/migrate_deprecations | Deno 1.x to 2.x Migration Guide}\n   * for migration instructions.\n   *\n   * @category I/O\n   */\n  export function readSync(rid: number, buffer: Uint8Array): number | null;\n\n  /** Write to the resource ID (`rid`) the contents of the array buffer (`data`).\n   *\n   * Resolves to the number of bytes written. This function is one of the lowest\n   * level APIs and most users should not work with this directly, but rather\n   * use {@linkcode WritableStream}, {@linkcode ReadableStream.from} and\n   * {@linkcode ReadableStream.pipeTo}.\n   *\n   * **It is not guaranteed that the full buffer will be written in a single\n   * call.**\n   *\n   * ```ts\n   * const encoder = new TextEncoder();\n   * const data = encoder.encode(\"Hello world\");\n   * using file = await Deno.open(\"/foo/bar.txt\", { write: true });\n   * const bytesWritten = await Deno.write(file.rid, data); // 11\n   * ```\n   *\n   * @deprecated This will be removed in Deno 2.0. See the\n   * {@link https://docs.deno.com/runtime/manual/advanced/migrate_deprecations | Deno 1.x to 2.x Migration Guide}\n   * for migration instructions.\n   *\n   * @category I/O\n   */\n  export function write(rid: number, data: Uint8Array): Promise<number>;\n\n  /** Synchronously write to the resource ID (`rid`) the contents of the array\n   * buffer (`data`).\n   *\n   * Returns the number of bytes written. This function is one of the lowest\n   * level APIs and most users should not work with this directly, but rather\n   * use {@linkcode WritableStream}, {@linkcode ReadableStream.from} and\n   * {@linkcode ReadableStream.pipeTo}.\n   *\n   * **It is not guaranteed that the full buffer will be written in a single\n   * call.**\n   *\n   * ```ts\n   * const encoder = new TextEncoder();\n   * const data = encoder.encode(\"Hello world\");\n   * using file = Deno.openSync(\"/foo/bar.txt\", { write: true });\n   * const bytesWritten = Deno.writeSync(file.rid, data); // 11\n   * ```\n   *\n   * @deprecated This will be removed in Deno 2.0. See the\n   * {@link https://docs.deno.com/runtime/manual/advanced/migrate_deprecations | Deno 1.x to 2.x Migration Guide}\n   * for migration instructions.\n   *\n   * @category I/O\n   */\n  export function writeSync(rid: number, data: Uint8Array): number;\n\n  /** Seek a resource ID (`rid`) to the given `offset` under mode given by `whence`.\n   * The call resolves to the new position within the resource (bytes from the start).\n   *\n   * ```ts\n   * // Given file.rid pointing to file with \"Hello world\", which is 11 bytes long:\n   * using file = await Deno.open(\n   *   \"hello.txt\",\n   *   { read: true, write: true, truncate: true, create: true },\n   * );\n   * await file.write(new TextEncoder().encode(\"Hello world\"));\n   *\n   * // advance cursor 6 bytes\n   * const cursorPosition = await Deno.seek(file.rid, 6, Deno.SeekMode.Start);\n   * console.log(cursorPosition);  // 6\n   * const buf = new Uint8Array(100);\n   * await file.read(buf);\n   * console.log(new TextDecoder().decode(buf)); // \"world\"\n   * ```\n   *\n   * The seek modes work as follows:\n   *\n   * ```ts\n   * // Given file.rid pointing to file with \"Hello world\", which is 11 bytes long:\n   * using file = await Deno.open(\n   *   \"hello.txt\",\n   *   { read: true, write: true, truncate: true, create: true },\n   * );\n   * await file.write(new TextEncoder().encode(\"Hello world\"));\n   *\n   * // Seek 6 bytes from the start of the file\n   * console.log(await Deno.seek(file.rid, 6, Deno.SeekMode.Start)); // \"6\"\n   * // Seek 2 more bytes from the current position\n   * console.log(await Deno.seek(file.rid, 2, Deno.SeekMode.Current)); // \"8\"\n   * // Seek backwards 2 bytes from the end of the file\n   * console.log(await Deno.seek(file.rid, -2, Deno.SeekMode.End)); // \"9\" (i.e. 11-2)\n   * ```\n   *\n   * @deprecated This will be removed in Deno 2.0. See the\n   * {@link https://docs.deno.com/runtime/manual/advanced/migrate_deprecations | Deno 1.x to 2.x Migration Guide}\n   * for migration instructions.\n   *\n   * @category I/O\n   */\n  export function seek(\n    rid: number,\n    offset: number | bigint,\n    whence: SeekMode,\n  ): Promise<number>;\n\n  /** Synchronously seek a resource ID (`rid`) to the given `offset` under mode\n   * given by `whence`. The new position within the resource (bytes from the\n   * start) is returned.\n   *\n   * ```ts\n   * using file = Deno.openSync(\n   *   \"hello.txt\",\n   *   { read: true, write: true, truncate: true, create: true },\n   * );\n   * file.writeSync(new TextEncoder().encode(\"Hello world\"));\n   *\n   * // advance cursor 6 bytes\n   * const cursorPosition = Deno.seekSync(file.rid, 6, Deno.SeekMode.Start);\n   * console.log(cursorPosition);  // 6\n   * const buf = new Uint8Array(100);\n   * file.readSync(buf);\n   * console.log(new TextDecoder().decode(buf)); // \"world\"\n   * ```\n   *\n   * The seek modes work as follows:\n   *\n   * ```ts\n   * // Given file.rid pointing to file with \"Hello world\", which is 11 bytes long:\n   * using file = Deno.openSync(\n   *   \"hello.txt\",\n   *   { read: true, write: true, truncate: true, create: true },\n   * );\n   * file.writeSync(new TextEncoder().encode(\"Hello world\"));\n   *\n   * // Seek 6 bytes from the start of the file\n   * console.log(Deno.seekSync(file.rid, 6, Deno.SeekMode.Start)); // \"6\"\n   * // Seek 2 more bytes from the current position\n   * console.log(Deno.seekSync(file.rid, 2, Deno.SeekMode.Current)); // \"8\"\n   * // Seek backwards 2 bytes from the end of the file\n   * console.log(Deno.seekSync(file.rid, -2, Deno.SeekMode.End)); // \"9\" (i.e. 11-2)\n   * ```\n   *\n   * @deprecated This will be removed in Deno 2.0. See the\n   * {@link https://docs.deno.com/runtime/manual/advanced/migrate_deprecations | Deno 1.x to 2.x Migration Guide}\n   * for migration instructions.\n   *\n   * @category I/O\n   */\n  export function seekSync(\n    rid: number,\n    offset: number | bigint,\n    whence: SeekMode,\n  ): number;\n\n  /**\n   * Flushes any pending data and metadata operations of the given file stream\n   * to disk.\n   *\n   * ```ts\n   * const file = await Deno.open(\n   *   \"my_file.txt\",\n   *   { read: true, write: true, create: true },\n   * );\n   * await file.write(new TextEncoder().encode(\"Hello World\"));\n   * await file.truncate(1);\n   * await Deno.fsync(file.rid);\n   * console.log(await Deno.readTextFile(\"my_file.txt\")); // H\n   * ```\n   *\n   * @category File System\n   */\n  export function fsync(rid: number): Promise<void>;\n\n  /**\n   * Synchronously flushes any pending data and metadata operations of the given\n   * file stream to disk.\n   *\n   * ```ts\n   * const file = Deno.openSync(\n   *   \"my_file.txt\",\n   *   { read: true, write: true, create: true },\n   * );\n   * file.writeSync(new TextEncoder().encode(\"Hello World\"));\n   * file.truncateSync(1);\n   * Deno.fsyncSync(file.rid);\n   * console.log(Deno.readTextFileSync(\"my_file.txt\")); // H\n   * ```\n   *\n   * @category File System\n   */\n  export function fsyncSync(rid: number): void;\n\n  /**\n   * Flushes any pending data operations of the given file stream to disk.\n   *  ```ts\n   * const file = await Deno.open(\n   *   \"my_file.txt\",\n   *   { read: true, write: true, create: true },\n   * );\n   * await file.write(new TextEncoder().encode(\"Hello World\"));\n   * await Deno.fdatasync(file.rid);\n   * console.log(await Deno.readTextFile(\"my_file.txt\")); // Hello World\n   * ```\n   *\n   * @category File System\n   */\n  export function fdatasync(rid: number): Promise<void>;\n\n  /**\n   * Synchronously flushes any pending data operations of the given file stream\n   * to disk.\n   *\n   *  ```ts\n   * const file = Deno.openSync(\n   *   \"my_file.txt\",\n   *   { read: true, write: true, create: true },\n   * );\n   * file.writeSync(new TextEncoder().encode(\"Hello World\"));\n   * Deno.fdatasyncSync(file.rid);\n   * console.log(Deno.readTextFileSync(\"my_file.txt\")); // Hello World\n   * ```\n   *\n   * @category File System\n   */\n  export function fdatasyncSync(rid: number): void;\n\n  /** Close the given resource ID (`rid`) which has been previously opened, such\n   * as via opening or creating a file. Closing a file when you are finished\n   * with it is important to avoid leaking resources.\n   *\n   * ```ts\n   * const file = await Deno.open(\"my_file.txt\");\n   * // do work with \"file\" object\n   * Deno.close(file.rid);\n   * ```\n   *\n   * It is recommended to define the variable with the `using` keyword so the\n   * runtime will automatically close the resource when it goes out of scope.\n   * Doing so negates the need to manually close the resource.\n   *\n   * ```ts\n   * using file = await Deno.open(\"my_file.txt\");\n   * // do work with \"file\" object\n   * ```\n   *\n   * @deprecated This will be removed in Deno 2.0. See the\n   * {@link https://docs.deno.com/runtime/manual/advanced/migrate_deprecations | Deno 1.x to 2.x Migration Guide}\n   * for migration instructions.\n   *\n   * @category I/O\n   */\n  export function close(rid: number): void;\n\n  /** The Deno abstraction for reading and writing files.\n   *\n   * This is the most straight forward way of handling files within Deno and is\n   * recommended over using the discrete functions within the `Deno` namespace.\n   *\n   * ```ts\n   * using file = await Deno.open(\"/foo/bar.txt\", { read: true });\n   * const fileInfo = await file.stat();\n   * if (fileInfo.isFile) {\n   *   const buf = new Uint8Array(100);\n   *   const numberOfBytesRead = await file.read(buf); // 11 bytes\n   *   const text = new TextDecoder().decode(buf);  // \"hello world\"\n   * }\n   * ```\n   *\n   * @category File System\n   */\n  export class FsFile\n    implements\n      Reader,\n      ReaderSync,\n      Writer,\n      WriterSync,\n      Seeker,\n      SeekerSync,\n      Closer,\n      Disposable {\n    /**\n     * The resource ID associated with the file instance. The resource ID\n     * should be considered an opaque reference to resource.\n     *\n     * @deprecated This will be removed in Deno 2.0. See the\n     * {@link https://docs.deno.com/runtime/manual/advanced/migrate_deprecations | Deno 1.x to 2.x Migration Guide}\n     * for migration instructions.\n     */\n    readonly rid: number;\n    /** A {@linkcode ReadableStream} instance representing to the byte contents\n     * of the file. This makes it easy to interoperate with other web streams\n     * based APIs.\n     *\n     * ```ts\n     * using file = await Deno.open(\"my_file.txt\", { read: true });\n     * const decoder = new TextDecoder();\n     * for await (const chunk of file.readable) {\n     *   console.log(decoder.decode(chunk));\n     * }\n     * ```\n     */\n    readonly readable: ReadableStream<Uint8Array>;\n    /** A {@linkcode WritableStream} instance to write the contents of the\n     * file. This makes it easy to interoperate with other web streams based\n     * APIs.\n     *\n     * ```ts\n     * const items = [\"hello\", \"world\"];\n     * using file = await Deno.open(\"my_file.txt\", { write: true });\n     * const encoder = new TextEncoder();\n     * const writer = file.writable.getWriter();\n     * for (const item of items) {\n     *   await writer.write(encoder.encode(item));\n     * }\n     * ```\n     */\n    readonly writable: WritableStream<Uint8Array>;\n    /**\n     * The constructor which takes a resource ID. Generally `FsFile` should\n     * not be constructed directly. Instead use {@linkcode Deno.open} or\n     * {@linkcode Deno.openSync} to create a new instance of `FsFile`.\n     *\n     * @deprecated This will be removed in Deno 2.0. See the\n     * {@link https://docs.deno.com/runtime/manual/advanced/migrate_deprecations | Deno 1.x to 2.x Migration Guide}\n     * for migration instructions.\n     */\n    constructor(rid: number);\n    /** Write the contents of the array buffer (`p`) to the file.\n     *\n     * Resolves to the number of bytes written.\n     *\n     * **It is not guaranteed that the full buffer will be written in a single\n     * call.**\n     *\n     * ```ts\n     * const encoder = new TextEncoder();\n     * const data = encoder.encode(\"Hello world\");\n     * using file = await Deno.open(\"/foo/bar.txt\", { write: true });\n     * const bytesWritten = await file.write(data); // 11\n     * ```\n     *\n     * @category I/O\n     */\n    write(p: Uint8Array): Promise<number>;\n    /** Synchronously write the contents of the array buffer (`p`) to the file.\n     *\n     * Returns the number of bytes written.\n     *\n     * **It is not guaranteed that the full buffer will be written in a single\n     * call.**\n     *\n     * ```ts\n     * const encoder = new TextEncoder();\n     * const data = encoder.encode(\"Hello world\");\n     * using file = Deno.openSync(\"/foo/bar.txt\", { write: true });\n     * const bytesWritten = file.writeSync(data); // 11\n     * ```\n     */\n    writeSync(p: Uint8Array): number;\n    /** Truncates (or extends) the file to reach the specified `len`. If `len`\n     * is not specified, then the entire file contents are truncated.\n     *\n     * ### Truncate the entire file\n     *\n     * ```ts\n     * using file = await Deno.open(\"my_file.txt\", { write: true });\n     * await file.truncate();\n     * ```\n     *\n     * ### Truncate part of the file\n     *\n     * ```ts\n     * // if \"my_file.txt\" contains the text \"hello world\":\n     * using file = await Deno.open(\"my_file.txt\", { write: true });\n     * await file.truncate(7);\n     * const buf = new Uint8Array(100);\n     * await file.read(buf);\n     * const text = new TextDecoder().decode(buf); // \"hello w\"\n     * ```\n     */\n    truncate(len?: number): Promise<void>;\n    /** Synchronously truncates (or extends) the file to reach the specified\n     * `len`. If `len` is not specified, then the entire file contents are\n     * truncated.\n     *\n     * ### Truncate the entire file\n     *\n     * ```ts\n     * using file = Deno.openSync(\"my_file.txt\", { write: true });\n     * file.truncateSync();\n     * ```\n     *\n     * ### Truncate part of the file\n     *\n     * ```ts\n     * // if \"my_file.txt\" contains the text \"hello world\":\n     * using file = Deno.openSync(\"my_file.txt\", { write: true });\n     * file.truncateSync(7);\n     * const buf = new Uint8Array(100);\n     * file.readSync(buf);\n     * const text = new TextDecoder().decode(buf); // \"hello w\"\n     * ```\n     */\n    truncateSync(len?: number): void;\n    /** Read the file into an array buffer (`p`).\n     *\n     * Resolves to either the number of bytes read during the operation or EOF\n     * (`null`) if there was nothing more to read.\n     *\n     * It is possible for a read to successfully return with `0` bytes. This\n     * does not indicate EOF.\n     *\n     * **It is not guaranteed that the full buffer will be read in a single\n     * call.**\n     *\n     * ```ts\n     * // if \"/foo/bar.txt\" contains the text \"hello world\":\n     * using file = await Deno.open(\"/foo/bar.txt\");\n     * const buf = new Uint8Array(100);\n     * const numberOfBytesRead = await file.read(buf); // 11 bytes\n     * const text = new TextDecoder().decode(buf);  // \"hello world\"\n     * ```\n     */\n    read(p: Uint8Array): Promise<number | null>;\n    /** Synchronously read from the file into an array buffer (`p`).\n     *\n     * Returns either the number of bytes read during the operation or EOF\n     * (`null`) if there was nothing more to read.\n     *\n     * It is possible for a read to successfully return with `0` bytes. This\n     * does not indicate EOF.\n     *\n     * **It is not guaranteed that the full buffer will be read in a single\n     * call.**\n     *\n     * ```ts\n     * // if \"/foo/bar.txt\" contains the text \"hello world\":\n     * using file = Deno.openSync(\"/foo/bar.txt\");\n     * const buf = new Uint8Array(100);\n     * const numberOfBytesRead = file.readSync(buf); // 11 bytes\n     * const text = new TextDecoder().decode(buf);  // \"hello world\"\n     * ```\n     */\n    readSync(p: Uint8Array): number | null;\n    /** Seek to the given `offset` under mode given by `whence`. The call\n     * resolves to the new position within the resource (bytes from the start).\n     *\n     * ```ts\n     * // Given file pointing to file with \"Hello world\", which is 11 bytes long:\n     * using file = await Deno.open(\n     *   \"hello.txt\",\n     *   { read: true, write: true, truncate: true, create: true },\n     * );\n     * await file.write(new TextEncoder().encode(\"Hello world\"));\n     *\n     * // advance cursor 6 bytes\n     * const cursorPosition = await file.seek(6, Deno.SeekMode.Start);\n     * console.log(cursorPosition);  // 6\n     * const buf = new Uint8Array(100);\n     * await file.read(buf);\n     * console.log(new TextDecoder().decode(buf)); // \"world\"\n     * ```\n     *\n     * The seek modes work as follows:\n     *\n     * ```ts\n     * // Given file.rid pointing to file with \"Hello world\", which is 11 bytes long:\n     * const file = await Deno.open(\n     *   \"hello.txt\",\n     *   { read: true, write: true, truncate: true, create: true },\n     * );\n     * await file.write(new TextEncoder().encode(\"Hello world\"));\n     *\n     * // Seek 6 bytes from the start of the file\n     * console.log(await file.seek(6, Deno.SeekMode.Start)); // \"6\"\n     * // Seek 2 more bytes from the current position\n     * console.log(await file.seek(2, Deno.SeekMode.Current)); // \"8\"\n     * // Seek backwards 2 bytes from the end of the file\n     * console.log(await file.seek(-2, Deno.SeekMode.End)); // \"9\" (i.e. 11-2)\n     * ```\n     */\n    seek(offset: number | bigint, whence: SeekMode): Promise<number>;\n    /** Synchronously seek to the given `offset` under mode given by `whence`.\n     * The new position within the resource (bytes from the start) is returned.\n     *\n     * ```ts\n     * using file = Deno.openSync(\n     *   \"hello.txt\",\n     *   { read: true, write: true, truncate: true, create: true },\n     * );\n     * file.writeSync(new TextEncoder().encode(\"Hello world\"));\n     *\n     * // advance cursor 6 bytes\n     * const cursorPosition = file.seekSync(6, Deno.SeekMode.Start);\n     * console.log(cursorPosition);  // 6\n     * const buf = new Uint8Array(100);\n     * file.readSync(buf);\n     * console.log(new TextDecoder().decode(buf)); // \"world\"\n     * ```\n     *\n     * The seek modes work as follows:\n     *\n     * ```ts\n     * // Given file.rid pointing to file with \"Hello world\", which is 11 bytes long:\n     * using file = Deno.openSync(\n     *   \"hello.txt\",\n     *   { read: true, write: true, truncate: true, create: true },\n     * );\n     * file.writeSync(new TextEncoder().encode(\"Hello world\"));\n     *\n     * // Seek 6 bytes from the start of the file\n     * console.log(file.seekSync(6, Deno.SeekMode.Start)); // \"6\"\n     * // Seek 2 more bytes from the current position\n     * console.log(file.seekSync(2, Deno.SeekMode.Current)); // \"8\"\n     * // Seek backwards 2 bytes from the end of the file\n     * console.log(file.seekSync(-2, Deno.SeekMode.End)); // \"9\" (i.e. 11-2)\n     * ```\n     */\n    seekSync(offset: number | bigint, whence: SeekMode): number;\n    /** Resolves to a {@linkcode Deno.FileInfo} for the file.\n     *\n     * ```ts\n     * import { assert } from \"jsr:@std/assert\";\n     *\n     * using file = await Deno.open(\"hello.txt\");\n     * const fileInfo = await file.stat();\n     * assert(fileInfo.isFile);\n     * ```\n     */\n    stat(): Promise<FileInfo>;\n    /** Synchronously returns a {@linkcode Deno.FileInfo} for the file.\n     *\n     * ```ts\n     * import { assert } from \"jsr:@std/assert\";\n     *\n     * using file = Deno.openSync(\"hello.txt\")\n     * const fileInfo = file.statSync();\n     * assert(fileInfo.isFile);\n     * ```\n     */\n    statSync(): FileInfo;\n    /**\n     * Flushes any pending data and metadata operations of the given file\n     * stream to disk.\n     *\n     * ```ts\n     * const file = await Deno.open(\n     *   \"my_file.txt\",\n     *   { read: true, write: true, create: true },\n     * );\n     * await file.write(new TextEncoder().encode(\"Hello World\"));\n     * await file.truncate(1);\n     * await file.sync();\n     * console.log(await Deno.readTextFile(\"my_file.txt\")); // H\n     * ```\n     *\n     * @category I/O\n     */\n    sync(): Promise<void>;\n    /**\n     * Synchronously flushes any pending data and metadata operations of the given\n     * file stream to disk.\n     *\n     * ```ts\n     * const file = Deno.openSync(\n     *   \"my_file.txt\",\n     *   { read: true, write: true, create: true },\n     * );\n     * file.writeSync(new TextEncoder().encode(\"Hello World\"));\n     * file.truncateSync(1);\n     * file.syncSync();\n     * console.log(Deno.readTextFileSync(\"my_file.txt\")); // H\n     * ```\n     *\n     * @category I/O\n     */\n    syncSync(): void;\n    /**\n     * Flushes any pending data operations of the given file stream to disk.\n     *  ```ts\n     * using file = await Deno.open(\n     *   \"my_file.txt\",\n     *   { read: true, write: true, create: true },\n     * );\n     * await file.write(new TextEncoder().encode(\"Hello World\"));\n     * await file.syncData();\n     * console.log(await Deno.readTextFile(\"my_file.txt\")); // Hello World\n     * ```\n     *\n     * @category I/O\n     */\n    syncData(): Promise<void>;\n    /**\n     * Synchronously flushes any pending data operations of the given file stream\n     * to disk.\n     *\n     *  ```ts\n     * using file = Deno.openSync(\n     *   \"my_file.txt\",\n     *   { read: true, write: true, create: true },\n     * );\n     * file.writeSync(new TextEncoder().encode(\"Hello World\"));\n     * file.syncDataSync();\n     * console.log(Deno.readTextFileSync(\"my_file.txt\")); // Hello World\n     * ```\n     *\n     * @category I/O\n     */\n    syncDataSync(): void;\n    /**\n     * Changes the access (`atime`) and modification (`mtime`) times of the\n     * file stream resource. Given times are either in seconds (UNIX epoch\n     * time) or as `Date` objects.\n     *\n     * ```ts\n     * using file = await Deno.open(\"file.txt\", { create: true, write: true });\n     * await file.utime(1556495550, new Date());\n     * ```\n     *\n     * @category File System\n     */\n    utime(atime: number | Date, mtime: number | Date): Promise<void>;\n    /**\n     * Synchronously changes the access (`atime`) and modification (`mtime`)\n     * times of the file stream resource. Given times are either in seconds\n     * (UNIX epoch time) or as `Date` objects.\n     *\n     * ```ts\n     * using file = Deno.openSync(\"file.txt\", { create: true, write: true });\n     * file.utime(1556495550, new Date());\n     * ```\n     *\n     * @category File System\n     */\n    utimeSync(atime: number | Date, mtime: number | Date): void;\n    /** **UNSTABLE**: New API, yet to be vetted.\n     *\n     * Checks if the file resource is a TTY (terminal).\n     *\n     * ```ts\n     * // This example is system and context specific\n     * using file = await Deno.open(\"/dev/tty6\");\n     * file.isTerminal(); // true\n     * ```\n     */\n    isTerminal(): boolean;\n    /** **UNSTABLE**: New API, yet to be vetted.\n     *\n     * Set TTY to be under raw mode or not. In raw mode, characters are read and\n     * returned as is, without being processed. All special processing of\n     * characters by the terminal is disabled, including echoing input\n     * characters. Reading from a TTY device in raw mode is faster than reading\n     * from a TTY device in canonical mode.\n     *\n     * ```ts\n     * using file = await Deno.open(\"/dev/tty6\");\n     * file.setRaw(true, { cbreak: true });\n     * ```\n     */\n    setRaw(mode: boolean, options?: SetRawOptions): void;\n    /**\n     * Acquire an advisory file-system lock for the file.\n     *\n     * @param [exclusive=false]\n     */\n    lock(exclusive?: boolean): Promise<void>;\n    /**\n     * Synchronously acquire an advisory file-system lock synchronously for the file.\n     *\n     * @param [exclusive=false]\n     */\n    lockSync(exclusive?: boolean): void;\n    /**\n     * Release an advisory file-system lock for the file.\n     */\n    unlock(): Promise<void>;\n    /**\n     * Synchronously release an advisory file-system lock for the file.\n     */\n    unlockSync(): void;\n    /** Close the file. Closing a file when you are finished with it is\n     * important to avoid leaking resources.\n     *\n     * ```ts\n     * using file = await Deno.open(\"my_file.txt\");\n     * // do work with \"file\" object\n     * ```\n     */\n    close(): void;\n\n    [Symbol.dispose](): void;\n  }\n\n  /**\n   * The Deno abstraction for reading and writing files.\n   *\n   * @deprecated This will be removed in Deno 2.0. See the\n   * {@link https://docs.deno.com/runtime/manual/advanced/migrate_deprecations | Deno 1.x to 2.x Migration Guide}\n   * for migration instructions.\n   *\n   * @category File System\n   */\n  export const File: typeof FsFile;\n\n  /** Gets the size of the console as columns/rows.\n   *\n   * ```ts\n   * const { columns, rows } = Deno.consoleSize();\n   * ```\n   *\n   * This returns the size of the console window as reported by the operating\n   * system. It's not a reflection of how many characters will fit within the\n   * console window, but can be used as part of that calculation.\n   *\n   * @category I/O\n   */\n  export function consoleSize(): {\n    columns: number;\n    rows: number;\n  };\n\n  /** @category I/O */\n  export interface SetRawOptions {\n    /**\n     * The `cbreak` option can be used to indicate that characters that\n     * correspond to a signal should still be generated. When disabling raw\n     * mode, this option is ignored. This functionality currently only works on\n     * Linux and Mac OS.\n     */\n    cbreak: boolean;\n  }\n\n  /** A reference to `stdin` which can be used to read directly from `stdin`.\n   * It implements the Deno specific {@linkcode Reader}, {@linkcode ReaderSync},\n   * and {@linkcode Closer} interfaces as well as provides a\n   * {@linkcode ReadableStream} interface.\n   *\n   * ### Reading chunks from the readable stream\n   *\n   * ```ts\n   * const decoder = new TextDecoder();\n   * for await (const chunk of Deno.stdin.readable) {\n   *   const text = decoder.decode(chunk);\n   *   // do something with the text\n   * }\n   * ```\n   *\n   * @category I/O\n   */\n  export const stdin: Reader & ReaderSync & Closer & {\n    /**\n     * The resource ID assigned to `stdin`. This can be used with the discrete\n     * I/O functions in the `Deno` namespace.\n     *\n     * @deprecated This will be soft-removed in Deno 2.0. See the\n     * {@link https://docs.deno.com/runtime/manual/advanced/migrate_deprecations | Deno 1.x to 2.x Migration Guide}\n     * for migration instructions.\n     */\n    readonly rid: number;\n    /** A readable stream interface to `stdin`. */\n    readonly readable: ReadableStream<Uint8Array>;\n    /**\n     * Set TTY to be under raw mode or not. In raw mode, characters are read and\n     * returned as is, without being processed. All special processing of\n     * characters by the terminal is disabled, including echoing input\n     * characters. Reading from a TTY device in raw mode is faster than reading\n     * from a TTY device in canonical mode.\n     *\n     * ```ts\n     * Deno.stdin.setRaw(true, { cbreak: true });\n     * ```\n     *\n     * @category I/O\n     */\n    setRaw(mode: boolean, options?: SetRawOptions): void;\n    /**\n     * Checks if `stdin` is a TTY (terminal).\n     *\n     * ```ts\n     * // This example is system and context specific\n     * Deno.stdin.isTerminal(); // true\n     * ```\n     *\n     * @category I/O\n     */\n    isTerminal(): boolean;\n  };\n  /** A reference to `stdout` which can be used to write directly to `stdout`.\n   * It implements the Deno specific {@linkcode Writer}, {@linkcode WriterSync},\n   * and {@linkcode Closer} interfaces as well as provides a\n   * {@linkcode WritableStream} interface.\n   *\n   * These are low level constructs, and the {@linkcode console} interface is a\n   * more straight forward way to interact with `stdout` and `stderr`.\n   *\n   * @category I/O\n   */\n  export const stdout: Writer & WriterSync & Closer & {\n    /**\n     * The resource ID assigned to `stdout`. This can be used with the discrete\n     * I/O functions in the `Deno` namespace.\n     *\n     * @deprecated This will be soft-removed in Deno 2.0. See the\n     * {@link https://docs.deno.com/runtime/manual/advanced/migrate_deprecations | Deno 1.x to 2.x Migration Guide}\n     * for migration instructions.\n     */\n    readonly rid: number;\n    /** A writable stream interface to `stdout`. */\n    readonly writable: WritableStream<Uint8Array>;\n    /**\n     * Checks if `stdout` is a TTY (terminal).\n     *\n     * ```ts\n     * // This example is system and context specific\n     * Deno.stdout.isTerminal(); // true\n     * ```\n     *\n     * @category I/O\n     */\n    isTerminal(): boolean;\n  };\n  /** A reference to `stderr` which can be used to write directly to `stderr`.\n   * It implements the Deno specific {@linkcode Writer}, {@linkcode WriterSync},\n   * and {@linkcode Closer} interfaces as well as provides a\n   * {@linkcode WritableStream} interface.\n   *\n   * These are low level constructs, and the {@linkcode console} interface is a\n   * more straight forward way to interact with `stdout` and `stderr`.\n   *\n   * @category I/O\n   */\n  export const stderr: Writer & WriterSync & Closer & {\n    /**\n     * The resource ID assigned to `stderr`. This can be used with the discrete\n     * I/O functions in the `Deno` namespace.\n     *\n     * @deprecated This will be soft-removed in Deno 2.0. See the\n     * {@link https://docs.deno.com/runtime/manual/advanced/migrate_deprecations | Deno 1.x to 2.x Migration Guide}\n     * for migration instructions.\n     */\n    readonly rid: number;\n    /** A writable stream interface to `stderr`. */\n    readonly writable: WritableStream<Uint8Array>;\n    /**\n     * Checks if `stderr` is a TTY (terminal).\n     *\n     * ```ts\n     * // This example is system and context specific\n     * Deno.stderr.isTerminal(); // true\n     * ```\n     *\n     * @category I/O\n     */\n    isTerminal(): boolean;\n  };\n\n  /**\n   * Options which can be set when doing {@linkcode Deno.open} and\n   * {@linkcode Deno.openSync}.\n   *\n   * @category File System */\n  export interface OpenOptions {\n    /** Sets the option for read access. This option, when `true`, means that\n     * the file should be read-able if opened.\n     *\n     * @default {true} */\n    read?: boolean;\n    /** Sets the option for write access. This option, when `true`, means that\n     * the file should be write-able if opened. If the file already exists,\n     * any write calls on it will overwrite its contents, by default without\n     * truncating it.\n     *\n     * @default {false} */\n    write?: boolean;\n    /** Sets the option for the append mode. This option, when `true`, means\n     * that writes will append to a file instead of overwriting previous\n     * contents.\n     *\n     * Note that setting `{ write: true, append: true }` has the same effect as\n     * setting only `{ append: true }`.\n     *\n     * @default {false} */\n    append?: boolean;\n    /** Sets the option for truncating a previous file. If a file is\n     * successfully opened with this option set it will truncate the file to `0`\n     * size if it already exists. The file must be opened with write access\n     * for truncate to work.\n     *\n     * @default {false} */\n    truncate?: boolean;\n    /** Sets the option to allow creating a new file, if one doesn't already\n     * exist at the specified path. Requires write or append access to be\n     * used.\n     *\n     * @default {false} */\n    create?: boolean;\n    /** If set to `true`, no file, directory, or symlink is allowed to exist at\n     * the target location. Requires write or append access to be used. When\n     * createNew is set to `true`, create and truncate are ignored.\n     *\n     * @default {false} */\n    createNew?: boolean;\n    /** Permissions to use if creating the file (defaults to `0o666`, before\n     * the process's umask).\n     *\n     * Ignored on Windows. */\n    mode?: number;\n  }\n\n  /**\n   * Options which can be set when using {@linkcode Deno.readFile} or\n   * {@linkcode Deno.readFileSync}.\n   *\n   * @category File System */\n  export interface ReadFileOptions {\n    /**\n     * An abort signal to allow cancellation of the file read operation.\n     * If the signal becomes aborted the readFile operation will be stopped\n     * and the promise returned will be rejected with an AbortError.\n     */\n    signal?: AbortSignal;\n  }\n\n  /**\n   *  Check if a given resource id (`rid`) is a TTY (a terminal).\n   *\n   * ```ts\n   * // This example is system and context specific\n   * const nonTTYRid = Deno.openSync(\"my_file.txt\").rid;\n   * const ttyRid = Deno.openSync(\"/dev/tty6\").rid;\n   * console.log(Deno.isatty(nonTTYRid)); // false\n   * console.log(Deno.isatty(ttyRid)); // true\n   * ```\n   *\n   * @deprecated This will be soft-removed in Deno 2.0. See the\n   * {@link https://docs.deno.com/runtime/manual/advanced/migrate_deprecations | Deno 1.x to 2.x Migration Guide}\n   * for migration instructions.\n   *\n   * @category I/O\n   */\n  export function isatty(rid: number): boolean;\n\n  /**\n   * A variable-sized buffer of bytes with `read()` and `write()` methods.\n   *\n   * @deprecated This will be removed in Deno 2.0. See the\n   * {@link https://docs.deno.com/runtime/manual/advanced/migrate_deprecations | Deno 1.x to 2.x Migration Guide}\n   * for migration instructions.\n   *\n   * @category I/O\n   */\n  export class Buffer implements Reader, ReaderSync, Writer, WriterSync {\n    constructor(ab?: ArrayBuffer);\n    /** Returns a slice holding the unread portion of the buffer.\n     *\n     * The slice is valid for use only until the next buffer modification (that\n     * is, only until the next call to a method like `read()`, `write()`,\n     * `reset()`, or `truncate()`). If `options.copy` is false the slice aliases the buffer content at\n     * least until the next buffer modification, so immediate changes to the\n     * slice will affect the result of future reads.\n     * @param options Defaults to `{ copy: true }`\n     */\n    bytes(options?: { copy?: boolean }): Uint8Array;\n    /** Returns whether the unread portion of the buffer is empty. */\n    empty(): boolean;\n    /** A read only number of bytes of the unread portion of the buffer. */\n    readonly length: number;\n    /** The read only capacity of the buffer's underlying byte slice, that is,\n     * the total space allocated for the buffer's data. */\n    readonly capacity: number;\n    /** Discards all but the first `n` unread bytes from the buffer but\n     * continues to use the same allocated storage. It throws if `n` is\n     * negative or greater than the length of the buffer. */\n    truncate(n: number): void;\n    /** Resets the buffer to be empty, but it retains the underlying storage for\n     * use by future writes. `.reset()` is the same as `.truncate(0)`. */\n    reset(): void;\n    /** Reads the next `p.length` bytes from the buffer or until the buffer is\n     * drained. Returns the number of bytes read. If the buffer has no data to\n     * return, the return is EOF (`null`). */\n    readSync(p: Uint8Array): number | null;\n    /** Reads the next `p.length` bytes from the buffer or until the buffer is\n     * drained. Resolves to the number of bytes read. If the buffer has no\n     * data to return, resolves to EOF (`null`).\n     *\n     * NOTE: This methods reads bytes synchronously; it's provided for\n     * compatibility with `Reader` interfaces.\n     */\n    read(p: Uint8Array): Promise<number | null>;\n    writeSync(p: Uint8Array): number;\n    /** NOTE: This methods writes bytes synchronously; it's provided for\n     * compatibility with `Writer` interface. */\n    write(p: Uint8Array): Promise<number>;\n    /** Grows the buffer's capacity, if necessary, to guarantee space for\n     * another `n` bytes. After `.grow(n)`, at least `n` bytes can be written to\n     * the buffer without another allocation. If `n` is negative, `.grow()` will\n     * throw. If the buffer can't grow it will throw an error.\n     *\n     * Based on Go Lang's\n     * [Buffer.Grow](https://golang.org/pkg/bytes/#Buffer.Grow). */\n    grow(n: number): void;\n    /** Reads data from `r` until EOF (`null`) and appends it to the buffer,\n     * growing the buffer as needed. It resolves to the number of bytes read.\n     * If the buffer becomes too large, `.readFrom()` will reject with an error.\n     *\n     * Based on Go Lang's\n     * [Buffer.ReadFrom](https://golang.org/pkg/bytes/#Buffer.ReadFrom). */\n    readFrom(r: Reader): Promise<number>;\n    /** Reads data from `r` until EOF (`null`) and appends it to the buffer,\n     * growing the buffer as needed. It returns the number of bytes read. If the\n     * buffer becomes too large, `.readFromSync()` will throw an error.\n     *\n     * Based on Go Lang's\n     * [Buffer.ReadFrom](https://golang.org/pkg/bytes/#Buffer.ReadFrom). */\n    readFromSync(r: ReaderSync): number;\n  }\n\n  /**\n   * Read Reader `r` until EOF (`null`) and resolve to the content as\n   * Uint8Array`.\n   *\n   * @deprecated This will be removed in Deno 2.0. See the\n   * {@link https://docs.deno.com/runtime/manual/advanced/migrate_deprecations | Deno 1.x to 2.x Migration Guide}\n   * for migration instructions.\n   *\n   * @category I/O\n   */\n  export function readAll(r: Reader): Promise<Uint8Array>;\n\n  /**\n   * Synchronously reads Reader `r` until EOF (`null`) and returns the content\n   * as `Uint8Array`.\n   *\n   * @deprecated This will be removed in Deno 2.0. See the\n   * {@link https://docs.deno.com/runtime/manual/advanced/migrate_deprecations | Deno 1.x to 2.x Migration Guide}\n   * for migration instructions.\n   *\n   * @category I/O\n   */\n  export function readAllSync(r: ReaderSync): Uint8Array;\n\n  /**\n   * Write all the content of the array buffer (`arr`) to the writer (`w`).\n   *\n   * @deprecated This will be removed in Deno 2.0. See the\n   * {@link https://docs.deno.com/runtime/manual/advanced/migrate_deprecations | Deno 1.x to 2.x Migration Guide}\n   * for migration instructions.\n   *\n   * @category I/O\n   */\n  export function writeAll(w: Writer, arr: Uint8Array): Promise<void>;\n\n  /**\n   * Synchronously write all the content of the array buffer (`arr`) to the\n   * writer (`w`).\n   *\n   * @deprecated This will be removed in Deno 2.0. See the\n   * {@link https://docs.deno.com/runtime/manual/advanced/migrate_deprecations | Deno 1.x to 2.x Migration Guide}\n   * for migration instructions.\n   *\n   * @category I/O\n   */\n  export function writeAllSync(w: WriterSync, arr: Uint8Array): void;\n\n  /**\n   * Options which can be set when using {@linkcode Deno.mkdir} and\n   * {@linkcode Deno.mkdirSync}.\n   *\n   * @category File System */\n  export interface MkdirOptions {\n    /** If set to `true`, means that any intermediate directories will also be\n     * created (as with the shell command `mkdir -p`).\n     *\n     * Intermediate directories are created with the same permissions.\n     *\n     * When recursive is set to `true`, succeeds silently (without changing any\n     * permissions) if a directory already exists at the path, or if the path\n     * is a symlink to an existing directory.\n     *\n     * @default {false} */\n    recursive?: boolean;\n    /** Permissions to use when creating the directory (defaults to `0o777`,\n     * before the process's umask).\n     *\n     * Ignored on Windows. */\n    mode?: number;\n  }\n\n  /** Creates a new directory with the specified path.\n   *\n   * ```ts\n   * await Deno.mkdir(\"new_dir\");\n   * await Deno.mkdir(\"nested/directories\", { recursive: true });\n   * await Deno.mkdir(\"restricted_access_dir\", { mode: 0o700 });\n   * ```\n   *\n   * Defaults to throwing error if the directory already exists.\n   *\n   * Requires `allow-write` permission.\n   *\n   * @tags allow-write\n   * @category File System\n   */\n  export function mkdir(\n    path: string | URL,\n    options?: MkdirOptions,\n  ): Promise<void>;\n\n  /** Synchronously creates a new directory with the specified path.\n   *\n   * ```ts\n   * Deno.mkdirSync(\"new_dir\");\n   * Deno.mkdirSync(\"nested/directories\", { recursive: true });\n   * Deno.mkdirSync(\"restricted_access_dir\", { mode: 0o700 });\n   * ```\n   *\n   * Defaults to throwing error if the directory already exists.\n   *\n   * Requires `allow-write` permission.\n   *\n   * @tags allow-write\n   * @category File System\n   */\n  export function mkdirSync(path: string | URL, options?: MkdirOptions): void;\n\n  /**\n   * Options which can be set when using {@linkcode Deno.makeTempDir},\n   * {@linkcode Deno.makeTempDirSync}, {@linkcode Deno.makeTempFile}, and\n   * {@linkcode Deno.makeTempFileSync}.\n   *\n   * @category File System */\n  export interface MakeTempOptions {\n    /** Directory where the temporary directory should be created (defaults to\n     * the env variable `TMPDIR`, or the system's default, usually `/tmp`).\n     *\n     * Note that if the passed `dir` is relative, the path returned by\n     * `makeTempFile()` and `makeTempDir()` will also be relative. Be mindful of\n     * this when changing working directory. */\n    dir?: string;\n    /** String that should precede the random portion of the temporary\n     * directory's name. */\n    prefix?: string;\n    /** String that should follow the random portion of the temporary\n     * directory's name. */\n    suffix?: string;\n  }\n\n  /** Creates a new temporary directory in the default directory for temporary\n   * files, unless `dir` is specified. Other optional options include\n   * prefixing and suffixing the directory name with `prefix` and `suffix`\n   * respectively.\n   *\n   * This call resolves to the full path to the newly created directory.\n   *\n   * Multiple programs calling this function simultaneously will create different\n   * directories. It is the caller's responsibility to remove the directory when\n   * no longer needed.\n   *\n   * ```ts\n   * const tempDirName0 = await Deno.makeTempDir();  // e.g. /tmp/2894ea76\n   * const tempDirName1 = await Deno.makeTempDir({ prefix: 'my_temp' }); // e.g. /tmp/my_temp339c944d\n   * ```\n   *\n   * Requires `allow-write` permission.\n   *\n   * @tags allow-write\n   * @category File System\n   */\n  // TODO(ry) Doesn't check permissions.\n  export function makeTempDir(options?: MakeTempOptions): Promise<string>;\n\n  /** Synchronously creates a new temporary directory in the default directory\n   * for temporary files, unless `dir` is specified. Other optional options\n   * include prefixing and suffixing the directory name with `prefix` and\n   * `suffix` respectively.\n   *\n   * The full path to the newly created directory is returned.\n   *\n   * Multiple programs calling this function simultaneously will create different\n   * directories. It is the caller's responsibility to remove the directory when\n   * no longer needed.\n   *\n   * ```ts\n   * const tempDirName0 = Deno.makeTempDirSync();  // e.g. /tmp/2894ea76\n   * const tempDirName1 = Deno.makeTempDirSync({ prefix: 'my_temp' });  // e.g. /tmp/my_temp339c944d\n   * ```\n   *\n   * Requires `allow-write` permission.\n   *\n   * @tags allow-write\n   * @category File System\n   */\n  // TODO(ry) Doesn't check permissions.\n  export function makeTempDirSync(options?: MakeTempOptions): string;\n\n  /** Creates a new temporary file in the default directory for temporary\n   * files, unless `dir` is specified.\n   *\n   * Other options include prefixing and suffixing the directory name with\n   * `prefix` and `suffix` respectively.\n   *\n   * This call resolves to the full path to the newly created file.\n   *\n   * Multiple programs calling this function simultaneously will create\n   * different files. It is the caller's responsibility to remove the file when\n   * no longer needed.\n   *\n   * ```ts\n   * const tmpFileName0 = await Deno.makeTempFile();  // e.g. /tmp/419e0bf2\n   * const tmpFileName1 = await Deno.makeTempFile({ prefix: 'my_temp' });  // e.g. /tmp/my_temp754d3098\n   * ```\n   *\n   * Requires `allow-write` permission.\n   *\n   * @tags allow-write\n   * @category File System\n   */\n  export function makeTempFile(options?: MakeTempOptions): Promise<string>;\n\n  /** Synchronously creates a new temporary file in the default directory for\n   * temporary files, unless `dir` is specified.\n   *\n   * Other options include prefixing and suffixing the directory name with\n   * `prefix` and `suffix` respectively.\n   *\n   * The full path to the newly created file is returned.\n   *\n   * Multiple programs calling this function simultaneously will create\n   * different files. It is the caller's responsibility to remove the file when\n   * no longer needed.\n   *\n   * ```ts\n   * const tempFileName0 = Deno.makeTempFileSync(); // e.g. /tmp/419e0bf2\n   * const tempFileName1 = Deno.makeTempFileSync({ prefix: 'my_temp' });  // e.g. /tmp/my_temp754d3098\n   * ```\n   *\n   * Requires `allow-write` permission.\n   *\n   * @tags allow-write\n   * @category File System\n   */\n  export function makeTempFileSync(options?: MakeTempOptions): string;\n\n  /** Changes the permission of a specific file/directory of specified path.\n   * Ignores the process's umask.\n   *\n   * ```ts\n   * await Deno.chmod(\"/path/to/file\", 0o666);\n   * ```\n   *\n   * The mode is a sequence of 3 octal numbers. The first/left-most number\n   * specifies the permissions for the owner. The second number specifies the\n   * permissions for the group. The last/right-most number specifies the\n   * permissions for others. For example, with a mode of 0o764, the owner (7)\n   * can read/write/execute, the group (6) can read/write and everyone else (4)\n   * can read only.\n   *\n   * | Number | Description |\n   * | ------ | ----------- |\n   * | 7      | read, write, and execute |\n   * | 6      | read and write |\n   * | 5      | read and execute |\n   * | 4      | read only |\n   * | 3      | write and execute |\n   * | 2      | write only |\n   * | 1      | execute only |\n   * | 0      | no permission |\n   *\n   * NOTE: This API currently throws on Windows\n   *\n   * Requires `allow-write` permission.\n   *\n   * @tags allow-write\n   * @category File System\n   */\n  export function chmod(path: string | URL, mode: number): Promise<void>;\n\n  /** Synchronously changes the permission of a specific file/directory of\n   * specified path. Ignores the process's umask.\n   *\n   * ```ts\n   * Deno.chmodSync(\"/path/to/file\", 0o666);\n   * ```\n   *\n   * For a full description, see {@linkcode Deno.chmod}.\n   *\n   * NOTE: This API currently throws on Windows\n   *\n   * Requires `allow-write` permission.\n   *\n   * @tags allow-write\n   * @category File System\n   */\n  export function chmodSync(path: string | URL, mode: number): void;\n\n  /** Change owner of a regular file or directory.\n   *\n   * This functionality is not available on Windows.\n   *\n   * ```ts\n   * await Deno.chown(\"myFile.txt\", 1000, 1002);\n   * ```\n   *\n   * Requires `allow-write` permission.\n   *\n   * Throws Error (not implemented) if executed on Windows.\n   *\n   * @tags allow-write\n   * @category File System\n   *\n   * @param path path to the file\n   * @param uid user id (UID) of the new owner, or `null` for no change\n   * @param gid group id (GID) of the new owner, or `null` for no change\n   */\n  export function chown(\n    path: string | URL,\n    uid: number | null,\n    gid: number | null,\n  ): Promise<void>;\n\n  /** Synchronously change owner of a regular file or directory.\n   *\n   * This functionality is not available on Windows.\n   *\n   * ```ts\n   * Deno.chownSync(\"myFile.txt\", 1000, 1002);\n   * ```\n   *\n   * Requires `allow-write` permission.\n   *\n   * Throws Error (not implemented) if executed on Windows.\n   *\n   * @tags allow-write\n   * @category File System\n   *\n   * @param path path to the file\n   * @param uid user id (UID) of the new owner, or `null` for no change\n   * @param gid group id (GID) of the new owner, or `null` for no change\n   */\n  export function chownSync(\n    path: string | URL,\n    uid: number | null,\n    gid: number | null,\n  ): void;\n\n  /**\n   * Options which can be set when using {@linkcode Deno.remove} and\n   * {@linkcode Deno.removeSync}.\n   *\n   * @category File System */\n  export interface RemoveOptions {\n    /** If set to `true`, path will be removed even if it's a non-empty directory.\n     *\n     * @default {false} */\n    recursive?: boolean;\n  }\n\n  /** Removes the named file or directory.\n   *\n   * ```ts\n   * await Deno.remove(\"/path/to/empty_dir/or/file\");\n   * await Deno.remove(\"/path/to/populated_dir/or/file\", { recursive: true });\n   * ```\n   *\n   * Throws error if permission denied, path not found, or path is a non-empty\n   * directory and the `recursive` option isn't set to `true`.\n   *\n   * Requires `allow-write` permission.\n   *\n   * @tags allow-write\n   * @category File System\n   */\n  export function remove(\n    path: string | URL,\n    options?: RemoveOptions,\n  ): Promise<void>;\n\n  /** Synchronously removes the named file or directory.\n   *\n   * ```ts\n   * Deno.removeSync(\"/path/to/empty_dir/or/file\");\n   * Deno.removeSync(\"/path/to/populated_dir/or/file\", { recursive: true });\n   * ```\n   *\n   * Throws error if permission denied, path not found, or path is a non-empty\n   * directory and the `recursive` option isn't set to `true`.\n   *\n   * Requires `allow-write` permission.\n   *\n   * @tags allow-write\n   * @category File System\n   */\n  export function removeSync(path: string | URL, options?: RemoveOptions): void;\n\n  /** Synchronously renames (moves) `oldpath` to `newpath`. Paths may be files or\n   * directories. If `newpath` already exists and is not a directory,\n   * `renameSync()` replaces it. OS-specific restrictions may apply when\n   * `oldpath` and `newpath` are in different directories.\n   *\n   * ```ts\n   * Deno.renameSync(\"old/path\", \"new/path\");\n   * ```\n   *\n   * On Unix-like OSes, this operation does not follow symlinks at either path.\n   *\n   * It varies between platforms when the operation throws errors, and if so what\n   * they are. It's always an error to rename anything to a non-empty directory.\n   *\n   * Requires `allow-read` and `allow-write` permissions.\n   *\n   * @tags allow-read, allow-write\n   * @category File System\n   */\n  export function renameSync(\n    oldpath: string | URL,\n    newpath: string | URL,\n  ): void;\n\n  /** Renames (moves) `oldpath` to `newpath`. Paths may be files or directories.\n   * If `newpath` already exists and is not a directory, `rename()` replaces it.\n   * OS-specific restrictions may apply when `oldpath` and `newpath` are in\n   * different directories.\n   *\n   * ```ts\n   * await Deno.rename(\"old/path\", \"new/path\");\n   * ```\n   *\n   * On Unix-like OSes, this operation does not follow symlinks at either path.\n   *\n   * It varies between platforms when the operation throws errors, and if so\n   * what they are. It's always an error to rename anything to a non-empty\n   * directory.\n   *\n   * Requires `allow-read` and `allow-write` permissions.\n   *\n   * @tags allow-read, allow-write\n   * @category File System\n   */\n  export function rename(\n    oldpath: string | URL,\n    newpath: string | URL,\n  ): Promise<void>;\n\n  /** Asynchronously reads and returns the entire contents of a file as an UTF-8\n   *  decoded string. Reading a directory throws an error.\n   *\n   * ```ts\n   * const data = await Deno.readTextFile(\"hello.txt\");\n   * console.log(data);\n   * ```\n   *\n   * Requires `allow-read` permission.\n   *\n   * @tags allow-read\n   * @category File System\n   */\n  export function readTextFile(\n    path: string | URL,\n    options?: ReadFileOptions,\n  ): Promise<string>;\n\n  /** Synchronously reads and returns the entire contents of a file as an UTF-8\n   *  decoded string. Reading a directory throws an error.\n   *\n   * ```ts\n   * const data = Deno.readTextFileSync(\"hello.txt\");\n   * console.log(data);\n   * ```\n   *\n   * Requires `allow-read` permission.\n   *\n   * @tags allow-read\n   * @category File System\n   */\n  export function readTextFileSync(path: string | URL): string;\n\n  /** Reads and resolves to the entire contents of a file as an array of bytes.\n   * `TextDecoder` can be used to transform the bytes to string if required.\n   * Reading a directory returns an empty data array.\n   *\n   * ```ts\n   * const decoder = new TextDecoder(\"utf-8\");\n   * const data = await Deno.readFile(\"hello.txt\");\n   * console.log(decoder.decode(data));\n   * ```\n   *\n   * Requires `allow-read` permission.\n   *\n   * @tags allow-read\n   * @category File System\n   */\n  export function readFile(\n    path: string | URL,\n    options?: ReadFileOptions,\n  ): Promise<Uint8Array>;\n\n  /** Synchronously reads and returns the entire contents of a file as an array\n   * of bytes. `TextDecoder` can be used to transform the bytes to string if\n   * required. Reading a directory returns an empty data array.\n   *\n   * ```ts\n   * const decoder = new TextDecoder(\"utf-8\");\n   * const data = Deno.readFileSync(\"hello.txt\");\n   * console.log(decoder.decode(data));\n   * ```\n   *\n   * Requires `allow-read` permission.\n   *\n   * @tags allow-read\n   * @category File System\n   */\n  export function readFileSync(path: string | URL): Uint8Array;\n\n  /** Provides information about a file and is returned by\n   * {@linkcode Deno.stat}, {@linkcode Deno.lstat}, {@linkcode Deno.statSync},\n   * and {@linkcode Deno.lstatSync} or from calling `stat()` and `statSync()`\n   * on an {@linkcode Deno.FsFile} instance.\n   *\n   * @category File System\n   */\n  export interface FileInfo {\n    /** True if this is info for a regular file. Mutually exclusive to\n     * `FileInfo.isDirectory` and `FileInfo.isSymlink`. */\n    isFile: boolean;\n    /** True if this is info for a regular directory. Mutually exclusive to\n     * `FileInfo.isFile` and `FileInfo.isSymlink`. */\n    isDirectory: boolean;\n    /** True if this is info for a symlink. Mutually exclusive to\n     * `FileInfo.isFile` and `FileInfo.isDirectory`. */\n    isSymlink: boolean;\n    /** The size of the file, in bytes. */\n    size: number;\n    /** The last modification time of the file. This corresponds to the `mtime`\n     * field from `stat` on Linux/Mac OS and `ftLastWriteTime` on Windows. This\n     * may not be available on all platforms. */\n    mtime: Date | null;\n    /** The last access time of the file. This corresponds to the `atime`\n     * field from `stat` on Unix and `ftLastAccessTime` on Windows. This may not\n     * be available on all platforms. */\n    atime: Date | null;\n    /** The creation time of the file. This corresponds to the `birthtime`\n     * field from `stat` on Mac/BSD and `ftCreationTime` on Windows. This may\n     * not be available on all platforms. */\n    birthtime: Date | null;\n    /** ID of the device containing the file. */\n    dev: number;\n    /** Inode number.\n     *\n     * _Linux/Mac OS only._ */\n    ino: number | null;\n    /** The underlying raw `st_mode` bits that contain the standard Unix\n     * permissions for this file/directory.\n     *\n     * _Linux/Mac OS only._ */\n    mode: number | null;\n    /** Number of hard links pointing to this file.\n     *\n     * _Linux/Mac OS only._ */\n    nlink: number | null;\n    /** User ID of the owner of this file.\n     *\n     * _Linux/Mac OS only._ */\n    uid: number | null;\n    /** Group ID of the owner of this file.\n     *\n     * _Linux/Mac OS only._ */\n    gid: number | null;\n    /** Device ID of this file.\n     *\n     * _Linux/Mac OS only._ */\n    rdev: number | null;\n    /** Blocksize for filesystem I/O.\n     *\n     * _Linux/Mac OS only._ */\n    blksize: number | null;\n    /** Number of blocks allocated to the file, in 512-byte units.\n     *\n     * _Linux/Mac OS only._ */\n    blocks: number | null;\n    /**  True if this is info for a block device.\n     *\n     * _Linux/Mac OS only._ */\n    isBlockDevice: boolean | null;\n    /**  True if this is info for a char device.\n     *\n     * _Linux/Mac OS only._ */\n    isCharDevice: boolean | null;\n    /**  True if this is info for a fifo.\n     *\n     * _Linux/Mac OS only._ */\n    isFifo: boolean | null;\n    /**  True if this is info for a socket.\n     *\n     * _Linux/Mac OS only._ */\n    isSocket: boolean | null;\n  }\n\n  /** Resolves to the absolute normalized path, with symbolic links resolved.\n   *\n   * ```ts\n   * // e.g. given /home/alice/file.txt and current directory /home/alice\n   * await Deno.symlink(\"file.txt\", \"symlink_file.txt\");\n   * const realPath = await Deno.realPath(\"./file.txt\");\n   * const realSymLinkPath = await Deno.realPath(\"./symlink_file.txt\");\n   * console.log(realPath);  // outputs \"/home/alice/file.txt\"\n   * console.log(realSymLinkPath);  // outputs \"/home/alice/file.txt\"\n   * ```\n   *\n   * Requires `allow-read` permission for the target path.\n   *\n   * Also requires `allow-read` permission for the `CWD` if the target path is\n   * relative.\n   *\n   * @tags allow-read\n   * @category File System\n   */\n  export function realPath(path: string | URL): Promise<string>;\n\n  /** Synchronously returns absolute normalized path, with symbolic links\n   * resolved.\n   *\n   * ```ts\n   * // e.g. given /home/alice/file.txt and current directory /home/alice\n   * Deno.symlinkSync(\"file.txt\", \"symlink_file.txt\");\n   * const realPath = Deno.realPathSync(\"./file.txt\");\n   * const realSymLinkPath = Deno.realPathSync(\"./symlink_file.txt\");\n   * console.log(realPath);  // outputs \"/home/alice/file.txt\"\n   * console.log(realSymLinkPath);  // outputs \"/home/alice/file.txt\"\n   * ```\n   *\n   * Requires `allow-read` permission for the target path.\n   *\n   * Also requires `allow-read` permission for the `CWD` if the target path is\n   * relative.\n   *\n   * @tags allow-read\n   * @category File System\n   */\n  export function realPathSync(path: string | URL): string;\n\n  /**\n   * Information about a directory entry returned from {@linkcode Deno.readDir}\n   * and {@linkcode Deno.readDirSync}.\n   *\n   * @category File System */\n  export interface DirEntry {\n    /** The file name of the entry. It is just the entity name and does not\n     * include the full path. */\n    name: string;\n    /** True if this is info for a regular file. Mutually exclusive to\n     * `DirEntry.isDirectory` and `DirEntry.isSymlink`. */\n    isFile: boolean;\n    /** True if this is info for a regular directory. Mutually exclusive to\n     * `DirEntry.isFile` and `DirEntry.isSymlink`. */\n    isDirectory: boolean;\n    /** True if this is info for a symlink. Mutually exclusive to\n     * `DirEntry.isFile` and `DirEntry.isDirectory`. */\n    isSymlink: boolean;\n  }\n\n  /** Reads the directory given by `path` and returns an async iterable of\n   * {@linkcode Deno.DirEntry}. The order of entries is not guaranteed.\n   *\n   * ```ts\n   * for await (const dirEntry of Deno.readDir(\"/\")) {\n   *   console.log(dirEntry.name);\n   * }\n   * ```\n   *\n   * Throws error if `path` is not a directory.\n   *\n   * Requires `allow-read` permission.\n   *\n   * @tags allow-read\n   * @category File System\n   */\n  export function readDir(path: string | URL): AsyncIterable<DirEntry>;\n\n  /** Synchronously reads the directory given by `path` and returns an iterable\n   * of {@linkcode Deno.DirEntry}. The order of entries is not guaranteed.\n   *\n   * ```ts\n   * for (const dirEntry of Deno.readDirSync(\"/\")) {\n   *   console.log(dirEntry.name);\n   * }\n   * ```\n   *\n   * Throws error if `path` is not a directory.\n   *\n   * Requires `allow-read` permission.\n   *\n   * @tags allow-read\n   * @category File System\n   */\n  export function readDirSync(path: string | URL): Iterable<DirEntry>;\n\n  /** Copies the contents and permissions of one file to another specified path,\n   * by default creating a new file if needed, else overwriting. Fails if target\n   * path is a directory or is unwritable.\n   *\n   * ```ts\n   * await Deno.copyFile(\"from.txt\", \"to.txt\");\n   * ```\n   *\n   * Requires `allow-read` permission on `fromPath`.\n   *\n   * Requires `allow-write` permission on `toPath`.\n   *\n   * @tags allow-read, allow-write\n   * @category File System\n   */\n  export function copyFile(\n    fromPath: string | URL,\n    toPath: string | URL,\n  ): Promise<void>;\n\n  /** Synchronously copies the contents and permissions of one file to another\n   * specified path, by default creating a new file if needed, else overwriting.\n   * Fails if target path is a directory or is unwritable.\n   *\n   * ```ts\n   * Deno.copyFileSync(\"from.txt\", \"to.txt\");\n   * ```\n   *\n   * Requires `allow-read` permission on `fromPath`.\n   *\n   * Requires `allow-write` permission on `toPath`.\n   *\n   * @tags allow-read, allow-write\n   * @category File System\n   */\n  export function copyFileSync(\n    fromPath: string | URL,\n    toPath: string | URL,\n  ): void;\n\n  /** Resolves to the full path destination of the named symbolic link.\n   *\n   * ```ts\n   * await Deno.symlink(\"./test.txt\", \"./test_link.txt\");\n   * const target = await Deno.readLink(\"./test_link.txt\"); // full path of ./test.txt\n   * ```\n   *\n   * Throws TypeError if called with a hard link.\n   *\n   * Requires `allow-read` permission.\n   *\n   * @tags allow-read\n   * @category File System\n   */\n  export function readLink(path: string | URL): Promise<string>;\n\n  /** Synchronously returns the full path destination of the named symbolic\n   * link.\n   *\n   * ```ts\n   * Deno.symlinkSync(\"./test.txt\", \"./test_link.txt\");\n   * const target = Deno.readLinkSync(\"./test_link.txt\"); // full path of ./test.txt\n   * ```\n   *\n   * Throws TypeError if called with a hard link.\n   *\n   * Requires `allow-read` permission.\n   *\n   * @tags allow-read\n   * @category File System\n   */\n  export function readLinkSync(path: string | URL): string;\n\n  /** Resolves to a {@linkcode Deno.FileInfo} for the specified `path`. If\n   * `path` is a symlink, information for the symlink will be returned instead\n   * of what it points to.\n   *\n   * ```ts\n   * import { assert } from \"jsr:@std/assert\";\n   * const fileInfo = await Deno.lstat(\"hello.txt\");\n   * assert(fileInfo.isFile);\n   * ```\n   *\n   * Requires `allow-read` permission.\n   *\n   * @tags allow-read\n   * @category File System\n   */\n  export function lstat(path: string | URL): Promise<FileInfo>;\n\n  /** Synchronously returns a {@linkcode Deno.FileInfo} for the specified\n   * `path`. If `path` is a symlink, information for the symlink will be\n   * returned instead of what it points to.\n   *\n   * ```ts\n   * import { assert } from \"jsr:@std/assert\";\n   * const fileInfo = Deno.lstatSync(\"hello.txt\");\n   * assert(fileInfo.isFile);\n   * ```\n   *\n   * Requires `allow-read` permission.\n   *\n   * @tags allow-read\n   * @category File System\n   */\n  export function lstatSync(path: string | URL): FileInfo;\n\n  /** Resolves to a {@linkcode Deno.FileInfo} for the specified `path`. Will\n   * always follow symlinks.\n   *\n   * ```ts\n   * import { assert } from \"jsr:@std/assert\";\n   * const fileInfo = await Deno.stat(\"hello.txt\");\n   * assert(fileInfo.isFile);\n   * ```\n   *\n   * Requires `allow-read` permission.\n   *\n   * @tags allow-read\n   * @category File System\n   */\n  export function stat(path: string | URL): Promise<FileInfo>;\n\n  /** Synchronously returns a {@linkcode Deno.FileInfo} for the specified\n   * `path`. Will always follow symlinks.\n   *\n   * ```ts\n   * import { assert } from \"jsr:@std/assert\";\n   * const fileInfo = Deno.statSync(\"hello.txt\");\n   * assert(fileInfo.isFile);\n   * ```\n   *\n   * Requires `allow-read` permission.\n   *\n   * @tags allow-read\n   * @category File System\n   */\n  export function statSync(path: string | URL): FileInfo;\n\n  /** Options for writing to a file.\n   *\n   * @category File System\n   */\n  export interface WriteFileOptions {\n    /** If set to `true`, will append to a file instead of overwriting previous\n     * contents.\n     *\n     * @default {false} */\n    append?: boolean;\n    /** Sets the option to allow creating a new file, if one doesn't already\n     * exist at the specified path.\n     *\n     * @default {true} */\n    create?: boolean;\n    /** If set to `true`, no file, directory, or symlink is allowed to exist at\n     * the target location. When createNew is set to `true`, `create` is ignored.\n     *\n     * @default {false} */\n    createNew?: boolean;\n    /** Permissions always applied to file. */\n    mode?: number;\n    /** An abort signal to allow cancellation of the file write operation.\n     *\n     * If the signal becomes aborted the write file operation will be stopped\n     * and the promise returned will be rejected with an {@linkcode AbortError}.\n     */\n    signal?: AbortSignal;\n  }\n\n  /** Write `data` to the given `path`, by default creating a new file if\n   * needed, else overwriting.\n   *\n   * ```ts\n   * const encoder = new TextEncoder();\n   * const data = encoder.encode(\"Hello world\\n\");\n   * await Deno.writeFile(\"hello1.txt\", data);  // overwrite \"hello1.txt\" or create it\n   * await Deno.writeFile(\"hello2.txt\", data, { create: false });  // only works if \"hello2.txt\" exists\n   * await Deno.writeFile(\"hello3.txt\", data, { mode: 0o777 });  // set permissions on new file\n   * await Deno.writeFile(\"hello4.txt\", data, { append: true });  // add data to the end of the file\n   * ```\n   *\n   * Requires `allow-write` permission, and `allow-read` if `options.create` is\n   * `false`.\n   *\n   * @tags allow-read, allow-write\n   * @category File System\n   */\n  export function writeFile(\n    path: string | URL,\n    data: Uint8Array | ReadableStream<Uint8Array>,\n    options?: WriteFileOptions,\n  ): Promise<void>;\n\n  /** Synchronously write `data` to the given `path`, by default creating a new\n   * file if needed, else overwriting.\n   *\n   * ```ts\n   * const encoder = new TextEncoder();\n   * const data = encoder.encode(\"Hello world\\n\");\n   * Deno.writeFileSync(\"hello1.txt\", data);  // overwrite \"hello1.txt\" or create it\n   * Deno.writeFileSync(\"hello2.txt\", data, { create: false });  // only works if \"hello2.txt\" exists\n   * Deno.writeFileSync(\"hello3.txt\", data, { mode: 0o777 });  // set permissions on new file\n   * Deno.writeFileSync(\"hello4.txt\", data, { append: true });  // add data to the end of the file\n   * ```\n   *\n   * Requires `allow-write` permission, and `allow-read` if `options.create` is\n   * `false`.\n   *\n   * @tags allow-read, allow-write\n   * @category File System\n   */\n  export function writeFileSync(\n    path: string | URL,\n    data: Uint8Array,\n    options?: WriteFileOptions,\n  ): void;\n\n  /** Write string `data` to the given `path`, by default creating a new file if\n   * needed, else overwriting.\n   *\n   * ```ts\n   * await Deno.writeTextFile(\"hello1.txt\", \"Hello world\\n\");  // overwrite \"hello1.txt\" or create it\n   * ```\n   *\n   * Requires `allow-write` permission, and `allow-read` if `options.create` is\n   * `false`.\n   *\n   * @tags allow-read, allow-write\n   * @category File System\n   */\n  export function writeTextFile(\n    path: string | URL,\n    data: string | ReadableStream<string>,\n    options?: WriteFileOptions,\n  ): Promise<void>;\n\n  /** Synchronously write string `data` to the given `path`, by default creating\n   * a new file if needed, else overwriting.\n   *\n   * ```ts\n   * Deno.writeTextFileSync(\"hello1.txt\", \"Hello world\\n\");  // overwrite \"hello1.txt\" or create it\n   * ```\n   *\n   * Requires `allow-write` permission, and `allow-read` if `options.create` is\n   * `false`.\n   *\n   * @tags allow-read, allow-write\n   * @category File System\n   */\n  export function writeTextFileSync(\n    path: string | URL,\n    data: string,\n    options?: WriteFileOptions,\n  ): void;\n\n  /** Truncates (or extends) the specified file, to reach the specified `len`.\n   * If `len` is not specified then the entire file contents are truncated.\n   *\n   * ### Truncate the entire file\n   * ```ts\n   * await Deno.truncate(\"my_file.txt\");\n   * ```\n   *\n   * ### Truncate part of the file\n   *\n   * ```ts\n   * const file = await Deno.makeTempFile();\n   * await Deno.writeTextFile(file, \"Hello World\");\n   * await Deno.truncate(file, 7);\n   * const data = await Deno.readFile(file);\n   * console.log(new TextDecoder().decode(data));  // \"Hello W\"\n   * ```\n   *\n   * Requires `allow-write` permission.\n   *\n   * @tags allow-write\n   * @category File System\n   */\n  export function truncate(name: string, len?: number): Promise<void>;\n\n  /** Synchronously truncates (or extends) the specified file, to reach the\n   * specified `len`. If `len` is not specified then the entire file contents\n   * are truncated.\n   *\n   * ### Truncate the entire file\n   *\n   * ```ts\n   * Deno.truncateSync(\"my_file.txt\");\n   * ```\n   *\n   * ### Truncate part of the file\n   *\n   * ```ts\n   * const file = Deno.makeTempFileSync();\n   * Deno.writeFileSync(file, new TextEncoder().encode(\"Hello World\"));\n   * Deno.truncateSync(file, 7);\n   * const data = Deno.readFileSync(file);\n   * console.log(new TextDecoder().decode(data));\n   * ```\n   *\n   * Requires `allow-write` permission.\n   *\n   * @tags allow-write\n   * @category File System\n   */\n  export function truncateSync(name: string, len?: number): void;\n\n  /** @category Runtime\n   *\n   * @deprecated This will be removed in Deno 2.0.\n   */\n  export interface OpMetrics {\n    opsDispatched: number;\n    opsDispatchedSync: number;\n    opsDispatchedAsync: number;\n    opsDispatchedAsyncUnref: number;\n    opsCompleted: number;\n    opsCompletedSync: number;\n    opsCompletedAsync: number;\n    opsCompletedAsyncUnref: number;\n    bytesSentControl: number;\n    bytesSentData: number;\n    bytesReceived: number;\n  }\n\n  /** @category Runtime\n   *\n   * @deprecated This will be removed in Deno 2.0.\n   */\n  export interface Metrics extends OpMetrics {\n    ops: Record<string, OpMetrics>;\n  }\n\n  /** Receive metrics from the privileged side of Deno. This is primarily used\n   * in the development of Deno. _Ops_, also called _bindings_, are the\n   * go-between between Deno JavaScript sandbox and the rest of Deno.\n   *\n   * ```shell\n   * > console.table(Deno.metrics())\n   * ┌─────────────────────────┬────────┐\n   * │         (index)         │ Values │\n   * ├─────────────────────────┼────────┤\n   * │      opsDispatched      │   3    │\n   * │    opsDispatchedSync    │   2    │\n   * │   opsDispatchedAsync    │   1    │\n   * │ opsDispatchedAsyncUnref │   0    │\n   * │      opsCompleted       │   3    │\n   * │    opsCompletedSync     │   2    │\n   * │    opsCompletedAsync    │   1    │\n   * │ opsCompletedAsyncUnref  │   0    │\n   * │    bytesSentControl     │   73   │\n   * │      bytesSentData      │   0    │\n   * │      bytesReceived      │  375   │\n   * └─────────────────────────┴────────┘\n   * ```\n   *\n   * @category Runtime\n   *\n   * @deprecated This will be removed in Deno 2.0.\n   */\n  export function metrics(): Metrics;\n\n  /**\n   * A map of open resources that Deno is tracking. The key is the resource ID\n   * (_rid_) and the value is its representation.\n   *\n   * @deprecated This will be removed in Deno 2.0.\n   *\n   * @category Runtime */\n  export interface ResourceMap {\n    [rid: number]: unknown;\n  }\n\n  /** Returns a map of open resource IDs (_rid_) along with their string\n   * representations. This is an internal API and as such resource\n   * representation has `unknown` type; that means it can change any time and\n   * should not be depended upon.\n   *\n   * ```ts\n   * console.log(Deno.resources());\n   * // { 0: \"stdin\", 1: \"stdout\", 2: \"stderr\" }\n   * Deno.openSync('../test.file');\n   * console.log(Deno.resources());\n   * // { 0: \"stdin\", 1: \"stdout\", 2: \"stderr\", 3: \"fsFile\" }\n   * ```\n   *\n   * @deprecated This will be removed in Deno 2.0.\n   *\n   * @category Runtime\n   */\n  export function resources(): ResourceMap;\n\n  /**\n   * Additional information for FsEvent objects with the \"other\" kind.\n   *\n   * - `\"rescan\"`: rescan notices indicate either a lapse in the events or a\n   *    change in the filesystem such that events received so far can no longer\n   *    be relied on to represent the state of the filesystem now. An\n   *    application that simply reacts to file changes may not care about this.\n   *    An application that keeps an in-memory representation of the filesystem\n   *    will need to care, and will need to refresh that representation directly\n   *    from the filesystem.\n   *\n   * @category File System\n   */\n  export type FsEventFlag = \"rescan\";\n\n  /**\n   * Represents a unique file system event yielded by a\n   * {@linkcode Deno.FsWatcher}.\n   *\n   * @category File System */\n  export interface FsEvent {\n    /** The kind/type of the file system event. */\n    kind: \"any\" | \"access\" | \"create\" | \"modify\" | \"remove\" | \"other\";\n    /** An array of paths that are associated with the file system event. */\n    paths: string[];\n    /** Any additional flags associated with the event. */\n    flag?: FsEventFlag;\n  }\n\n  /**\n   * Returned by {@linkcode Deno.watchFs}. It is an async iterator yielding up\n   * system events. To stop watching the file system by calling `.close()`\n   * method.\n   *\n   * @category File System\n   */\n  export interface FsWatcher extends AsyncIterable<FsEvent>, Disposable {\n    /**\n     * The resource id.\n     *\n     * @deprecated This will be removed in Deno 2.0. See the\n     * {@link https://docs.deno.com/runtime/manual/advanced/migrate_deprecations | Deno 1.x to 2.x Migration Guide}\n     * for migration instructions.\n     */\n    readonly rid: number;\n    /** Stops watching the file system and closes the watcher resource. */\n    close(): void;\n    /**\n     * Stops watching the file system and closes the watcher resource.\n     *\n     * @deprecated This will be removed in Deno 2.0. See the\n     * {@link https://docs.deno.com/runtime/manual/advanced/migrate_deprecations | Deno 1.x to 2.x Migration Guide}\n     * for migration instructions.\n     */\n    return?(value?: any): Promise<IteratorResult<FsEvent>>;\n    [Symbol.asyncIterator](): AsyncIterableIterator<FsEvent>;\n  }\n\n  /** Watch for file system events against one or more `paths`, which can be\n   * files or directories. These paths must exist already. One user action (e.g.\n   * `touch test.file`) can generate multiple file system events. Likewise,\n   * one user action can result in multiple file paths in one event (e.g. `mv\n   * old_name.txt new_name.txt`).\n   *\n   * The recursive option is `true` by default and, for directories, will watch\n   * the specified directory and all sub directories.\n   *\n   * Note that the exact ordering of the events can vary between operating\n   * systems.\n   *\n   * ```ts\n   * const watcher = Deno.watchFs(\"/\");\n   * for await (const event of watcher) {\n   *    console.log(\">>>> event\", event);\n   *    // { kind: \"create\", paths: [ \"/foo.txt\" ] }\n   * }\n   * ```\n   *\n   * Call `watcher.close()` to stop watching.\n   *\n   * ```ts\n   * const watcher = Deno.watchFs(\"/\");\n   *\n   * setTimeout(() => {\n   *   watcher.close();\n   * }, 5000);\n   *\n   * for await (const event of watcher) {\n   *    console.log(\">>>> event\", event);\n   * }\n   * ```\n   *\n   * Requires `allow-read` permission.\n   *\n   * @tags allow-read\n   * @category File System\n   */\n  export function watchFs(\n    paths: string | string[],\n    options?: { recursive: boolean },\n  ): FsWatcher;\n\n  /**\n   * Options which can be used with {@linkcode Deno.run}.\n   *\n   * @deprecated This will be removed in Deno 2.0. See the\n   * {@link https://docs.deno.com/runtime/manual/advanced/migrate_deprecations | Deno 1.x to 2.x Migration Guide}\n   * for migration instructions.\n   *\n   * @category Subprocess */\n  export interface RunOptions {\n    /** Arguments to pass.\n     *\n     * _Note_: the first element needs to be a path to the executable that is\n     * being run. */\n    cmd: readonly string[] | [string | URL, ...string[]];\n    /** The current working directory that should be used when running the\n     * sub-process. */\n    cwd?: string;\n    /** Any environment variables to be set when running the sub-process. */\n    env?: Record<string, string>;\n    /** By default subprocess inherits `stdout` of parent process. To change\n     * this this option can be set to a resource ID (_rid_) of an open file,\n     * `\"inherit\"`, `\"piped\"`, or `\"null\"`:\n     *\n     * - _number_: the resource ID of an open file/resource. This allows you to\n     *   write to a file.\n     * - `\"inherit\"`: The default if unspecified. The subprocess inherits from the\n     *   parent.\n     * - `\"piped\"`: A new pipe should be arranged to connect the parent and child\n     *   sub-process.\n     * - `\"null\"`: This stream will be ignored. This is the equivalent of attaching\n     *   the stream to `/dev/null`.\n     */\n    stdout?: \"inherit\" | \"piped\" | \"null\" | number;\n    /** By default subprocess inherits `stderr` of parent process. To change\n     * this this option can be set to a resource ID (_rid_) of an open file,\n     * `\"inherit\"`, `\"piped\"`, or `\"null\"`:\n     *\n     * - _number_: the resource ID of an open file/resource. This allows you to\n     *   write to a file.\n     * - `\"inherit\"`: The default if unspecified. The subprocess inherits from the\n     *   parent.\n     * - `\"piped\"`: A new pipe should be arranged to connect the parent and child\n     *   sub-process.\n     * - `\"null\"`: This stream will be ignored. This is the equivalent of attaching\n     *   the stream to `/dev/null`.\n     */\n    stderr?: \"inherit\" | \"piped\" | \"null\" | number;\n    /** By default subprocess inherits `stdin` of parent process. To change\n     * this this option can be set to a resource ID (_rid_) of an open file,\n     * `\"inherit\"`, `\"piped\"`, or `\"null\"`:\n     *\n     * - _number_: the resource ID of an open file/resource. This allows you to\n     *   read from a file.\n     * - `\"inherit\"`: The default if unspecified. The subprocess inherits from the\n     *   parent.\n     * - `\"piped\"`: A new pipe should be arranged to connect the parent and child\n     *   sub-process.\n     * - `\"null\"`: This stream will be ignored. This is the equivalent of attaching\n     *   the stream to `/dev/null`.\n     */\n    stdin?: \"inherit\" | \"piped\" | \"null\" | number;\n  }\n\n  /**\n   * The status resolved from the `.status()` method of a\n   * {@linkcode Deno.Process} instance.\n   *\n   * If `success` is `true`, then `code` will be `0`, but if `success` is\n   * `false`, the sub-process exit code will be set in `code`.\n   *\n   * @deprecated This will be removed in Deno 2.0. See the\n   * {@link https://docs.deno.com/runtime/manual/advanced/migrate_deprecations | Deno 1.x to 2.x Migration Guide}\n   * for migration instructions.\n   *\n   * @category Subprocess */\n  export type ProcessStatus =\n    | {\n      success: true;\n      code: 0;\n      signal?: undefined;\n    }\n    | {\n      success: false;\n      code: number;\n      signal?: number;\n    };\n\n  /**\n   * Represents an instance of a sub process that is returned from\n   * {@linkcode Deno.run} which can be used to manage the sub-process.\n   *\n   * @deprecated This will be removed in Deno 2.0. See the\n   * {@link https://docs.deno.com/runtime/manual/advanced/migrate_deprecations | Deno 1.x to 2.x Migration Guide}\n   * for migration instructions.\n   *\n   * @category Subprocess */\n  export class Process<T extends RunOptions = RunOptions> {\n    /** The resource ID of the sub-process. */\n    readonly rid: number;\n    /** The operating system's process ID for the sub-process. */\n    readonly pid: number;\n    /** A reference to the sub-processes `stdin`, which allows interacting with\n     * the sub-process at a low level. */\n    readonly stdin: T[\"stdin\"] extends \"piped\" ? Writer & Closer & {\n        writable: WritableStream<Uint8Array>;\n      }\n      : (Writer & Closer & { writable: WritableStream<Uint8Array> }) | null;\n    /** A reference to the sub-processes `stdout`, which allows interacting with\n     * the sub-process at a low level. */\n    readonly stdout: T[\"stdout\"] extends \"piped\" ? Reader & Closer & {\n        readable: ReadableStream<Uint8Array>;\n      }\n      : (Reader & Closer & { readable: ReadableStream<Uint8Array> }) | null;\n    /** A reference to the sub-processes `stderr`, which allows interacting with\n     * the sub-process at a low level. */\n    readonly stderr: T[\"stderr\"] extends \"piped\" ? Reader & Closer & {\n        readable: ReadableStream<Uint8Array>;\n      }\n      : (Reader & Closer & { readable: ReadableStream<Uint8Array> }) | null;\n    /** Wait for the process to exit and return its exit status.\n     *\n     * Calling this function multiple times will return the same status.\n     *\n     * The `stdin` reference to the process will be closed before waiting to\n     * avoid a deadlock.\n     *\n     * If `stdout` and/or `stderr` were set to `\"piped\"`, they must be closed\n     * manually before the process can exit.\n     *\n     * To run process to completion and collect output from both `stdout` and\n     * `stderr` use:\n     *\n     * ```ts\n     * const p = Deno.run({ cmd: [ \"echo\", \"hello world\" ], stderr: 'piped', stdout: 'piped' });\n     * const [status, stdout, stderr] = await Promise.all([\n     *   p.status(),\n     *   p.output(),\n     *   p.stderrOutput()\n     * ]);\n     * p.close();\n     * ```\n     */\n    status(): Promise<ProcessStatus>;\n    /** Buffer the stdout until EOF and return it as `Uint8Array`.\n     *\n     * You must set `stdout` to `\"piped\"` when creating the process.\n     *\n     * This calls `close()` on stdout after its done. */\n    output(): Promise<Uint8Array>;\n    /** Buffer the stderr until EOF and return it as `Uint8Array`.\n     *\n     * You must set `stderr` to `\"piped\"` when creating the process.\n     *\n     * This calls `close()` on stderr after its done. */\n    stderrOutput(): Promise<Uint8Array>;\n    /** Clean up resources associated with the sub-process instance. */\n    close(): void;\n    /** Send a signal to process.\n     * Default signal is `\"SIGTERM\"`.\n     *\n     * ```ts\n     * const p = Deno.run({ cmd: [ \"sleep\", \"20\" ]});\n     * p.kill(\"SIGTERM\");\n     * p.close();\n     * ```\n     */\n    kill(signo?: Signal): void;\n  }\n\n  /** Operating signals which can be listened for or sent to sub-processes. What\n   * signals and what their standard behaviors are OS dependent.\n   *\n   * @category Runtime */\n  export type Signal =\n    | \"SIGABRT\"\n    | \"SIGALRM\"\n    | \"SIGBREAK\"\n    | \"SIGBUS\"\n    | \"SIGCHLD\"\n    | \"SIGCONT\"\n    | \"SIGEMT\"\n    | \"SIGFPE\"\n    | \"SIGHUP\"\n    | \"SIGILL\"\n    | \"SIGINFO\"\n    | \"SIGINT\"\n    | \"SIGIO\"\n    | \"SIGPOLL\"\n    | \"SIGUNUSED\"\n    | \"SIGKILL\"\n    | \"SIGPIPE\"\n    | \"SIGPROF\"\n    | \"SIGPWR\"\n    | \"SIGQUIT\"\n    | \"SIGSEGV\"\n    | \"SIGSTKFLT\"\n    | \"SIGSTOP\"\n    | \"SIGSYS\"\n    | \"SIGTERM\"\n    | \"SIGTRAP\"\n    | \"SIGTSTP\"\n    | \"SIGTTIN\"\n    | \"SIGTTOU\"\n    | \"SIGURG\"\n    | \"SIGUSR1\"\n    | \"SIGUSR2\"\n    | \"SIGVTALRM\"\n    | \"SIGWINCH\"\n    | \"SIGXCPU\"\n    | \"SIGXFSZ\";\n\n  /** Registers the given function as a listener of the given signal event.\n   *\n   * ```ts\n   * Deno.addSignalListener(\n   *   \"SIGTERM\",\n   *   () => {\n   *     console.log(\"SIGTERM!\")\n   *   }\n   * );\n   * ```\n   *\n   * _Note_: On Windows only `\"SIGINT\"` (CTRL+C) and `\"SIGBREAK\"` (CTRL+Break)\n   * are supported.\n   *\n   * @category Runtime\n   */\n  export function addSignalListener(signal: Signal, handler: () => void): void;\n\n  /** Removes the given signal listener that has been registered with\n   * {@linkcode Deno.addSignalListener}.\n   *\n   * ```ts\n   * const listener = () => {\n   *   console.log(\"SIGTERM!\")\n   * };\n   * Deno.addSignalListener(\"SIGTERM\", listener);\n   * Deno.removeSignalListener(\"SIGTERM\", listener);\n   * ```\n   *\n   * _Note_: On Windows only `\"SIGINT\"` (CTRL+C) and `\"SIGBREAK\"` (CTRL+Break)\n   * are supported.\n   *\n   * @category Runtime\n   */\n  export function removeSignalListener(\n    signal: Signal,\n    handler: () => void,\n  ): void;\n\n  /**\n   * Spawns new subprocess. RunOptions must contain at a minimum the `opt.cmd`,\n   * an array of program arguments, the first of which is the binary.\n   *\n   * ```ts\n   * const p = Deno.run({\n   *   cmd: [\"curl\", \"https://example.com\"],\n   * });\n   * const status = await p.status();\n   * ```\n   *\n   * Subprocess uses same working directory as parent process unless `opt.cwd`\n   * is specified.\n   *\n   * Environmental variables from parent process can be cleared using `opt.clearEnv`.\n   * Doesn't guarantee that only `opt.env` variables are present,\n   * as the OS may set environmental variables for processes.\n   *\n   * Environmental variables for subprocess can be specified using `opt.env`\n   * mapping.\n   *\n   * `opt.uid` sets the child process’s user ID. This translates to a setuid call\n   * in the child process. Failure in the setuid call will cause the spawn to fail.\n   *\n   * `opt.gid` is similar to `opt.uid`, but sets the group ID of the child process.\n   * This has the same semantics as the uid field.\n   *\n   * By default subprocess inherits stdio of parent process. To change\n   * this this, `opt.stdin`, `opt.stdout`, and `opt.stderr` can be set\n   * independently to a resource ID (_rid_) of an open file, `\"inherit\"`,\n   * `\"piped\"`, or `\"null\"`:\n   *\n   * - _number_: the resource ID of an open file/resource. This allows you to\n   *   read or write to a file.\n   * - `\"inherit\"`: The default if unspecified. The subprocess inherits from the\n   *   parent.\n   * - `\"piped\"`: A new pipe should be arranged to connect the parent and child\n   *   sub-process.\n   * - `\"null\"`: This stream will be ignored. This is the equivalent of attaching\n   *   the stream to `/dev/null`.\n   *\n   * Details of the spawned process are returned as an instance of\n   * {@linkcode Deno.Process}.\n   *\n   * Requires `allow-run` permission.\n   *\n   * @deprecated This will be soft-removed in Deno 2.0. See the\n   * {@link https://docs.deno.com/runtime/manual/advanced/migrate_deprecations | Deno 1.x to 2.x Migration Guide}\n   * for migration instructions.\n   *\n   * @tags allow-run\n   * @category Subprocess\n   */\n  export function run<T extends RunOptions = RunOptions>(opt: T): Process<T>;\n\n  /** Create a child process.\n   *\n   * If any stdio options are not set to `\"piped\"`, accessing the corresponding\n   * field on the `Command` or its `CommandOutput` will throw a `TypeError`.\n   *\n   * If `stdin` is set to `\"piped\"`, the `stdin` {@linkcode WritableStream}\n   * needs to be closed manually.\n   *\n   * `Command` acts as a builder. Each call to {@linkcode Command.spawn} or\n   * {@linkcode Command.output} will spawn a new subprocess.\n   *\n   * @example Spawn a subprocess and pipe the output to a file\n   *\n   * ```ts\n   * const command = new Deno.Command(Deno.execPath(), {\n   *   args: [\n   *     \"eval\",\n   *     \"console.log('Hello World')\",\n   *   ],\n   *   stdin: \"piped\",\n   *   stdout: \"piped\",\n   * });\n   * const child = command.spawn();\n   *\n   * // open a file and pipe the subprocess output to it.\n   * child.stdout.pipeTo(\n   *   Deno.openSync(\"output\", { write: true, create: true }).writable,\n   * );\n   *\n   * // manually close stdin\n   * child.stdin.close();\n   * const status = await child.status;\n   * ```\n   *\n   * @example Spawn a subprocess and collect its output\n   *\n   * ```ts\n   * const command = new Deno.Command(Deno.execPath(), {\n   *   args: [\n   *     \"eval\",\n   *     \"console.log('hello'); console.error('world')\",\n   *   ],\n   * });\n   * const { code, stdout, stderr } = await command.output();\n   * console.assert(code === 0);\n   * console.assert(\"hello\\n\" === new TextDecoder().decode(stdout));\n   * console.assert(\"world\\n\" === new TextDecoder().decode(stderr));\n   * ```\n   *\n   * @example Spawn a subprocess and collect its output synchronously\n   *\n   * ```ts\n   * const command = new Deno.Command(Deno.execPath(), {\n   *   args: [\n   *     \"eval\",\n   *     \"console.log('hello'); console.error('world')\",\n   *   ],\n   * });\n   * const { code, stdout, stderr } = command.outputSync();\n   * console.assert(code === 0);\n   * console.assert(\"hello\\n\" === new TextDecoder().decode(stdout));\n   * console.assert(\"world\\n\" === new TextDecoder().decode(stderr));\n   * ```\n   *\n   * @tags allow-run\n   * @category Subprocess\n   */\n  export class Command {\n    constructor(command: string | URL, options?: CommandOptions);\n    /**\n     * Executes the {@linkcode Deno.Command}, waiting for it to finish and\n     * collecting all of its output.\n     *\n     * Will throw an error if `stdin: \"piped\"` is set.\n     *\n     * If options `stdout` or `stderr` are not set to `\"piped\"`, accessing the\n     * corresponding field on {@linkcode Deno.CommandOutput} will throw a `TypeError`.\n     */\n    output(): Promise<CommandOutput>;\n    /**\n     * Synchronously executes the {@linkcode Deno.Command}, waiting for it to\n     * finish and collecting all of its output.\n     *\n     * Will throw an error if `stdin: \"piped\"` is set.\n     *\n     * If options `stdout` or `stderr` are not set to `\"piped\"`, accessing the\n     * corresponding field on {@linkcode Deno.CommandOutput} will throw a `TypeError`.\n     */\n    outputSync(): CommandOutput;\n    /**\n     * Spawns a streamable subprocess, allowing to use the other methods.\n     */\n    spawn(): ChildProcess;\n  }\n\n  /**\n   * The interface for handling a child process returned from\n   * {@linkcode Deno.Command.spawn}.\n   *\n   * @category Subprocess\n   */\n  export class ChildProcess implements AsyncDisposable {\n    get stdin(): WritableStream<Uint8Array>;\n    get stdout(): ReadableStream<Uint8Array>;\n    get stderr(): ReadableStream<Uint8Array>;\n    readonly pid: number;\n    /** Get the status of the child. */\n    readonly status: Promise<CommandStatus>;\n\n    /** Waits for the child to exit completely, returning all its output and\n     * status. */\n    output(): Promise<CommandOutput>;\n    /** Kills the process with given {@linkcode Deno.Signal}.\n     *\n     * Defaults to `SIGTERM` if no signal is provided.\n     *\n     * @param [signo=\"SIGTERM\"]\n     */\n    kill(signo?: Signal): void;\n\n    /** Ensure that the status of the child process prevents the Deno process\n     * from exiting. */\n    ref(): void;\n    /** Ensure that the status of the child process does not block the Deno\n     * process from exiting. */\n    unref(): void;\n\n    [Symbol.asyncDispose](): Promise<void>;\n  }\n\n  /**\n   * Options which can be set when calling {@linkcode Deno.Command}.\n   *\n   * @category Subprocess\n   */\n  export interface CommandOptions {\n    /** Arguments to pass to the process. */\n    args?: string[];\n    /**\n     * The working directory of the process.\n     *\n     * If not specified, the `cwd` of the parent process is used.\n     */\n    cwd?: string | URL;\n    /**\n     * Clear environmental variables from parent process.\n     *\n     * Doesn't guarantee that only `env` variables are present, as the OS may\n     * set environmental variables for processes.\n     *\n     * @default {false}\n     */\n    clearEnv?: boolean;\n    /** Environmental variables to pass to the subprocess. */\n    env?: Record<string, string>;\n    /**\n     * Sets the child process’s user ID. This translates to a setuid call in the\n     * child process. Failure in the set uid call will cause the spawn to fail.\n     */\n    uid?: number;\n    /** Similar to `uid`, but sets the group ID of the child process. */\n    gid?: number;\n    /**\n     * An {@linkcode AbortSignal} that allows closing the process using the\n     * corresponding {@linkcode AbortController} by sending the process a\n     * SIGTERM signal.\n     *\n     * Not supported in {@linkcode Deno.Command.outputSync}.\n     */\n    signal?: AbortSignal;\n\n    /** How `stdin` of the spawned process should be handled.\n     *\n     * Defaults to `\"inherit\"` for `output` & `outputSync`,\n     * and `\"inherit\"` for `spawn`. */\n    stdin?: \"piped\" | \"inherit\" | \"null\";\n    /** How `stdout` of the spawned process should be handled.\n     *\n     * Defaults to `\"piped\"` for `output` & `outputSync`,\n     * and `\"inherit\"` for `spawn`. */\n    stdout?: \"piped\" | \"inherit\" | \"null\";\n    /** How `stderr` of the spawned process should be handled.\n     *\n     * Defaults to `\"piped\"` for `output` & `outputSync`,\n     * and `\"inherit\"` for `spawn`. */\n    stderr?: \"piped\" | \"inherit\" | \"null\";\n\n    /** Skips quoting and escaping of the arguments on windows. This option\n     * is ignored on non-windows platforms.\n     *\n     * @default {false} */\n    windowsRawArguments?: boolean;\n  }\n\n  /**\n   * @category Subprocess\n   */\n  export interface CommandStatus {\n    /** If the child process exits with a 0 status code, `success` will be set\n     * to `true`, otherwise `false`. */\n    success: boolean;\n    /** The exit code of the child process. */\n    code: number;\n    /** The signal associated with the child process. */\n    signal: Signal | null;\n  }\n\n  /**\n   * The interface returned from calling {@linkcode Deno.Command.output} or\n   * {@linkcode Deno.Command.outputSync} which represents the result of spawning the\n   * child process.\n   *\n   * @category Subprocess\n   */\n  export interface CommandOutput extends CommandStatus {\n    /** The buffered output from the child process' `stdout`. */\n    readonly stdout: Uint8Array;\n    /** The buffered output from the child process' `stderr`. */\n    readonly stderr: Uint8Array;\n  }\n\n  /** Option which can be specified when performing {@linkcode Deno.inspect}.\n   *\n   * @category I/O */\n  export interface InspectOptions {\n    /** Stylize output with ANSI colors.\n     *\n     * @default {false} */\n    colors?: boolean;\n    /** Try to fit more than one entry of a collection on the same line.\n     *\n     * @default {true} */\n    compact?: boolean;\n    /** Traversal depth for nested objects.\n     *\n     * @default {4} */\n    depth?: number;\n    /** The maximum length for an inspection to take up a single line.\n     *\n     * @default {80} */\n    breakLength?: number;\n    /** Whether or not to escape sequences.\n     *\n     * @default {true} */\n    escapeSequences?: boolean;\n    /** The maximum number of iterable entries to print.\n     *\n     * @default {100} */\n    iterableLimit?: number;\n    /** Show a Proxy's target and handler.\n     *\n     * @default {false} */\n    showProxy?: boolean;\n    /** Sort Object, Set and Map entries by key.\n     *\n     * @default {false} */\n    sorted?: boolean;\n    /** Add a trailing comma for multiline collections.\n     *\n     * @default {false} */\n    trailingComma?: boolean;\n    /** Evaluate the result of calling getters.\n     *\n     * @default {false} */\n    getters?: boolean;\n    /** Show an object's non-enumerable properties.\n     *\n     * @default {false} */\n    showHidden?: boolean;\n    /** The maximum length of a string before it is truncated with an\n     * ellipsis. */\n    strAbbreviateSize?: number;\n  }\n\n  /** Converts the input into a string that has the same format as printed by\n   * `console.log()`.\n   *\n   * ```ts\n   * const obj = {\n   *   a: 10,\n   *   b: \"hello\",\n   * };\n   * const objAsString = Deno.inspect(obj); // { a: 10, b: \"hello\" }\n   * console.log(obj);  // prints same value as objAsString, e.g. { a: 10, b: \"hello\" }\n   * ```\n   *\n   * A custom inspect functions can be registered on objects, via the symbol\n   * `Symbol.for(\"Deno.customInspect\")`, to control and customize the output\n   * of `inspect()` or when using `console` logging:\n   *\n   * ```ts\n   * class A {\n   *   x = 10;\n   *   y = \"hello\";\n   *   [Symbol.for(\"Deno.customInspect\")]() {\n   *     return `x=${this.x}, y=${this.y}`;\n   *   }\n   * }\n   *\n   * const inStringFormat = Deno.inspect(new A()); // \"x=10, y=hello\"\n   * console.log(inStringFormat);  // prints \"x=10, y=hello\"\n   * ```\n   *\n   * A depth can be specified by using the `depth` option:\n   *\n   * ```ts\n   * Deno.inspect({a: {b: {c: {d: 'hello'}}}}, {depth: 2}); // { a: { b: [Object] } }\n   * ```\n   *\n   * @category I/O\n   */\n  export function inspect(value: unknown, options?: InspectOptions): string;\n\n  /** The name of a privileged feature which needs permission.\n   *\n   * @category Permissions\n   */\n  export type PermissionName =\n    | \"run\"\n    | \"read\"\n    | \"write\"\n    | \"net\"\n    | \"env\"\n    | \"sys\"\n    | \"ffi\"\n    | \"hrtime\";\n\n  /** The current status of the permission:\n   *\n   * - `\"granted\"` - the permission has been granted.\n   * - `\"denied\"` - the permission has been explicitly denied.\n   * - `\"prompt\"` - the permission has not explicitly granted nor denied.\n   *\n   * @category Permissions\n   */\n  export type PermissionState =\n    | \"granted\"\n    | \"denied\"\n    | \"prompt\";\n\n  /** The permission descriptor for the `allow-run` and `deny-run` permissions, which controls\n   * access to what sub-processes can be executed by Deno. The option `command`\n   * allows scoping the permission to a specific executable.\n   *\n   * **Warning, in practice, `allow-run` is effectively the same as `allow-all`\n   * in the sense that malicious code could execute any arbitrary code on the\n   * host.**\n   *\n   * @category Permissions */\n  export interface RunPermissionDescriptor {\n    name: \"run\";\n    /** An `allow-run` or `deny-run` permission can be scoped to a specific executable,\n     * which would be relative to the start-up CWD of the Deno CLI. */\n    command?: string | URL;\n  }\n\n  /** The permission descriptor for the `allow-read` and `deny-read` permissions, which controls\n   * access to reading resources from the local host. The option `path` allows\n   * scoping the permission to a specific path (and if the path is a directory\n   * any sub paths).\n   *\n   * Permission granted under `allow-read` only allows runtime code to attempt\n   * to read, the underlying operating system may apply additional permissions.\n   *\n   * @category Permissions */\n  export interface ReadPermissionDescriptor {\n    name: \"read\";\n    /** An `allow-read` or `deny-read` permission can be scoped to a specific path (and if\n     * the path is a directory, any sub paths). */\n    path?: string | URL;\n  }\n\n  /** The permission descriptor for the `allow-write` and `deny-write` permissions, which\n   * controls access to writing to resources from the local host. The option\n   * `path` allow scoping the permission to a specific path (and if the path is\n   * a directory any sub paths).\n   *\n   * Permission granted under `allow-write` only allows runtime code to attempt\n   * to write, the underlying operating system may apply additional permissions.\n   *\n   * @category Permissions */\n  export interface WritePermissionDescriptor {\n    name: \"write\";\n    /** An `allow-write` or `deny-write` permission can be scoped to a specific path (and if\n     * the path is a directory, any sub paths). */\n    path?: string | URL;\n  }\n\n  /** The permission descriptor for the `allow-net` and `deny-net` permissions, which controls\n   * access to opening network ports and connecting to remote hosts via the\n   * network. The option `host` allows scoping the permission for outbound\n   * connection to a specific host and port.\n   *\n   * @category Permissions */\n  export interface NetPermissionDescriptor {\n    name: \"net\";\n    /** Optional host string of the form `\"<hostname>[:<port>]\"`. Examples:\n     *\n     *      \"github.com\"\n     *      \"deno.land:8080\"\n     */\n    host?: string;\n  }\n\n  /** The permission descriptor for the `allow-env` and `deny-env` permissions, which controls\n   * access to being able to read and write to the process environment variables\n   * as well as access other information about the environment. The option\n   * `variable` allows scoping the permission to a specific environment\n   * variable.\n   *\n   * @category Permissions */\n  export interface EnvPermissionDescriptor {\n    name: \"env\";\n    /** Optional environment variable name (e.g. `PATH`). */\n    variable?: string;\n  }\n\n  /** The permission descriptor for the `allow-sys` and `deny-sys` permissions, which controls\n   * access to sensitive host system information, which malicious code might\n   * attempt to exploit. The option `kind` allows scoping the permission to a\n   * specific piece of information.\n   *\n   * @category Permissions */\n  export interface SysPermissionDescriptor {\n    name: \"sys\";\n    /** The specific information to scope the permission to. */\n    kind?:\n      | \"loadavg\"\n      | \"hostname\"\n      | \"systemMemoryInfo\"\n      | \"networkInterfaces\"\n      | \"osRelease\"\n      | \"osUptime\"\n      | \"uid\"\n      | \"gid\"\n      | \"username\"\n      | \"cpus\"\n      | \"homedir\"\n      | \"statfs\"\n      | \"getPriority\"\n      | \"setPriority\";\n  }\n\n  /** The permission descriptor for the `allow-ffi` and `deny-ffi` permissions, which controls\n   * access to loading _foreign_ code and interfacing with it via the\n   * [Foreign Function Interface API](https://docs.deno.com/runtime/manual/runtime/ffi_api)\n   * available in Deno.  The option `path` allows scoping the permission to a\n   * specific path on the host.\n   *\n   * @category Permissions */\n  export interface FfiPermissionDescriptor {\n    name: \"ffi\";\n    /** Optional path on the local host to scope the permission to. */\n    path?: string | URL;\n  }\n\n  /** The permission descriptor for the `allow-hrtime` and `deny-hrtime` permissions, which\n   * controls if the runtime code has access to high resolution time. High\n   * resolution time is considered sensitive information, because it can be used\n   * by malicious code to gain information about the host that it might not\n   * otherwise have access to.\n   *\n   * @category Permissions */\n  export interface HrtimePermissionDescriptor {\n    name: \"hrtime\";\n  }\n\n  /** Permission descriptors which define a permission and can be queried,\n   * requested, or revoked.\n   *\n   * View the specifics of the individual descriptors for more information about\n   * each permission kind.\n   *\n   * @category Permissions\n   */\n  export type PermissionDescriptor =\n    | RunPermissionDescriptor\n    | ReadPermissionDescriptor\n    | WritePermissionDescriptor\n    | NetPermissionDescriptor\n    | EnvPermissionDescriptor\n    | SysPermissionDescriptor\n    | FfiPermissionDescriptor\n    | HrtimePermissionDescriptor;\n\n  /** The interface which defines what event types are supported by\n   * {@linkcode PermissionStatus} instances.\n   *\n   * @category Permissions */\n  export interface PermissionStatusEventMap {\n    \"change\": Event;\n  }\n\n  /** An {@linkcode EventTarget} returned from the {@linkcode Deno.permissions}\n   * API which can provide updates to any state changes of the permission.\n   *\n   * @category Permissions */\n  export class PermissionStatus extends EventTarget {\n    // deno-lint-ignore no-explicit-any\n    onchange: ((this: PermissionStatus, ev: Event) => any) | null;\n    readonly state: PermissionState;\n    /**\n     * Describes if permission is only granted partially, eg. an access\n     * might be granted to \"/foo\" directory, but denied for \"/foo/bar\".\n     * In such case this field will be set to `true` when querying for\n     * read permissions of \"/foo\" directory.\n     */\n    readonly partial: boolean;\n    addEventListener<K extends keyof PermissionStatusEventMap>(\n      type: K,\n      listener: (\n        this: PermissionStatus,\n        ev: PermissionStatusEventMap[K],\n      ) => any,\n      options?: boolean | AddEventListenerOptions,\n    ): void;\n    addEventListener(\n      type: string,\n      listener: EventListenerOrEventListenerObject,\n      options?: boolean | AddEventListenerOptions,\n    ): void;\n    removeEventListener<K extends keyof PermissionStatusEventMap>(\n      type: K,\n      listener: (\n        this: PermissionStatus,\n        ev: PermissionStatusEventMap[K],\n      ) => any,\n      options?: boolean | EventListenerOptions,\n    ): void;\n    removeEventListener(\n      type: string,\n      listener: EventListenerOrEventListenerObject,\n      options?: boolean | EventListenerOptions,\n    ): void;\n  }\n\n  /**\n   * Deno's permission management API.\n   *\n   * The class which provides the interface for the {@linkcode Deno.permissions}\n   * global instance and is based on the web platform\n   * [Permissions API](https://developer.mozilla.org/en-US/docs/Web/API/Permissions_API),\n   * though some proposed parts of the API which are useful in a server side\n   * runtime context were removed or abandoned in the web platform specification\n   * which is why it was chosen to locate it in the {@linkcode Deno} namespace\n   * instead.\n   *\n   * By default, if the `stdin`/`stdout` is TTY for the Deno CLI (meaning it can\n   * send and receive text), then the CLI will prompt the user to grant\n   * permission when an un-granted permission is requested. This behavior can\n   * be changed by using the `--no-prompt` command at startup. When prompting\n   * the CLI will request the narrowest permission possible, potentially making\n   * it annoying to the user. The permissions APIs allow the code author to\n   * request a wider set of permissions at one time in order to provide a better\n   * user experience.\n   *\n   * @category Permissions */\n  export class Permissions {\n    /** Resolves to the current status of a permission.\n     *\n     * Note, if the permission is already granted, `request()` will not prompt\n     * the user again, therefore `query()` is only necessary if you are going\n     * to react differently existing permissions without wanting to modify them\n     * or prompt the user to modify them.\n     *\n     * ```ts\n     * const status = await Deno.permissions.query({ name: \"read\", path: \"/etc\" });\n     * console.log(status.state);\n     * ```\n     */\n    query(desc: PermissionDescriptor): Promise<PermissionStatus>;\n\n    /** Returns the current status of a permission.\n     *\n     * Note, if the permission is already granted, `request()` will not prompt\n     * the user again, therefore `querySync()` is only necessary if you are going\n     * to react differently existing permissions without wanting to modify them\n     * or prompt the user to modify them.\n     *\n     * ```ts\n     * const status = Deno.permissions.querySync({ name: \"read\", path: \"/etc\" });\n     * console.log(status.state);\n     * ```\n     */\n    querySync(desc: PermissionDescriptor): PermissionStatus;\n\n    /** Revokes a permission, and resolves to the state of the permission.\n     *\n     * ```ts\n     * import { assert } from \"jsr:@std/assert\";\n     *\n     * const status = await Deno.permissions.revoke({ name: \"run\" });\n     * assert(status.state !== \"granted\")\n     * ```\n     */\n    revoke(desc: PermissionDescriptor): Promise<PermissionStatus>;\n\n    /** Revokes a permission, and returns the state of the permission.\n     *\n     * ```ts\n     * import { assert } from \"jsr:@std/assert\";\n     *\n     * const status = Deno.permissions.revokeSync({ name: \"run\" });\n     * assert(status.state !== \"granted\")\n     * ```\n     */\n    revokeSync(desc: PermissionDescriptor): PermissionStatus;\n\n    /** Requests the permission, and resolves to the state of the permission.\n     *\n     * If the permission is already granted, the user will not be prompted to\n     * grant the permission again.\n     *\n     * ```ts\n     * const status = await Deno.permissions.request({ name: \"env\" });\n     * if (status.state === \"granted\") {\n     *   console.log(\"'env' permission is granted.\");\n     * } else {\n     *   console.log(\"'env' permission is denied.\");\n     * }\n     * ```\n     */\n    request(desc: PermissionDescriptor): Promise<PermissionStatus>;\n\n    /** Requests the permission, and returns the state of the permission.\n     *\n     * If the permission is already granted, the user will not be prompted to\n     * grant the permission again.\n     *\n     * ```ts\n     * const status = Deno.permissions.requestSync({ name: \"env\" });\n     * if (status.state === \"granted\") {\n     *   console.log(\"'env' permission is granted.\");\n     * } else {\n     *   console.log(\"'env' permission is denied.\");\n     * }\n     * ```\n     */\n    requestSync(desc: PermissionDescriptor): PermissionStatus;\n  }\n\n  /** Deno's permission management API.\n   *\n   * It is a singleton instance of the {@linkcode Permissions} object and is\n   * based on the web platform\n   * [Permissions API](https://developer.mozilla.org/en-US/docs/Web/API/Permissions_API),\n   * though some proposed parts of the API which are useful in a server side\n   * runtime context were removed or abandoned in the web platform specification\n   * which is why it was chosen to locate it in the {@linkcode Deno} namespace\n   * instead.\n   *\n   * By default, if the `stdin`/`stdout` is TTY for the Deno CLI (meaning it can\n   * send and receive text), then the CLI will prompt the user to grant\n   * permission when an un-granted permission is requested. This behavior can\n   * be changed by using the `--no-prompt` command at startup. When prompting\n   * the CLI will request the narrowest permission possible, potentially making\n   * it annoying to the user. The permissions APIs allow the code author to\n   * request a wider set of permissions at one time in order to provide a better\n   * user experience.\n   *\n   * Requesting already granted permissions will not prompt the user and will\n   * return that the permission was granted.\n   *\n   * ### Querying\n   *\n   * ```ts\n   * const status = await Deno.permissions.query({ name: \"read\", path: \"/etc\" });\n   * console.log(status.state);\n   * ```\n   *\n   * ```ts\n   * const status = Deno.permissions.querySync({ name: \"read\", path: \"/etc\" });\n   * console.log(status.state);\n   * ```\n   *\n   * ### Revoking\n   *\n   * ```ts\n   * import { assert } from \"jsr:@std/assert\";\n   *\n   * const status = await Deno.permissions.revoke({ name: \"run\" });\n   * assert(status.state !== \"granted\")\n   * ```\n   *\n   * ```ts\n   * import { assert } from \"jsr:@std/assert\";\n   *\n   * const status = Deno.permissions.revokeSync({ name: \"run\" });\n   * assert(status.state !== \"granted\")\n   * ```\n   *\n   * ### Requesting\n   *\n   * ```ts\n   * const status = await Deno.permissions.request({ name: \"env\" });\n   * if (status.state === \"granted\") {\n   *   console.log(\"'env' permission is granted.\");\n   * } else {\n   *   console.log(\"'env' permission is denied.\");\n   * }\n   * ```\n   *\n   * ```ts\n   * const status = Deno.permissions.requestSync({ name: \"env\" });\n   * if (status.state === \"granted\") {\n   *   console.log(\"'env' permission is granted.\");\n   * } else {\n   *   console.log(\"'env' permission is denied.\");\n   * }\n   * ```\n   *\n   * @category Permissions\n   */\n  export const permissions: Permissions;\n\n  /** Information related to the build of the current Deno runtime.\n   *\n   * Users are discouraged from code branching based on this information, as\n   * assumptions about what is available in what build environment might change\n   * over time. Developers should specifically sniff out the features they\n   * intend to use.\n   *\n   * The intended use for the information is for logging and debugging purposes.\n   *\n   * @category Runtime\n   */\n  export const build: {\n    /** The [LLVM](https://llvm.org/) target triple, which is the combination\n     * of `${arch}-${vendor}-${os}` and represent the specific build target that\n     * the current runtime was built for. */\n    target: string;\n    /** Instruction set architecture that the Deno CLI was built for. */\n    arch: \"x86_64\" | \"aarch64\";\n    /** The operating system that the Deno CLI was built for. `\"darwin\"` is\n     * also known as OSX or MacOS. */\n    os:\n      | \"darwin\"\n      | \"linux\"\n      | \"android\"\n      | \"windows\"\n      | \"freebsd\"\n      | \"netbsd\"\n      | \"aix\"\n      | \"solaris\"\n      | \"illumos\";\n    /** The computer vendor that the Deno CLI was built for. */\n    vendor: string;\n    /** Optional environment flags that were set for this build of Deno CLI. */\n    env?: string;\n  };\n\n  /** Version information related to the current Deno CLI runtime environment.\n   *\n   * Users are discouraged from code branching based on this information, as\n   * assumptions about what is available in what build environment might change\n   * over time. Developers should specifically sniff out the features they\n   * intend to use.\n   *\n   * The intended use for the information is for logging and debugging purposes.\n   *\n   * @category Runtime\n   */\n  export const version: {\n    /** Deno CLI's version. For example: `\"1.26.0\"`. */\n    deno: string;\n    /** The V8 version used by Deno. For example: `\"10.7.100.0\"`.\n     *\n     * V8 is the underlying JavaScript runtime platform that Deno is built on\n     * top of. */\n    v8: string;\n    /** The TypeScript version used by Deno. For example: `\"4.8.3\"`.\n     *\n     * A version of the TypeScript type checker and language server is built-in\n     * to the Deno CLI. */\n    typescript: string;\n  };\n\n  /** Returns the script arguments to the program.\n   *\n   * Give the following command line invocation of Deno:\n   *\n   * ```sh\n   * deno run --allow-read https://examples.deno.land/command-line-arguments.ts Sushi\n   * ```\n   *\n   * Then `Deno.args` will contain:\n   *\n   * ```ts\n   * [ \"Sushi\" ]\n   * ```\n   *\n   * If you are looking for a structured way to parse arguments, there is\n   * [`parseArgs()`](https://jsr.io/@std/cli/doc/parse-args/~/parseArgs) from\n   * the Deno Standard Library.\n   *\n   * @category Runtime\n   */\n  export const args: string[];\n\n  /**\n   * A symbol which can be used as a key for a custom method which will be\n   * called when `Deno.inspect()` is called, or when the object is logged to\n   * the console.\n   *\n   * @deprecated This will be removed in Deno 2.0. See the\n   * {@link https://docs.deno.com/runtime/manual/advanced/migrate_deprecations | Deno 1.x to 2.x Migration Guide}\n   * for migration instructions.\n   *\n   * @category I/O\n   */\n  export const customInspect: unique symbol;\n\n  /** The URL of the entrypoint module entered from the command-line. It\n   * requires read permission to the CWD.\n   *\n   * Also see {@linkcode ImportMeta} for other related information.\n   *\n   * @tags allow-read\n   * @category Runtime\n   */\n  export const mainModule: string;\n\n  /** Options that can be used with {@linkcode symlink} and\n   * {@linkcode symlinkSync}.\n   *\n   * @category File System */\n  export interface SymlinkOptions {\n    /** Specify the symbolic link type as file, directory or NTFS junction. This\n     * option only applies to Windows and is ignored on other operating systems. */\n    type: \"file\" | \"dir\" | \"junction\";\n  }\n\n  /**\n   * Creates `newpath` as a symbolic link to `oldpath`.\n   *\n   * The `options.type` parameter can be set to `\"file\"`, `\"dir\"` or `\"junction\"`.\n   * This argument is only available on Windows and ignored on other platforms.\n   *\n   * ```ts\n   * await Deno.symlink(\"old/name\", \"new/name\");\n   * ```\n   *\n   * Requires full `allow-read` and `allow-write` permissions.\n   *\n   * @tags allow-read, allow-write\n   * @category File System\n   */\n  export function symlink(\n    oldpath: string | URL,\n    newpath: string | URL,\n    options?: SymlinkOptions,\n  ): Promise<void>;\n\n  /**\n   * Creates `newpath` as a symbolic link to `oldpath`.\n   *\n   * The `options.type` parameter can be set to `\"file\"`, `\"dir\"` or `\"junction\"`.\n   * This argument is only available on Windows and ignored on other platforms.\n   *\n   * ```ts\n   * Deno.symlinkSync(\"old/name\", \"new/name\");\n   * ```\n   *\n   * Requires full `allow-read` and `allow-write` permissions.\n   *\n   * @tags allow-read, allow-write\n   * @category File System\n   */\n  export function symlinkSync(\n    oldpath: string | URL,\n    newpath: string | URL,\n    options?: SymlinkOptions,\n  ): void;\n\n  /**\n   * Truncates or extends the specified file stream, to reach the specified\n   * `len`.\n   *\n   * If `len` is not specified then the entire file contents are truncated as if\n   * `len` was set to `0`.\n   *\n   * If the file previously was larger than this new length, the extra data is\n   * lost.\n   *\n   * If the file previously was shorter, it is extended, and the extended part\n   * reads as null bytes ('\\0').\n   *\n   * ### Truncate the entire file\n   *\n   * ```ts\n   * const file = await Deno.open(\n   *   \"my_file.txt\",\n   *   { read: true, write: true, create: true }\n   * );\n   * await Deno.ftruncate(file.rid);\n   * ```\n   *\n   * ### Truncate part of the file\n   *\n   * ```ts\n   * const file = await Deno.open(\n   *   \"my_file.txt\",\n   *   { read: true, write: true, create: true }\n   * );\n   * await file.write(new TextEncoder().encode(\"Hello World\"));\n   * await Deno.ftruncate(file.rid, 7);\n   * const data = new Uint8Array(32);\n   * await Deno.read(file.rid, data);\n   * console.log(new TextDecoder().decode(data)); // Hello W\n   * ```\n   *\n   * @deprecated This will be removed in Deno 2.0. See the\n   * {@link https://docs.deno.com/runtime/manual/advanced/migrate_deprecations | Deno 1.x to 2.x Migration Guide}\n   * for migration instructions.\n   *\n   * @category File System\n   */\n  export function ftruncate(rid: number, len?: number): Promise<void>;\n\n  /**\n   * Synchronously truncates or extends the specified file stream, to reach the\n   * specified `len`.\n   *\n   * If `len` is not specified then the entire file contents are truncated as if\n   * `len` was set to `0`.\n   *\n   * If the file previously was larger than this new length, the extra data is\n   * lost.\n   *\n   * If the file previously was shorter, it is extended, and the extended part\n   * reads as null bytes ('\\0').\n   *\n   * ### Truncate the entire file\n   *\n   * ```ts\n   * const file = Deno.openSync(\n   *   \"my_file.txt\",\n   *   { read: true, write: true, truncate: true, create: true }\n   * );\n   * Deno.ftruncateSync(file.rid);\n   * ```\n   *\n   * ### Truncate part of the file\n   *\n   * ```ts\n   * const file = Deno.openSync(\n   *  \"my_file.txt\",\n   *  { read: true, write: true, create: true }\n   * );\n   * file.writeSync(new TextEncoder().encode(\"Hello World\"));\n   * Deno.ftruncateSync(file.rid, 7);\n   * Deno.seekSync(file.rid, 0, Deno.SeekMode.Start);\n   * const data = new Uint8Array(32);\n   * Deno.readSync(file.rid, data);\n   * console.log(new TextDecoder().decode(data)); // Hello W\n   * ```\n   *\n   * @deprecated This will be removed in Deno 2.0. See the\n   * {@link https://docs.deno.com/runtime/manual/advanced/migrate_deprecations | Deno 1.x to 2.x Migration Guide}\n   * for migration instructions.\n   *\n   * @category File System\n   */\n  export function ftruncateSync(rid: number, len?: number): void;\n\n  /**\n   * Synchronously changes the access (`atime`) and modification (`mtime`) times\n   * of a file stream resource referenced by `rid`. Given times are either in\n   * seconds (UNIX epoch time) or as `Date` objects.\n   *\n   * ```ts\n   * const file = Deno.openSync(\"file.txt\", { create: true, write: true });\n   * Deno.futimeSync(file.rid, 1556495550, new Date());\n   * ```\n   *\n   * @deprecated This will be removed in Deno 2.0. See the\n   * {@link https://docs.deno.com/runtime/manual/advanced/migrate_deprecations | Deno 1.x to 2.x Migration Guide}\n   * for migration instructions.\n   *\n   * @category File System\n   */\n  export function futimeSync(\n    rid: number,\n    atime: number | Date,\n    mtime: number | Date,\n  ): void;\n\n  /**\n   * Changes the access (`atime`) and modification (`mtime`) times of a file\n   * stream resource referenced by `rid`. Given times are either in seconds\n   * (UNIX epoch time) or as `Date` objects.\n   *\n   * ```ts\n   * const file = await Deno.open(\"file.txt\", { create: true, write: true });\n   * await Deno.futime(file.rid, 1556495550, new Date());\n   * ```\n   *\n   * @deprecated This will be removed in Deno 2.0. See the\n   * {@link https://docs.deno.com/runtime/manual/advanced/migrate_deprecations | Deno 1.x to 2.x Migration Guide}\n   * for migration instructions.\n   *\n   * @category File System\n   */\n  export function futime(\n    rid: number,\n    atime: number | Date,\n    mtime: number | Date,\n  ): Promise<void>;\n\n  /**\n   * Returns a `Deno.FileInfo` for the given file stream.\n   *\n   * ```ts\n   * import { assert } from \"jsr:@std/assert\";\n   *\n   * const file = await Deno.open(\"file.txt\", { read: true });\n   * const fileInfo = await Deno.fstat(file.rid);\n   * assert(fileInfo.isFile);\n   * ```\n   *\n   * @deprecated This will be removed in Deno 2.0. See the\n   * {@link https://docs.deno.com/runtime/manual/advanced/migrate_deprecations | Deno 1.x to 2.x Migration Guide}\n   * for migration instructions.\n   *\n   * @category File System\n   */\n  export function fstat(rid: number): Promise<FileInfo>;\n\n  /**\n   * Synchronously returns a {@linkcode Deno.FileInfo} for the given file\n   * stream.\n   *\n   * ```ts\n   * import { assert } from \"jsr:@std/assert\";\n   *\n   * const file = Deno.openSync(\"file.txt\", { read: true });\n   * const fileInfo = Deno.fstatSync(file.rid);\n   * assert(fileInfo.isFile);\n   * ```\n   *\n   * @deprecated This will be removed in Deno 2.0. See the\n   * {@link https://docs.deno.com/runtime/manual/advanced/migrate_deprecations | Deno 1.x to 2.x Migration Guide}\n   * for migration instructions.\n   *\n   * @category File System\n   */\n  export function fstatSync(rid: number): FileInfo;\n\n  /**\n   * Synchronously changes the access (`atime`) and modification (`mtime`) times\n   * of a file system object referenced by `path`. Given times are either in\n   * seconds (UNIX epoch time) or as `Date` objects.\n   *\n   * ```ts\n   * Deno.utimeSync(\"myfile.txt\", 1556495550, new Date());\n   * ```\n   *\n   * Requires `allow-write` permission.\n   *\n   * @tags allow-write\n   * @category File System\n   */\n  export function utimeSync(\n    path: string | URL,\n    atime: number | Date,\n    mtime: number | Date,\n  ): void;\n\n  /**\n   * Changes the access (`atime`) and modification (`mtime`) times of a file\n   * system object referenced by `path`. Given times are either in seconds\n   * (UNIX epoch time) or as `Date` objects.\n   *\n   * ```ts\n   * await Deno.utime(\"myfile.txt\", 1556495550, new Date());\n   * ```\n   *\n   * Requires `allow-write` permission.\n   *\n   * @tags allow-write\n   * @category File System\n   */\n  export function utime(\n    path: string | URL,\n    atime: number | Date,\n    mtime: number | Date,\n  ): Promise<void>;\n\n  /** The event yielded from an {@linkcode HttpConn} which represents an HTTP\n   * request from a remote client.\n   *\n   * @category HTTP Server\n   *\n   * @deprecated This will be removed in Deno 2.0. See the\n   * {@link https://docs.deno.com/runtime/manual/advanced/migrate_deprecations | Deno 1.x to 2.x Migration Guide}\n   * for migration instructions.\n   */\n  export interface RequestEvent {\n    /** The request from the client in the form of the web platform\n     * {@linkcode Request}. */\n    readonly request: Request;\n    /** The method to be used to respond to the event. The response needs to\n     * either be an instance of {@linkcode Response} or a promise that resolves\n     * with an instance of `Response`.\n     *\n     * When the response is successfully processed then the promise returned\n     * will be resolved. If there are any issues with sending the response,\n     * the promise will be rejected. */\n    respondWith(r: Response | PromiseLike<Response>): Promise<void>;\n  }\n\n  /**\n   * The async iterable that is returned from {@linkcode serveHttp} which\n   * yields up {@linkcode RequestEvent} events, representing individual\n   * requests on the HTTP server connection.\n   *\n   * @category HTTP Server\n   *\n   * @deprecated This will be removed in Deno 2.0. See the\n   * {@link https://docs.deno.com/runtime/manual/advanced/migrate_deprecations | Deno 1.x to 2.x Migration Guide}\n   * for migration instructions.\n   */\n  export interface HttpConn extends AsyncIterable<RequestEvent>, Disposable {\n    /** The resource ID associated with this connection. Generally users do not\n     * need to be aware of this identifier. */\n    readonly rid: number;\n\n    /** An alternative to the async iterable interface which provides promises\n     * which resolve with either a {@linkcode RequestEvent} when there is\n     * another request or `null` when the client has closed the connection. */\n    nextRequest(): Promise<RequestEvent | null>;\n    /** Initiate a server side closure of the connection, indicating to the\n     * client that you refuse to accept any more requests on this connection.\n     *\n     * Typically the client closes the connection, which will result in the\n     * async iterable terminating or the `nextRequest()` method returning\n     * `null`. */\n    close(): void;\n  }\n\n  /**\n   * Provides an interface to handle HTTP request and responses over TCP or TLS\n   * connections. The method returns an {@linkcode HttpConn} which yields up\n   * {@linkcode RequestEvent} events, which utilize the web platform standard\n   * {@linkcode Request} and {@linkcode Response} objects to handle the request.\n   *\n   * ```ts\n   * const conn = Deno.listen({ port: 80 });\n   * const httpConn = Deno.serveHttp(await conn.accept());\n   * const e = await httpConn.nextRequest();\n   * if (e) {\n   *   e.respondWith(new Response(\"Hello World\"));\n   * }\n   * ```\n   *\n   * Alternatively, you can also use the async iterator approach:\n   *\n   * ```ts\n   * async function handleHttp(conn: Deno.Conn) {\n   *   for await (const e of Deno.serveHttp(conn)) {\n   *     e.respondWith(new Response(\"Hello World\"));\n   *   }\n   * }\n   *\n   * for await (const conn of Deno.listen({ port: 80 })) {\n   *   handleHttp(conn);\n   * }\n   * ```\n   *\n   * If `httpConn.nextRequest()` encounters an error or returns `null` then the\n   * underlying {@linkcode HttpConn} resource is closed automatically.\n   *\n   * Also see the experimental Flash HTTP server {@linkcode Deno.serve} which\n   * provides a ground up rewrite of handling of HTTP requests and responses\n   * within the Deno CLI.\n   *\n   * Note that this function *consumes* the given connection passed to it, thus\n   * the original connection will be unusable after calling this. Additionally,\n   * you need to ensure that the connection is not being used elsewhere when\n   * calling this function in order for the connection to be consumed properly.\n   *\n   * For instance, if there is a `Promise` that is waiting for read operation on\n   * the connection to complete, it is considered that the connection is being\n   * used elsewhere. In such a case, this function will fail.\n   *\n   * @category HTTP Server\n   * @deprecated This will be soft-removed in Deno 2.0. See the\n   * {@link https://docs.deno.com/runtime/manual/advanced/migrate_deprecations | Deno 1.x to 2.x Migration Guide}\n   * for migration instructions.\n   */\n  export function serveHttp(conn: Conn): HttpConn;\n\n  /** The object that is returned from a {@linkcode Deno.upgradeWebSocket}\n   * request.\n   *\n   * @category Web Sockets */\n  export interface WebSocketUpgrade {\n    /** The response object that represents the HTTP response to the client,\n     * which should be used to the {@linkcode RequestEvent} `.respondWith()` for\n     * the upgrade to be successful. */\n    response: Response;\n    /** The {@linkcode WebSocket} interface to communicate to the client via a\n     * web socket. */\n    socket: WebSocket;\n  }\n\n  /** Options which can be set when performing a\n   * {@linkcode Deno.upgradeWebSocket} upgrade of a {@linkcode Request}\n   *\n   * @category Web Sockets */\n  export interface UpgradeWebSocketOptions {\n    /** Sets the `.protocol` property on the client side web socket to the\n     * value provided here, which should be one of the strings specified in the\n     * `protocols` parameter when requesting the web socket. This is intended\n     * for clients and servers to specify sub-protocols to use to communicate to\n     * each other. */\n    protocol?: string;\n    /** If the client does not respond to this frame with a\n     * `pong` within the timeout specified, the connection is deemed\n     * unhealthy and is closed. The `close` and `error` event will be emitted.\n     *\n     * The unit is seconds, with a default of 30.\n     * Set to `0` to disable timeouts. */\n    idleTimeout?: number;\n  }\n\n  /**\n   * Upgrade an incoming HTTP request to a WebSocket.\n   *\n   * Given a {@linkcode Request}, returns a pair of {@linkcode WebSocket} and\n   * {@linkcode Response} instances. The original request must be responded to\n   * with the returned response for the websocket upgrade to be successful.\n   *\n   * ```ts\n   * const conn = Deno.listen({ port: 80 });\n   * const httpConn = Deno.serveHttp(await conn.accept());\n   * const e = await httpConn.nextRequest();\n   * if (e) {\n   *   const { socket, response } = Deno.upgradeWebSocket(e.request);\n   *   socket.onopen = () => {\n   *     socket.send(\"Hello World!\");\n   *   };\n   *   socket.onmessage = (e) => {\n   *     console.log(e.data);\n   *     socket.close();\n   *   };\n   *   socket.onclose = () => console.log(\"WebSocket has been closed.\");\n   *   socket.onerror = (e) => console.error(\"WebSocket error:\", e);\n   *   e.respondWith(response);\n   * }\n   * ```\n   *\n   * If the request body is disturbed (read from) before the upgrade is\n   * completed, upgrading fails.\n   *\n   * This operation does not yet consume the request or open the websocket. This\n   * only happens once the returned response has been passed to `respondWith()`.\n   *\n   * @category Web Sockets\n   */\n  export function upgradeWebSocket(\n    request: Request,\n    options?: UpgradeWebSocketOptions,\n  ): WebSocketUpgrade;\n\n  /** Send a signal to process under given `pid`. The value and meaning of the\n   * `signal` to the process is operating system and process dependant.\n   * {@linkcode Signal} provides the most common signals. Default signal\n   * is `\"SIGTERM\"`.\n   *\n   * The term `kill` is adopted from the UNIX-like command line command `kill`\n   * which also signals processes.\n   *\n   * If `pid` is negative, the signal will be sent to the process group\n   * identified by `pid`. An error will be thrown if a negative `pid` is used on\n   * Windows.\n   *\n   * ```ts\n   * const p = Deno.run({\n   *   cmd: [\"sleep\", \"10000\"]\n   * });\n   *\n   * Deno.kill(p.pid, \"SIGINT\");\n   * ```\n   *\n   * Requires `allow-run` permission.\n   *\n   * @tags allow-run\n   * @category Subprocess\n   */\n  export function kill(pid: number, signo?: Signal): void;\n\n  /** The type of the resource record to resolve via DNS using\n   * {@linkcode Deno.resolveDns}.\n   *\n   * Only the listed types are supported currently.\n   *\n   * @category Network\n   */\n  export type RecordType =\n    | \"A\"\n    | \"AAAA\"\n    | \"ANAME\"\n    | \"CAA\"\n    | \"CNAME\"\n    | \"MX\"\n    | \"NAPTR\"\n    | \"NS\"\n    | \"PTR\"\n    | \"SOA\"\n    | \"SRV\"\n    | \"TXT\";\n\n  /**\n   * Options which can be set when using {@linkcode Deno.resolveDns}.\n   *\n   * @category Network */\n  export interface ResolveDnsOptions {\n    /** The name server to be used for lookups.\n     *\n     * If not specified, defaults to the system configuration. For example\n     * `/etc/resolv.conf` on Unix-like systems. */\n    nameServer?: {\n      /** The IP address of the name server. */\n      ipAddr: string;\n      /** The port number the query will be sent to.\n       *\n       * @default {53} */\n      port?: number;\n    };\n    /**\n     * An abort signal to allow cancellation of the DNS resolution operation.\n     * If the signal becomes aborted the resolveDns operation will be stopped\n     * and the promise returned will be rejected with an AbortError.\n     */\n    signal?: AbortSignal;\n  }\n\n  /** If {@linkcode Deno.resolveDns} is called with `\"CAA\"` record type\n   * specified, it will resolve with an array of objects with this interface.\n   *\n   * @category Network\n   */\n  export interface CAARecord {\n    /** If `true`, indicates that the corresponding property tag **must** be\n     * understood if the semantics of the CAA record are to be correctly\n     * interpreted by an issuer.\n     *\n     * Issuers **must not** issue certificates for a domain if the relevant CAA\n     * Resource Record set contains unknown property tags that have `critical`\n     * set. */\n    critical: boolean;\n    /** An string that represents the identifier of the property represented by\n     * the record. */\n    tag: string;\n    /** The value associated with the tag. */\n    value: string;\n  }\n\n  /** If {@linkcode Deno.resolveDns} is called with `\"MX\"` record type\n   * specified, it will return an array of objects with this interface.\n   *\n   * @category Network */\n  export interface MXRecord {\n    /** A priority value, which is a relative value compared to the other\n     * preferences of MX records for the domain. */\n    preference: number;\n    /** The server that mail should be delivered to. */\n    exchange: string;\n  }\n\n  /** If {@linkcode Deno.resolveDns} is called with `\"NAPTR\"` record type\n   * specified, it will return an array of objects with this interface.\n   *\n   * @category Network */\n  export interface NAPTRRecord {\n    order: number;\n    preference: number;\n    flags: string;\n    services: string;\n    regexp: string;\n    replacement: string;\n  }\n\n  /** If {@linkcode Deno.resolveDns} is called with `\"SOA\"` record type\n   * specified, it will return an array of objects with this interface.\n   *\n   * @category Network */\n  export interface SOARecord {\n    mname: string;\n    rname: string;\n    serial: number;\n    refresh: number;\n    retry: number;\n    expire: number;\n    minimum: number;\n  }\n\n  /** If {@linkcode Deno.resolveDns} is called with `\"SRV\"` record type\n   * specified, it will return an array of objects with this interface.\n   *\n   * @category Network\n   */\n  export interface SRVRecord {\n    priority: number;\n    weight: number;\n    port: number;\n    target: string;\n  }\n\n  /**\n   * Performs DNS resolution against the given query, returning resolved\n   * records.\n   *\n   * Fails in the cases such as:\n   *\n   * - the query is in invalid format.\n   * - the options have an invalid parameter. For example `nameServer.port` is\n   *   beyond the range of 16-bit unsigned integer.\n   * - the request timed out.\n   *\n   * ```ts\n   * const a = await Deno.resolveDns(\"example.com\", \"A\");\n   *\n   * const aaaa = await Deno.resolveDns(\"example.com\", \"AAAA\", {\n   *   nameServer: { ipAddr: \"8.8.8.8\", port: 53 },\n   * });\n   * ```\n   *\n   * Requires `allow-net` permission.\n   *\n   * @tags allow-net\n   * @category Network\n   */\n  export function resolveDns(\n    query: string,\n    recordType: \"A\" | \"AAAA\" | \"ANAME\" | \"CNAME\" | \"NS\" | \"PTR\",\n    options?: ResolveDnsOptions,\n  ): Promise<string[]>;\n\n  /**\n   * Performs DNS resolution against the given query, returning resolved\n   * records.\n   *\n   * Fails in the cases such as:\n   *\n   * - the query is in invalid format.\n   * - the options have an invalid parameter. For example `nameServer.port` is\n   *   beyond the range of 16-bit unsigned integer.\n   * - the request timed out.\n   *\n   * ```ts\n   * const a = await Deno.resolveDns(\"example.com\", \"A\");\n   *\n   * const aaaa = await Deno.resolveDns(\"example.com\", \"AAAA\", {\n   *   nameServer: { ipAddr: \"8.8.8.8\", port: 53 },\n   * });\n   * ```\n   *\n   * Requires `allow-net` permission.\n   *\n   * @tags allow-net\n   * @category Network\n   */\n  export function resolveDns(\n    query: string,\n    recordType: \"CAA\",\n    options?: ResolveDnsOptions,\n  ): Promise<CAARecord[]>;\n\n  /**\n   * Performs DNS resolution against the given query, returning resolved\n   * records.\n   *\n   * Fails in the cases such as:\n   *\n   * - the query is in invalid format.\n   * - the options have an invalid parameter. For example `nameServer.port` is\n   *   beyond the range of 16-bit unsigned integer.\n   * - the request timed out.\n   *\n   * ```ts\n   * const a = await Deno.resolveDns(\"example.com\", \"A\");\n   *\n   * const aaaa = await Deno.resolveDns(\"example.com\", \"AAAA\", {\n   *   nameServer: { ipAddr: \"8.8.8.8\", port: 53 },\n   * });\n   * ```\n   *\n   * Requires `allow-net` permission.\n   *\n   * @tags allow-net\n   * @category Network\n   */\n  export function resolveDns(\n    query: string,\n    recordType: \"MX\",\n    options?: ResolveDnsOptions,\n  ): Promise<MXRecord[]>;\n\n  /**\n   * Performs DNS resolution against the given query, returning resolved\n   * records.\n   *\n   * Fails in the cases such as:\n   *\n   * - the query is in invalid format.\n   * - the options have an invalid parameter. For example `nameServer.port` is\n   *   beyond the range of 16-bit unsigned integer.\n   * - the request timed out.\n   *\n   * ```ts\n   * const a = await Deno.resolveDns(\"example.com\", \"A\");\n   *\n   * const aaaa = await Deno.resolveDns(\"example.com\", \"AAAA\", {\n   *   nameServer: { ipAddr: \"8.8.8.8\", port: 53 },\n   * });\n   * ```\n   *\n   * Requires `allow-net` permission.\n   *\n   * @tags allow-net\n   * @category Network\n   */\n  export function resolveDns(\n    query: string,\n    recordType: \"NAPTR\",\n    options?: ResolveDnsOptions,\n  ): Promise<NAPTRRecord[]>;\n\n  /**\n   * Performs DNS resolution against the given query, returning resolved\n   * records.\n   *\n   * Fails in the cases such as:\n   *\n   * - the query is in invalid format.\n   * - the options have an invalid parameter. For example `nameServer.port` is\n   *   beyond the range of 16-bit unsigned integer.\n   * - the request timed out.\n   *\n   * ```ts\n   * const a = await Deno.resolveDns(\"example.com\", \"A\");\n   *\n   * const aaaa = await Deno.resolveDns(\"example.com\", \"AAAA\", {\n   *   nameServer: { ipAddr: \"8.8.8.8\", port: 53 },\n   * });\n   * ```\n   *\n   * Requires `allow-net` permission.\n   *\n   * @tags allow-net\n   * @category Network\n   */\n  export function resolveDns(\n    query: string,\n    recordType: \"SOA\",\n    options?: ResolveDnsOptions,\n  ): Promise<SOARecord[]>;\n\n  /**\n   * Performs DNS resolution against the given query, returning resolved\n   * records.\n   *\n   * Fails in the cases such as:\n   *\n   * - the query is in invalid format.\n   * - the options have an invalid parameter. For example `nameServer.port` is\n   *   beyond the range of 16-bit unsigned integer.\n   * - the request timed out.\n   *\n   * ```ts\n   * const a = await Deno.resolveDns(\"example.com\", \"A\");\n   *\n   * const aaaa = await Deno.resolveDns(\"example.com\", \"AAAA\", {\n   *   nameServer: { ipAddr: \"8.8.8.8\", port: 53 },\n   * });\n   * ```\n   *\n   * Requires `allow-net` permission.\n   *\n   * @tags allow-net\n   * @category Network\n   */\n  export function resolveDns(\n    query: string,\n    recordType: \"SRV\",\n    options?: ResolveDnsOptions,\n  ): Promise<SRVRecord[]>;\n\n  /**\n   * Performs DNS resolution against the given query, returning resolved\n   * records.\n   *\n   * Fails in the cases such as:\n   *\n   * - the query is in invalid format.\n   * - the options have an invalid parameter. For example `nameServer.port` is\n   *   beyond the range of 16-bit unsigned integer.\n   * - the request timed out.\n   *\n   * ```ts\n   * const a = await Deno.resolveDns(\"example.com\", \"A\");\n   *\n   * const aaaa = await Deno.resolveDns(\"example.com\", \"AAAA\", {\n   *   nameServer: { ipAddr: \"8.8.8.8\", port: 53 },\n   * });\n   * ```\n   *\n   * Requires `allow-net` permission.\n   *\n   * @tags allow-net\n   * @category Network\n   */\n  export function resolveDns(\n    query: string,\n    recordType: \"TXT\",\n    options?: ResolveDnsOptions,\n  ): Promise<string[][]>;\n\n  /**\n   * Performs DNS resolution against the given query, returning resolved\n   * records.\n   *\n   * Fails in the cases such as:\n   *\n   * - the query is in invalid format.\n   * - the options have an invalid parameter. For example `nameServer.port` is\n   *   beyond the range of 16-bit unsigned integer.\n   * - the request timed out.\n   *\n   * ```ts\n   * const a = await Deno.resolveDns(\"example.com\", \"A\");\n   *\n   * const aaaa = await Deno.resolveDns(\"example.com\", \"AAAA\", {\n   *   nameServer: { ipAddr: \"8.8.8.8\", port: 53 },\n   * });\n   * ```\n   *\n   * Requires `allow-net` permission.\n   *\n   * @tags allow-net\n   * @category Network\n   */\n  export function resolveDns(\n    query: string,\n    recordType: RecordType,\n    options?: ResolveDnsOptions,\n  ): Promise<\n    | string[]\n    | CAARecord[]\n    | MXRecord[]\n    | NAPTRRecord[]\n    | SOARecord[]\n    | SRVRecord[]\n    | string[][]\n  >;\n\n  /**\n   * Make the timer of the given `id` block the event loop from finishing.\n   *\n   * @category Runtime\n   */\n  export function refTimer(id: number): void;\n\n  /**\n   * Make the timer of the given `id` not block the event loop from finishing.\n   *\n   * @category Runtime\n   */\n  export function unrefTimer(id: number): void;\n\n  /**\n   * Returns the user id of the process on POSIX platforms. Returns null on Windows.\n   *\n   * ```ts\n   * console.log(Deno.uid());\n   * ```\n   *\n   * Requires `allow-sys` permission.\n   *\n   * @tags allow-sys\n   * @category Runtime\n   */\n  export function uid(): number | null;\n\n  /**\n   * Returns the group id of the process on POSIX platforms. Returns null on windows.\n   *\n   * ```ts\n   * console.log(Deno.gid());\n   * ```\n   *\n   * Requires `allow-sys` permission.\n   *\n   * @tags allow-sys\n   * @category Runtime\n   */\n  export function gid(): number | null;\n\n  /** Additional information for an HTTP request and its connection.\n   *\n   * @category HTTP Server\n   */\n  export interface ServeHandlerInfo {\n    /** The remote address of the connection. */\n    remoteAddr: Deno.NetAddr;\n  }\n\n  /** A handler for HTTP requests. Consumes a request and returns a response.\n   *\n   * If a handler throws, the server calling the handler will assume the impact\n   * of the error is isolated to the individual request. It will catch the error\n   * and if necessary will close the underlying connection.\n   *\n   * @category HTTP Server\n   */\n  export type ServeHandler = (\n    request: Request,\n    info: ServeHandlerInfo,\n  ) => Response | Promise<Response>;\n\n  /** Options which can be set when calling {@linkcode Deno.serve}.\n   *\n   * @category HTTP Server\n   */\n  export interface ServeOptions {\n    /** The port to listen on.\n     *\n     * Set to `0` to listen on any available port.\n     *\n     * @default {8000} */\n    port?: number;\n\n    /** A literal IP address or host name that can be resolved to an IP address.\n     *\n     * __Note about `0.0.0.0`__ While listening `0.0.0.0` works on all platforms,\n     * the browsers on Windows don't work with the address `0.0.0.0`.\n     * You should show the message like `server running on localhost:8080` instead of\n     * `server running on 0.0.0.0:8080` if your program supports Windows.\n     *\n     * @default {\"0.0.0.0\"} */\n    hostname?: string;\n\n    /** An {@linkcode AbortSignal} to close the server and all connections. */\n    signal?: AbortSignal;\n\n    /** Sets `SO_REUSEPORT` on POSIX systems. */\n    reusePort?: boolean;\n\n    /** The handler to invoke when route handlers throw an error. */\n    onError?: (error: unknown) => Response | Promise<Response>;\n\n    /** The callback which is called when the server starts listening. */\n    onListen?: (localAddr: Deno.NetAddr) => void;\n  }\n\n  /** Additional options which are used when opening a TLS (HTTPS) server.\n   *\n   * @category HTTP Server\n   */\n  export interface ServeTlsOptions extends ServeOptions {\n    /**\n     * Server private key in PEM format. Use {@linkcode TlsCertifiedKeyOptions} instead.\n     *\n     * @deprecated This will be removed in Deno 2.0. See the\n     * {@link https://docs.deno.com/runtime/manual/advanced/migrate_deprecations | Deno 1.x to 2.x Migration Guide}\n     * for migration instructions.\n     */\n    cert?: string;\n\n    /**\n     * Cert chain in PEM format.  Use {@linkcode TlsCertifiedKeyOptions} instead.\n     *\n     * @deprecated This will be removed in Deno 2.0. See the\n     * {@link https://docs.deno.com/runtime/manual/advanced/migrate_deprecations | Deno 1.x to 2.x Migration Guide}\n     * for migration instructions.\n     */\n    key?: string;\n  }\n\n  /**\n   * @category HTTP Server\n   */\n  export interface ServeInit {\n    /** The handler to invoke to process each incoming request. */\n    handler: ServeHandler;\n  }\n\n  /**\n   * @category HTTP Server\n   */\n  export interface ServeTlsInit {\n    /** The handler to invoke to process each incoming request. */\n    handler: ServeHandler;\n  }\n\n  /** @category HTTP Server */\n  export interface ServeUnixOptions {\n    /** The unix domain socket path to listen on. */\n    path: string;\n\n    /** An {@linkcode AbortSignal} to close the server and all connections. */\n    signal?: AbortSignal;\n\n    /** The handler to invoke when route handlers throw an error. */\n    onError?: (error: unknown) => Response | Promise<Response>;\n\n    /** The callback which is called when the server starts listening. */\n    onListen?: (localAddr: Deno.UnixAddr) => void;\n  }\n\n  /** Information for a unix domain socket HTTP request.\n   *\n   * @category HTTP Server\n   */\n  export interface ServeUnixHandlerInfo {\n    /** The remote address of the connection. */\n    remoteAddr: Deno.UnixAddr;\n  }\n\n  /** A handler for unix domain socket HTTP requests. Consumes a request and returns a response.\n   *\n   * If a handler throws, the server calling the handler will assume the impact\n   * of the error is isolated to the individual request. It will catch the error\n   * and if necessary will close the underlying connection.\n   *\n   * @category HTTP Server\n   */\n  export type ServeUnixHandler = (\n    request: Request,\n    info: ServeUnixHandlerInfo,\n  ) => Response | Promise<Response>;\n\n  /**\n   * @category HTTP Server\n   */\n  export interface ServeUnixInit {\n    /** The handler to invoke to process each incoming request. */\n    handler: ServeUnixHandler;\n  }\n\n  /** An instance of the server created using `Deno.serve()` API.\n   *\n   * @category HTTP Server\n   */\n  export interface HttpServer<A extends Deno.Addr = Deno.Addr>\n    extends AsyncDisposable {\n    /** A promise that resolves once server finishes - eg. when aborted using\n     * the signal passed to {@linkcode ServeOptions.signal}.\n     */\n    finished: Promise<void>;\n\n    /** The local address this server is listening on. */\n    addr: A;\n\n    /**\n     * Make the server block the event loop from finishing.\n     *\n     * Note: the server blocks the event loop from finishing by default.\n     * This method is only meaningful after `.unref()` is called.\n     */\n    ref(): void;\n\n    /** Make the server not block the event loop from finishing. */\n    unref(): void;\n\n    /** Gracefully close the server. No more new connections will be accepted,\n     * while pending requests will be allowed to finish.\n     */\n    shutdown(): Promise<void>;\n  }\n\n  /**\n   * @category HTTP Server\n   *\n   * @deprecated This will be removed in Deno 2.0. See the\n   * {@link https://docs.deno.com/runtime/manual/advanced/migrate_deprecations | Deno 1.x to 2.x Migration Guide}\n   * for migration instructions.\n   */\n  export type Server = HttpServer;\n\n  /** Serves HTTP requests with the given handler.\n   *\n   * The below example serves with the port `8000` on hostname `\"127.0.0.1\"`.\n   *\n   * ```ts\n   * Deno.serve((_req) => new Response(\"Hello, world\"));\n   * ```\n   *\n   * @category HTTP Server\n   */\n  export function serve(handler: ServeHandler): HttpServer<Deno.NetAddr>;\n  /** Serves HTTP requests with the given option bag and handler.\n   *\n   * You can specify the socket path with `path` option.\n   *\n   * ```ts\n   * Deno.serve(\n   *   { path: \"path/to/socket\" },\n   *   (_req) => new Response(\"Hello, world\")\n   * );\n   * ```\n   *\n   * You can stop the server with an {@linkcode AbortSignal}. The abort signal\n   * needs to be passed as the `signal` option in the options bag. The server\n   * aborts when the abort signal is aborted. To wait for the server to close,\n   * await the promise returned from the `Deno.serve` API.\n   *\n   * ```ts\n   * const ac = new AbortController();\n   *\n   * const server = Deno.serve(\n   *    { signal: ac.signal, path: \"path/to/socket\" },\n   *    (_req) => new Response(\"Hello, world\")\n   * );\n   * server.finished.then(() => console.log(\"Server closed\"));\n   *\n   * console.log(\"Closing server...\");\n   * ac.abort();\n   * ```\n   *\n   * By default `Deno.serve` prints the message\n   * `Listening on path/to/socket` on listening. If you like to\n   * change this behavior, you can specify a custom `onListen` callback.\n   *\n   * ```ts\n   * Deno.serve({\n   *   onListen({ path }) {\n   *     console.log(`Server started at ${path}`);\n   *     // ... more info specific to your server ..\n   *   },\n   *   path: \"path/to/socket\",\n   * }, (_req) => new Response(\"Hello, world\"));\n   * ```\n   *\n   * @category HTTP Server\n   */\n  export function serve(\n    options: ServeUnixOptions,\n    handler: ServeUnixHandler,\n  ): HttpServer<Deno.UnixAddr>;\n  /** Serves HTTP requests with the given option bag and handler.\n   *\n   * You can specify an object with a port and hostname option, which is the\n   * address to listen on. The default is port `8000` on hostname `\"127.0.0.1\"`.\n   *\n   * You can change the address to listen on using the `hostname` and `port`\n   * options. The below example serves on port `3000` and hostname `\"0.0.0.0\"`.\n   *\n   * ```ts\n   * Deno.serve(\n   *   { port: 3000, hostname: \"0.0.0.0\" },\n   *   (_req) => new Response(\"Hello, world\")\n   * );\n   * ```\n   *\n   * You can stop the server with an {@linkcode AbortSignal}. The abort signal\n   * needs to be passed as the `signal` option in the options bag. The server\n   * aborts when the abort signal is aborted. To wait for the server to close,\n   * await the promise returned from the `Deno.serve` API.\n   *\n   * ```ts\n   * const ac = new AbortController();\n   *\n   * const server = Deno.serve(\n   *    { signal: ac.signal },\n   *    (_req) => new Response(\"Hello, world\")\n   * );\n   * server.finished.then(() => console.log(\"Server closed\"));\n   *\n   * console.log(\"Closing server...\");\n   * ac.abort();\n   * ```\n   *\n   * By default `Deno.serve` prints the message\n   * `Listening on http://<hostname>:<port>/` on listening. If you like to\n   * change this behavior, you can specify a custom `onListen` callback.\n   *\n   * ```ts\n   * Deno.serve({\n   *   onListen({ port, hostname }) {\n   *     console.log(`Server started at http://${hostname}:${port}`);\n   *     // ... more info specific to your server ..\n   *   },\n   * }, (_req) => new Response(\"Hello, world\"));\n   * ```\n   *\n   * To enable TLS you must specify the `key` and `cert` options.\n   *\n   * ```ts\n   * const cert = \"-----BEGIN CERTIFICATE-----\\n...\\n-----END CERTIFICATE-----\\n\";\n   * const key = \"-----BEGIN PRIVATE KEY-----\\n...\\n-----END PRIVATE KEY-----\\n\";\n   * Deno.serve({ cert, key }, (_req) => new Response(\"Hello, world\"));\n   * ```\n   *\n   * @category HTTP Server\n   */\n  export function serve(\n    options: ServeOptions,\n    handler: ServeHandler,\n  ): HttpServer<Deno.NetAddr>;\n  /** Serves HTTP requests with the given option bag and handler.\n   *\n   * You can specify an object with a port and hostname option, which is the\n   * address to listen on. The default is port `8000` on hostname `\"127.0.0.1\"`.\n   *\n   * You can change the address to listen on using the `hostname` and `port`\n   * options. The below example serves on port `3000` and hostname `\"0.0.0.0\"`.\n   *\n   * ```ts\n   * Deno.serve(\n   *   { port: 3000, hostname: \"0.0.0.0\" },\n   *   (_req) => new Response(\"Hello, world\")\n   * );\n   * ```\n   *\n   * You can stop the server with an {@linkcode AbortSignal}. The abort signal\n   * needs to be passed as the `signal` option in the options bag. The server\n   * aborts when the abort signal is aborted. To wait for the server to close,\n   * await the promise returned from the `Deno.serve` API.\n   *\n   * ```ts\n   * const ac = new AbortController();\n   *\n   * const server = Deno.serve(\n   *    { signal: ac.signal },\n   *    (_req) => new Response(\"Hello, world\")\n   * );\n   * server.finished.then(() => console.log(\"Server closed\"));\n   *\n   * console.log(\"Closing server...\");\n   * ac.abort();\n   * ```\n   *\n   * By default `Deno.serve` prints the message\n   * `Listening on http://<hostname>:<port>/` on listening. If you like to\n   * change this behavior, you can specify a custom `onListen` callback.\n   *\n   * ```ts\n   * Deno.serve({\n   *   onListen({ port, hostname }) {\n   *     console.log(`Server started at http://${hostname}:${port}`);\n   *     // ... more info specific to your server ..\n   *   },\n   * }, (_req) => new Response(\"Hello, world\"));\n   * ```\n   *\n   * To enable TLS you must specify the `key` and `cert` options.\n   *\n   * ```ts\n   * const cert = \"-----BEGIN CERTIFICATE-----\\n...\\n-----END CERTIFICATE-----\\n\";\n   * const key = \"-----BEGIN PRIVATE KEY-----\\n...\\n-----END PRIVATE KEY-----\\n\";\n   * Deno.serve({ cert, key }, (_req) => new Response(\"Hello, world\"));\n   * ```\n   *\n   * @category HTTP Server\n   */\n  export function serve(\n    options:\n      | ServeTlsOptions\n      | (ServeTlsOptions & TlsCertifiedKeyOptions),\n    handler: ServeHandler,\n  ): HttpServer<Deno.NetAddr>;\n  /** Serves HTTP requests with the given option bag.\n   *\n   * You can specify an object with the path option, which is the\n   * unix domain socket to listen on.\n   *\n   * ```ts\n   * const ac = new AbortController();\n   *\n   * const server = Deno.serve({\n   *   path: \"path/to/socket\",\n   *   handler: (_req) => new Response(\"Hello, world\"),\n   *   signal: ac.signal,\n   *   onListen({ path }) {\n   *     console.log(`Server started at ${path}`);\n   *   },\n   * });\n   * server.finished.then(() => console.log(\"Server closed\"));\n   *\n   * console.log(\"Closing server...\");\n   * ac.abort();\n   * ```\n   *\n   * @category HTTP Server\n   */\n  export function serve(\n    options: ServeUnixInit & ServeUnixOptions,\n  ): HttpServer<Deno.UnixAddr>;\n  /** Serves HTTP requests with the given option bag.\n   *\n   * You can specify an object with a port and hostname option, which is the\n   * address to listen on. The default is port `8000` on hostname `\"127.0.0.1\"`.\n   *\n   * ```ts\n   * const ac = new AbortController();\n   *\n   * const server = Deno.serve({\n   *   port: 3000,\n   *   hostname: \"0.0.0.0\",\n   *   handler: (_req) => new Response(\"Hello, world\"),\n   *   signal: ac.signal,\n   *   onListen({ port, hostname }) {\n   *     console.log(`Server started at http://${hostname}:${port}`);\n   *   },\n   * });\n   * server.finished.then(() => console.log(\"Server closed\"));\n   *\n   * console.log(\"Closing server...\");\n   * ac.abort();\n   * ```\n   *\n   * @category HTTP Server\n   */\n  export function serve(\n    options:\n      & ServeInit\n      & ServeOptions,\n  ): HttpServer<Deno.NetAddr>;\n  /** Serves HTTP requests with the given option bag.\n   *\n   * You can specify an object with a port and hostname option, which is the\n   * address to listen on. The default is port `8000` on hostname `\"127.0.0.1\"`.\n   *\n   * ```ts\n   * const ac = new AbortController();\n   *\n   * const server = Deno.serve({\n   *   port: 3000,\n   *   hostname: \"0.0.0.0\",\n   *   handler: (_req) => new Response(\"Hello, world\"),\n   *   signal: ac.signal,\n   *   onListen({ port, hostname }) {\n   *     console.log(`Server started at http://${hostname}:${port}`);\n   *   },\n   * });\n   * server.finished.then(() => console.log(\"Server closed\"));\n   *\n   * console.log(\"Closing server...\");\n   * ac.abort();\n   * ```\n   *\n   * @category HTTP Server\n   */\n  export function serve(\n    options:\n      & ServeTlsInit\n      & (\n        | ServeTlsOptions\n        | (ServeTlsOptions & TlsCertifiedKeyOptions)\n      ),\n  ): HttpServer<Deno.NetAddr>;\n}\n",
  "typeReferenceDirectives": []
}
