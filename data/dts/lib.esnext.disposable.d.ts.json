{
  "endOfFileToken": {
    "kind": "EndOfFileToken"
  },
  "fileName": "data/dts/lib.esnext.disposable.d.ts",
  "hasNoDefaultLib": true,
  "isDeclarationFile": true,
  "kind": "SourceFile",
  "libReferenceDirectives": [
    {
      "fileName": "es2015.symbol"
    }
  ],
  "referencedFiles": [],
  "statements": [
    {
      "kind": "InterfaceDeclaration",
      "members": [
        {
          "kind": "PropertySignature",
          "modifiers": [
            {
              "kind": "ReadonlyKeyword"
            }
          ],
          "name": {
            "kind": "Identifier",
            "text": "dispose"
          },
          "type": {
            "kind": "TypeOperator",
            "type": {
              "kind": "SymbolKeyword"
            }
          }
        },
        {
          "kind": "PropertySignature",
          "modifiers": [
            {
              "kind": "ReadonlyKeyword"
            }
          ],
          "name": {
            "kind": "Identifier",
            "text": "asyncDispose"
          },
          "type": {
            "kind": "TypeOperator",
            "type": {
              "kind": "SymbolKeyword"
            }
          }
        }
      ],
      "name": {
        "kind": "Identifier",
        "text": "SymbolConstructor"
      }
    },
    {
      "kind": "InterfaceDeclaration",
      "members": [
        {
          "kind": "MethodSignature",
          "name": {
            "expression": {
              "expression": {
                "kind": "Identifier",
                "text": "Symbol"
              },
              "kind": "PropertyAccessExpression",
              "name": {
                "kind": "Identifier",
                "text": "dispose"
              }
            },
            "kind": "ComputedPropertyName"
          },
          "parameters": [],
          "type": {
            "kind": "VoidKeyword"
          }
        }
      ],
      "name": {
        "kind": "Identifier",
        "text": "Disposable"
      }
    },
    {
      "kind": "InterfaceDeclaration",
      "members": [
        {
          "kind": "MethodSignature",
          "name": {
            "expression": {
              "expression": {
                "kind": "Identifier",
                "text": "Symbol"
              },
              "kind": "PropertyAccessExpression",
              "name": {
                "kind": "Identifier",
                "text": "asyncDispose"
              }
            },
            "kind": "ComputedPropertyName"
          },
          "parameters": [],
          "type": {
            "kind": "TypeReference",
            "typeArguments": [
              {
                "kind": "VoidKeyword"
              }
            ],
            "typeName": {
              "kind": "Identifier",
              "text": "PromiseLike"
            }
          }
        }
      ],
      "name": {
        "kind": "Identifier",
        "text": "AsyncDisposable"
      }
    },
    {
      "heritageClauses": [
        {
          "kind": "HeritageClause",
          "token": "ExtendsKeyword",
          "types": [
            {
              "expression": {
                "kind": "Identifier",
                "text": "Error"
              },
              "kind": "ExpressionWithTypeArguments"
            }
          ]
        }
      ],
      "kind": "InterfaceDeclaration",
      "members": [
        {
          "kind": "PropertySignature",
          "name": {
            "kind": "Identifier",
            "text": "error"
          },
          "type": {
            "kind": "AnyKeyword"
          }
        },
        {
          "kind": "PropertySignature",
          "name": {
            "kind": "Identifier",
            "text": "suppressed"
          },
          "type": {
            "kind": "AnyKeyword"
          }
        }
      ],
      "name": {
        "kind": "Identifier",
        "text": "SuppressedError"
      }
    },
    {
      "kind": "InterfaceDeclaration",
      "members": [
        {
          "kind": "ConstructSignature",
          "parameters": [
            {
              "kind": "Parameter",
              "name": {
                "kind": "Identifier",
                "text": "error"
              },
              "type": {
                "kind": "AnyKeyword"
              }
            },
            {
              "kind": "Parameter",
              "name": {
                "kind": "Identifier",
                "text": "suppressed"
              },
              "type": {
                "kind": "AnyKeyword"
              }
            },
            {
              "kind": "Parameter",
              "name": {
                "kind": "Identifier",
                "text": "message"
              },
              "questionToken": {
                "kind": "QuestionToken"
              },
              "type": {
                "kind": "StringKeyword"
              }
            }
          ],
          "type": {
            "kind": "TypeReference",
            "typeName": {
              "kind": "Identifier",
              "text": "SuppressedError"
            }
          }
        },
        {
          "kind": "CallSignature",
          "parameters": [
            {
              "kind": "Parameter",
              "name": {
                "kind": "Identifier",
                "text": "error"
              },
              "type": {
                "kind": "AnyKeyword"
              }
            },
            {
              "kind": "Parameter",
              "name": {
                "kind": "Identifier",
                "text": "suppressed"
              },
              "type": {
                "kind": "AnyKeyword"
              }
            },
            {
              "kind": "Parameter",
              "name": {
                "kind": "Identifier",
                "text": "message"
              },
              "questionToken": {
                "kind": "QuestionToken"
              },
              "type": {
                "kind": "StringKeyword"
              }
            }
          ],
          "type": {
            "kind": "TypeReference",
            "typeName": {
              "kind": "Identifier",
              "text": "SuppressedError"
            }
          }
        },
        {
          "kind": "PropertySignature",
          "modifiers": [
            {
              "kind": "ReadonlyKeyword"
            }
          ],
          "name": {
            "kind": "Identifier",
            "text": "prototype"
          },
          "type": {
            "kind": "TypeReference",
            "typeName": {
              "kind": "Identifier",
              "text": "SuppressedError"
            }
          }
        }
      ],
      "name": {
        "kind": "Identifier",
        "text": "SuppressedErrorConstructor"
      }
    },
    {
      "declarationList": {
        "declarations": [
          {
            "kind": "VariableDeclaration",
            "name": {
              "kind": "Identifier",
              "text": "SuppressedError"
            },
            "type": {
              "kind": "TypeReference",
              "typeName": {
                "kind": "Identifier",
                "text": "SuppressedErrorConstructor"
              }
            }
          }
        ],
        "kind": "VariableDeclarationList"
      },
      "kind": "FirstStatement",
      "modifiers": [
        {
          "kind": "DeclareKeyword"
        }
      ]
    },
    {
      "kind": "InterfaceDeclaration",
      "members": [
        {
          "kind": "PropertySignature",
          "modifiers": [
            {
              "kind": "ReadonlyKeyword"
            }
          ],
          "name": {
            "kind": "Identifier",
            "text": "disposed"
          },
          "type": {
            "kind": "BooleanKeyword"
          }
        },
        {
          "kind": "MethodSignature",
          "name": {
            "kind": "Identifier",
            "text": "dispose"
          },
          "parameters": [],
          "type": {
            "kind": "VoidKeyword"
          }
        },
        {
          "kind": "MethodSignature",
          "name": {
            "kind": "Identifier",
            "text": "use"
          },
          "parameters": [
            {
              "kind": "Parameter",
              "name": {
                "kind": "Identifier",
                "text": "value"
              },
              "type": {
                "kind": "TypeReference",
                "typeName": {
                  "kind": "Identifier",
                  "text": "T"
                }
              }
            }
          ],
          "type": {
            "kind": "TypeReference",
            "typeName": {
              "kind": "Identifier",
              "text": "T"
            }
          }
        },
        {
          "kind": "MethodSignature",
          "name": {
            "kind": "Identifier",
            "text": "adopt"
          },
          "parameters": [
            {
              "kind": "Parameter",
              "name": {
                "kind": "Identifier",
                "text": "value"
              },
              "type": {
                "kind": "TypeReference",
                "typeName": {
                  "kind": "Identifier",
                  "text": "T"
                }
              }
            },
            {
              "kind": "Parameter",
              "name": {
                "kind": "Identifier",
                "text": "onDispose"
              },
              "type": {
                "kind": "FunctionType",
                "parameters": [
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "value"
                    },
                    "type": {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "T"
                      }
                    }
                  }
                ],
                "type": {
                  "kind": "VoidKeyword"
                }
              }
            }
          ],
          "type": {
            "kind": "TypeReference",
            "typeName": {
              "kind": "Identifier",
              "text": "T"
            }
          }
        },
        {
          "kind": "MethodSignature",
          "name": {
            "kind": "Identifier",
            "text": "defer"
          },
          "parameters": [
            {
              "kind": "Parameter",
              "name": {
                "kind": "Identifier",
                "text": "onDispose"
              },
              "type": {
                "kind": "FunctionType",
                "parameters": [],
                "type": {
                  "kind": "VoidKeyword"
                }
              }
            }
          ],
          "type": {
            "kind": "VoidKeyword"
          }
        },
        {
          "kind": "MethodSignature",
          "name": {
            "kind": "Identifier",
            "text": "move"
          },
          "parameters": [],
          "type": {
            "kind": "TypeReference",
            "typeName": {
              "kind": "Identifier",
              "text": "DisposableStack"
            }
          }
        },
        {
          "kind": "MethodSignature",
          "name": {
            "expression": {
              "expression": {
                "kind": "Identifier",
                "text": "Symbol"
              },
              "kind": "PropertyAccessExpression",
              "name": {
                "kind": "Identifier",
                "text": "dispose"
              }
            },
            "kind": "ComputedPropertyName"
          },
          "parameters": [],
          "type": {
            "kind": "VoidKeyword"
          }
        },
        {
          "kind": "PropertySignature",
          "modifiers": [
            {
              "kind": "ReadonlyKeyword"
            }
          ],
          "name": {
            "expression": {
              "expression": {
                "kind": "Identifier",
                "text": "Symbol"
              },
              "kind": "PropertyAccessExpression",
              "name": {
                "kind": "Identifier",
                "text": "toStringTag"
              }
            },
            "kind": "ComputedPropertyName"
          },
          "type": {
            "kind": "StringKeyword"
          }
        }
      ],
      "name": {
        "kind": "Identifier",
        "text": "DisposableStack"
      }
    },
    {
      "kind": "InterfaceDeclaration",
      "members": [
        {
          "kind": "ConstructSignature",
          "parameters": [],
          "type": {
            "kind": "TypeReference",
            "typeName": {
              "kind": "Identifier",
              "text": "DisposableStack"
            }
          }
        },
        {
          "kind": "PropertySignature",
          "modifiers": [
            {
              "kind": "ReadonlyKeyword"
            }
          ],
          "name": {
            "kind": "Identifier",
            "text": "prototype"
          },
          "type": {
            "kind": "TypeReference",
            "typeName": {
              "kind": "Identifier",
              "text": "DisposableStack"
            }
          }
        }
      ],
      "name": {
        "kind": "Identifier",
        "text": "DisposableStackConstructor"
      }
    },
    {
      "declarationList": {
        "declarations": [
          {
            "kind": "VariableDeclaration",
            "name": {
              "kind": "Identifier",
              "text": "DisposableStack"
            },
            "type": {
              "kind": "TypeReference",
              "typeName": {
                "kind": "Identifier",
                "text": "DisposableStackConstructor"
              }
            }
          }
        ],
        "kind": "VariableDeclarationList"
      },
      "kind": "FirstStatement",
      "modifiers": [
        {
          "kind": "DeclareKeyword"
        }
      ]
    },
    {
      "kind": "InterfaceDeclaration",
      "members": [
        {
          "kind": "PropertySignature",
          "modifiers": [
            {
              "kind": "ReadonlyKeyword"
            }
          ],
          "name": {
            "kind": "Identifier",
            "text": "disposed"
          },
          "type": {
            "kind": "BooleanKeyword"
          }
        },
        {
          "kind": "MethodSignature",
          "name": {
            "kind": "Identifier",
            "text": "disposeAsync"
          },
          "parameters": [],
          "type": {
            "kind": "TypeReference",
            "typeArguments": [
              {
                "kind": "VoidKeyword"
              }
            ],
            "typeName": {
              "kind": "Identifier",
              "text": "Promise"
            }
          }
        },
        {
          "kind": "MethodSignature",
          "name": {
            "kind": "Identifier",
            "text": "use"
          },
          "parameters": [
            {
              "kind": "Parameter",
              "name": {
                "kind": "Identifier",
                "text": "value"
              },
              "type": {
                "kind": "TypeReference",
                "typeName": {
                  "kind": "Identifier",
                  "text": "T"
                }
              }
            }
          ],
          "type": {
            "kind": "TypeReference",
            "typeName": {
              "kind": "Identifier",
              "text": "T"
            }
          }
        },
        {
          "kind": "MethodSignature",
          "name": {
            "kind": "Identifier",
            "text": "adopt"
          },
          "parameters": [
            {
              "kind": "Parameter",
              "name": {
                "kind": "Identifier",
                "text": "value"
              },
              "type": {
                "kind": "TypeReference",
                "typeName": {
                  "kind": "Identifier",
                  "text": "T"
                }
              }
            },
            {
              "kind": "Parameter",
              "name": {
                "kind": "Identifier",
                "text": "onDisposeAsync"
              },
              "type": {
                "kind": "FunctionType",
                "parameters": [
                  {
                    "kind": "Parameter",
                    "name": {
                      "kind": "Identifier",
                      "text": "value"
                    },
                    "type": {
                      "kind": "TypeReference",
                      "typeName": {
                        "kind": "Identifier",
                        "text": "T"
                      }
                    }
                  }
                ],
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "TypeReference",
                      "typeArguments": [
                        {
                          "kind": "VoidKeyword"
                        }
                      ],
                      "typeName": {
                        "kind": "Identifier",
                        "text": "PromiseLike"
                      }
                    },
                    {
                      "kind": "VoidKeyword"
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "kind": "TypeReference",
            "typeName": {
              "kind": "Identifier",
              "text": "T"
            }
          }
        },
        {
          "kind": "MethodSignature",
          "name": {
            "kind": "Identifier",
            "text": "defer"
          },
          "parameters": [
            {
              "kind": "Parameter",
              "name": {
                "kind": "Identifier",
                "text": "onDisposeAsync"
              },
              "type": {
                "kind": "FunctionType",
                "parameters": [],
                "type": {
                  "kind": "UnionType",
                  "types": [
                    {
                      "kind": "TypeReference",
                      "typeArguments": [
                        {
                          "kind": "VoidKeyword"
                        }
                      ],
                      "typeName": {
                        "kind": "Identifier",
                        "text": "PromiseLike"
                      }
                    },
                    {
                      "kind": "VoidKeyword"
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "kind": "VoidKeyword"
          }
        },
        {
          "kind": "MethodSignature",
          "name": {
            "kind": "Identifier",
            "text": "move"
          },
          "parameters": [],
          "type": {
            "kind": "TypeReference",
            "typeName": {
              "kind": "Identifier",
              "text": "AsyncDisposableStack"
            }
          }
        },
        {
          "kind": "MethodSignature",
          "name": {
            "expression": {
              "expression": {
                "kind": "Identifier",
                "text": "Symbol"
              },
              "kind": "PropertyAccessExpression",
              "name": {
                "kind": "Identifier",
                "text": "asyncDispose"
              }
            },
            "kind": "ComputedPropertyName"
          },
          "parameters": [],
          "type": {
            "kind": "TypeReference",
            "typeArguments": [
              {
                "kind": "VoidKeyword"
              }
            ],
            "typeName": {
              "kind": "Identifier",
              "text": "Promise"
            }
          }
        },
        {
          "kind": "PropertySignature",
          "modifiers": [
            {
              "kind": "ReadonlyKeyword"
            }
          ],
          "name": {
            "expression": {
              "expression": {
                "kind": "Identifier",
                "text": "Symbol"
              },
              "kind": "PropertyAccessExpression",
              "name": {
                "kind": "Identifier",
                "text": "toStringTag"
              }
            },
            "kind": "ComputedPropertyName"
          },
          "type": {
            "kind": "StringKeyword"
          }
        }
      ],
      "name": {
        "kind": "Identifier",
        "text": "AsyncDisposableStack"
      }
    },
    {
      "kind": "InterfaceDeclaration",
      "members": [
        {
          "kind": "ConstructSignature",
          "parameters": [],
          "type": {
            "kind": "TypeReference",
            "typeName": {
              "kind": "Identifier",
              "text": "AsyncDisposableStack"
            }
          }
        },
        {
          "kind": "PropertySignature",
          "modifiers": [
            {
              "kind": "ReadonlyKeyword"
            }
          ],
          "name": {
            "kind": "Identifier",
            "text": "prototype"
          },
          "type": {
            "kind": "TypeReference",
            "typeName": {
              "kind": "Identifier",
              "text": "AsyncDisposableStack"
            }
          }
        }
      ],
      "name": {
        "kind": "Identifier",
        "text": "AsyncDisposableStackConstructor"
      }
    },
    {
      "declarationList": {
        "declarations": [
          {
            "kind": "VariableDeclaration",
            "name": {
              "kind": "Identifier",
              "text": "AsyncDisposableStack"
            },
            "type": {
              "kind": "TypeReference",
              "typeName": {
                "kind": "Identifier",
                "text": "AsyncDisposableStackConstructor"
              }
            }
          }
        ],
        "kind": "VariableDeclarationList"
      },
      "kind": "FirstStatement",
      "modifiers": [
        {
          "kind": "DeclareKeyword"
        }
      ]
    }
  ],
  "text": "/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib=\"true\"/>\n\n/// <reference lib=\"es2015.symbol\" />\n\ninterface SymbolConstructor {\n    /**\n     * A method that is used to release resources held by an object. Called by the semantics of the `using` statement.\n     */\n    readonly dispose: unique symbol;\n\n    /**\n     * A method that is used to asynchronously release resources held by an object. Called by the semantics of the `await using` statement.\n     */\n    readonly asyncDispose: unique symbol;\n}\n\ninterface Disposable {\n    [Symbol.dispose](): void;\n}\n\ninterface AsyncDisposable {\n    [Symbol.asyncDispose](): PromiseLike<void>;\n}\n\ninterface SuppressedError extends Error {\n    error: any;\n    suppressed: any;\n}\n\ninterface SuppressedErrorConstructor {\n    new (error: any, suppressed: any, message?: string): SuppressedError;\n    (error: any, suppressed: any, message?: string): SuppressedError;\n    readonly prototype: SuppressedError;\n}\ndeclare var SuppressedError: SuppressedErrorConstructor;\n\ninterface DisposableStack {\n    /**\n     * Returns a value indicating whether this stack has been disposed.\n     */\n    readonly disposed: boolean;\n    /**\n     * Disposes each resource in the stack in the reverse order that they were added.\n     */\n    dispose(): void;\n    /**\n     * Adds a disposable resource to the stack, returning the resource.\n     * @param value The resource to add. `null` and `undefined` will not be added, but will be returned.\n     * @returns The provided {@link value}.\n     */\n    use<T extends Disposable | null | undefined>(value: T): T;\n    /**\n     * Adds a value and associated disposal callback as a resource to the stack.\n     * @param value The value to add.\n     * @param onDispose The callback to use in place of a `[Symbol.dispose]()` method. Will be invoked with `value`\n     * as the first parameter.\n     * @returns The provided {@link value}.\n     */\n    adopt<T>(value: T, onDispose: (value: T) => void): T;\n    /**\n     * Adds a callback to be invoked when the stack is disposed.\n     */\n    defer(onDispose: () => void): void;\n    /**\n     * Move all resources out of this stack and into a new `DisposableStack`, and marks this stack as disposed.\n     * @example\n     * ```ts\n     * class C {\n     *   #res1: Disposable;\n     *   #res2: Disposable;\n     *   #disposables: DisposableStack;\n     *   constructor() {\n     *     // stack will be disposed when exiting constructor for any reason\n     *     using stack = new DisposableStack();\n     *\n     *     // get first resource\n     *     this.#res1 = stack.use(getResource1());\n     *\n     *     // get second resource. If this fails, both `stack` and `#res1` will be disposed.\n     *     this.#res2 = stack.use(getResource2());\n     *\n     *     // all operations succeeded, move resources out of `stack` so that they aren't disposed\n     *     // when constructor exits\n     *     this.#disposables = stack.move();\n     *   }\n     *\n     *   [Symbol.dispose]() {\n     *     this.#disposables.dispose();\n     *   }\n     * }\n     * ```\n     */\n    move(): DisposableStack;\n    [Symbol.dispose](): void;\n    readonly [Symbol.toStringTag]: string;\n}\n\ninterface DisposableStackConstructor {\n    new (): DisposableStack;\n    readonly prototype: DisposableStack;\n}\ndeclare var DisposableStack: DisposableStackConstructor;\n\ninterface AsyncDisposableStack {\n    /**\n     * Returns a value indicating whether this stack has been disposed.\n     */\n    readonly disposed: boolean;\n    /**\n     * Disposes each resource in the stack in the reverse order that they were added.\n     */\n    disposeAsync(): Promise<void>;\n    /**\n     * Adds a disposable resource to the stack, returning the resource.\n     * @param value The resource to add. `null` and `undefined` will not be added, but will be returned.\n     * @returns The provided {@link value}.\n     */\n    use<T extends AsyncDisposable | Disposable | null | undefined>(value: T): T;\n    /**\n     * Adds a value and associated disposal callback as a resource to the stack.\n     * @param value The value to add.\n     * @param onDisposeAsync The callback to use in place of a `[Symbol.asyncDispose]()` method. Will be invoked with `value`\n     * as the first parameter.\n     * @returns The provided {@link value}.\n     */\n    adopt<T>(value: T, onDisposeAsync: (value: T) => PromiseLike<void> | void): T;\n    /**\n     * Adds a callback to be invoked when the stack is disposed.\n     */\n    defer(onDisposeAsync: () => PromiseLike<void> | void): void;\n    /**\n     * Move all resources out of this stack and into a new `DisposableStack`, and marks this stack as disposed.\n     * @example\n     * ```ts\n     * class C {\n     *   #res1: Disposable;\n     *   #res2: Disposable;\n     *   #disposables: DisposableStack;\n     *   constructor() {\n     *     // stack will be disposed when exiting constructor for any reason\n     *     using stack = new DisposableStack();\n     *\n     *     // get first resource\n     *     this.#res1 = stack.use(getResource1());\n     *\n     *     // get second resource. If this fails, both `stack` and `#res1` will be disposed.\n     *     this.#res2 = stack.use(getResource2());\n     *\n     *     // all operations succeeded, move resources out of `stack` so that they aren't disposed\n     *     // when constructor exits\n     *     this.#disposables = stack.move();\n     *   }\n     *\n     *   [Symbol.dispose]() {\n     *     this.#disposables.dispose();\n     *   }\n     * }\n     * ```\n     */\n    move(): AsyncDisposableStack;\n    [Symbol.asyncDispose](): Promise<void>;\n    readonly [Symbol.toStringTag]: string;\n}\n\ninterface AsyncDisposableStackConstructor {\n    new (): AsyncDisposableStack;\n    readonly prototype: AsyncDisposableStack;\n}\ndeclare var AsyncDisposableStack: AsyncDisposableStackConstructor;\n",
  "typeReferenceDirectives": []
}
