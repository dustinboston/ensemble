import * as types from '../../types.ts';
export declare const mathFunctions: Array<[string, types.Closure]>;
export declare function mathAbs(...astArgs: types.AstNode[]): types.AstNode;
export declare function mathAcos(...astArgs: types.AstNode[]): types.AstNode;
export declare function mathAcosh(...astArgs: types.AstNode[]): types.AstNode;
export declare function mathAsin(...astArgs: types.AstNode[]): types.AstNode;
export declare function mathAsinh(...astArgs: types.AstNode[]): types.AstNode;
export declare function mathAtan(...astArgs: types.AstNode[]): types.AstNode;
export declare function mathAtan2(...astArgs: types.AstNode[]): types.AstNode;
export declare function mathAtanh(...astArgs: types.AstNode[]): types.AstNode;
export declare function mathCbrt(...astArgs: types.AstNode[]): types.AstNode;
export declare function mathCeil(...astArgs: types.AstNode[]): types.AstNode;
export declare function mathClz32(...astArgs: types.AstNode[]): types.AstNode;
export declare function mathCos(...astArgs: types.AstNode[]): types.AstNode;
export declare function mathCosh(...astArgs: types.AstNode[]): types.AstNode;
export declare function mathExp(...astArgs: types.AstNode[]): types.AstNode;
export declare function mathExpm1(...astArgs: types.AstNode[]): types.AstNode;
export declare function mathFloor(...astArgs: types.AstNode[]): types.AstNode;
export declare function mathFround(...astArgs: types.AstNode[]): types.AstNode;
export declare function mathHypot(...astArgs: types.AstNode[]): types.AstNode;
export declare function mathImul(...astArgs: types.AstNode[]): types.AstNode;
export declare function mathLog(...astArgs: types.AstNode[]): types.AstNode;
export declare function mathLog10(...astArgs: types.AstNode[]): types.AstNode;
export declare function mathLog1p(...astArgs: types.AstNode[]): types.AstNode;
export declare function mathLog2(...astArgs: types.AstNode[]): types.AstNode;
export declare function mathMax(...astArgs: types.AstNode[]): types.AstNode;
export declare function mathMin(...astArgs: types.AstNode[]): types.AstNode;
export declare function mathPow(...astArgs: types.AstNode[]): types.AstNode;
export declare function mathRandom(...astArgs: types.AstNode[]): types.AstNode;
export declare function mathRound(...astArgs: types.AstNode[]): types.AstNode;
export declare function mathSign(...astArgs: types.AstNode[]): types.AstNode;
export declare function mathSin(...astArgs: types.AstNode[]): types.AstNode;
export declare function mathSinh(...astArgs: types.AstNode[]): types.AstNode;
export declare function mathSqrt(...astArgs: types.AstNode[]): types.AstNode;
export declare function mathTan(...astArgs: types.AstNode[]): types.AstNode;
export declare function mathTanh(...astArgs: types.AstNode[]): types.AstNode;
export declare function mathTrunc(...astArgs: types.AstNode[]): types.AstNode;
export declare function mathE(...astArgs: types.AstNode[]): types.AstNode;
export declare function mathLn10(...astArgs: types.AstNode[]): types.AstNode;
export declare function mathLn2(...astArgs: types.AstNode[]): types.AstNode;
export declare function mathLog10e(...astArgs: types.AstNode[]): types.AstNode;
export declare function mathLog23(...astArgs: types.AstNode[]): types.AstNode;
export declare function mathPi(...astArgs: types.AstNode[]): types.AstNode;
export declare function mathSqrt12(...astArgs: types.AstNode[]): types.AstNode;
export declare function mathSqrt2(...astArgs: types.AstNode[]): types.AstNode;
