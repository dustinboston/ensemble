import * as types from '../../types.ts';
export declare const numberFunctions: Array<[string, types.Closure]>;
export declare function newNumber(...astArgs: types.AstNode[]): types.AstNode;
export declare function numberIsFinite(...astArgs: types.AstNode[]): types.AstNode;
export declare function numberIsInteger(...astArgs: types.AstNode[]): types.AstNode;
export declare function numberIsNaN(...astArgs: types.AstNode[]): types.AstNode;
export declare function numberIsSafeInteger(...astArgs: types.AstNode[]): types.AstNode;
export declare function numberParseFloat(...astArgs: types.AstNode[]): types.AstNode;
export declare function numberParseInt(...astArgs: types.AstNode[]): types.AstNode;
export declare function numberEpsilon(...astArgs: types.AstNode[]): types.AstNode;
export declare function numberMaxSafeInteger(...astArgs: types.AstNode[]): types.AstNode;
export declare function numberMaxValue(...astArgs: types.AstNode[]): types.AstNode;
export declare function numberMinSafeInteger(...astArgs: types.AstNode[]): types.AstNode;
export declare function numberMinValue(...astArgs: types.AstNode[]): types.AstNode;
export declare function numberNaN(...astArgs: types.AstNode[]): types.AstNode;
export declare function numberNegativeInfinity(...astArgs: types.AstNode[]): types.AstNode;
export declare function numberPositiveInfinity(...astArgs: types.AstNode[]): types.AstNode;
export declare function numberPrototypeToExponential(...astArgs: types.AstNode[]): types.AstNode;
export declare function numberPrototypeToFixed(...astArgs: types.AstNode[]): types.AstNode;
export declare function numberPrototypeToPrecision(...astArgs: types.AstNode[]): types.AstNode;
export declare function numberPrototypeToString(...astArgs: types.AstNode[]): types.AstNode;
