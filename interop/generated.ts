const interop = new Map<string, any>();
interop.set("AggregateError", AggregateError)
interop.set("AggregateError.errors", AggregateError.prototype.errors)
interop.set("AggregateError.new", (...args: unknown[]) => Reflect.construct(AggregateError, args))
interop.set("AggregateError.prototype", AggregateError.prototype)
interop.set("Array", Array)
interop.set("Array.at", Array.prototype.at)
interop.set("Array.concat", Array.prototype.concat)
interop.set("Array.copyWithin", Array.prototype.copyWithin)
interop.set("Array.entries", Array.prototype.entries)
interop.set("Array.every", Array.prototype.every)
interop.set("Array.fill", Array.prototype.fill)
interop.set("Array.filter", Array.prototype.filter)
interop.set("Array.find", Array.prototype.find)
interop.set("Array.findIndex", Array.prototype.findIndex)
interop.set("Array.findLast", Array.prototype.findLast)
interop.set("Array.findLastIndex", Array.prototype.findLastIndex)
interop.set("Array.flat", Array.prototype.flat)
interop.set("Array.flatMap", Array.prototype.flatMap)
interop.set("Array.forEach", Array.prototype.forEach)
interop.set("Array.includes", Array.prototype.includes)
interop.set("Array.indexOf", Array.prototype.indexOf)
interop.set("Array.isArray", Array.isArray)
interop.set("Array.join", Array.prototype.join)
interop.set("Array.keys", Array.prototype.keys)
interop.set("Array.lastIndexOf", Array.prototype.lastIndexOf)
interop.set("Array.length", Array.prototype.length)
interop.set("Array.map", Array.prototype.map)
interop.set("Array.new", (...args: unknown[]) => Reflect.construct(Array, args))
interop.set("Array.pop", Array.prototype.pop)
interop.set("Array.prototype", Array.prototype)
interop.set("Array.push", Array.prototype.push)
interop.set("Array.reduce", Array.prototype.reduce)
interop.set("Array.reduceRight", Array.prototype.reduceRight)
interop.set("Array.reverse", Array.prototype.reverse)
interop.set("Array.shift", Array.prototype.shift)
interop.set("Array.slice", Array.prototype.slice)
interop.set("Array.some", Array.prototype.some)
interop.set("Array.sort", Array.prototype.sort)
interop.set("Array.splice", Array.prototype.splice)
interop.set("Array.toLocaleString", Array.prototype.toLocaleString)
interop.set("Array.toReversed", Array.prototype.toReversed)
interop.set("Array.toSorted", Array.prototype.toSorted)
interop.set("Array.toSpliced", Array.prototype.toSpliced)
interop.set("Array.toString", Array.prototype.toString)
interop.set("Array.unshift", Array.prototype.unshift)
interop.set("Array.values", Array.prototype.values)
interop.set("Array.with", Array.prototype.with)
interop.set("ArrayBuffer", ArrayBuffer)
interop.set("ArrayBuffer.byteLength", ArrayBuffer.prototype.byteLength)
interop.set("ArrayBuffer.isView", ArrayBuffer.isView)
interop.set("ArrayBuffer.new", (...args: unknown[]) => Reflect.construct(ArrayBuffer, args))
interop.set("ArrayBuffer.prototype", ArrayBuffer.prototype)
interop.set("ArrayBuffer.slice", ArrayBuffer.prototype.slice)
interop.set("Array[Symbol.iterator]", Array.prototype[Symbol.iterator])
interop.set("AsyncDisposableStack", AsyncDisposableStack)
interop.set("AsyncDisposableStack.adopt", AsyncDisposableStack.prototype.adopt)
interop.set("AsyncDisposableStack.defer", AsyncDisposableStack.prototype.defer)
interop.set("AsyncDisposableStack.disposeAsync", AsyncDisposableStack.prototype.disposeAsync)
interop.set("AsyncDisposableStack.disposed", AsyncDisposableStack.prototype.disposed)
interop.set("AsyncDisposableStack.move", AsyncDisposableStack.prototype.move)
interop.set("AsyncDisposableStack.new", (...args: unknown[]) => Reflect.construct(AsyncDisposableStack, args))
interop.set("AsyncDisposableStack.prototype", AsyncDisposableStack.prototype)
interop.set("AsyncDisposableStack.use", AsyncDisposableStack.prototype.use)
interop.set("AsyncDisposableStack[Symbol.asyncDispose]", AsyncDisposableStack.prototype[Symbol.asyncDispose])
interop.set("Atomics", Atomics)
interop.set("Atomics.add", Atomics.add)
interop.set("Atomics.and", Atomics.and)
interop.set("Atomics.compareExchange", Atomics.compareExchange)
interop.set("Atomics.exchange", Atomics.exchange)
interop.set("Atomics.isLockFree", Atomics.isLockFree)
interop.set("Atomics.load", Atomics.load)
interop.set("Atomics.notify", Atomics.notify)
interop.set("Atomics.or", Atomics.or)
interop.set("Atomics.store", Atomics.store)
interop.set("Atomics.sub", Atomics.sub)
interop.set("Atomics.wait", Atomics.wait)
interop.set("Atomics.waitAsync", Atomics.waitAsync)
interop.set("Atomics.xor", Atomics.xor)
interop.set("BigInt", BigInt)
interop.set("BigInt.asIntN", BigInt.asIntN)
interop.set("BigInt.asUintN", BigInt.asUintN)
interop.set("BigInt.prototype", BigInt.prototype)
interop.set("BigInt.toLocaleString", BigInt.prototype.toLocaleString)
interop.set("BigInt.toString", BigInt.prototype.toString)
interop.set("BigInt.valueOf", BigInt.prototype.valueOf)
interop.set("BigInt64Array", BigInt64Array)
interop.set("BigInt64Array.at", BigInt64Array.prototype.at)
interop.set("BigInt64Array.buffer", BigInt64Array.prototype.buffer)
interop.set("BigInt64Array.byteLength", BigInt64Array.prototype.byteLength)
interop.set("BigInt64Array.byteOffset", BigInt64Array.prototype.byteOffset)
interop.set("BigInt64Array.copyWithin", BigInt64Array.prototype.copyWithin)
interop.set("BigInt64Array.entries", BigInt64Array.prototype.entries)
interop.set("BigInt64Array.every", BigInt64Array.prototype.every)
interop.set("BigInt64Array.fill", BigInt64Array.prototype.fill)
interop.set("BigInt64Array.filter", BigInt64Array.prototype.filter)
interop.set("BigInt64Array.find", BigInt64Array.prototype.find)
interop.set("BigInt64Array.findIndex", BigInt64Array.prototype.findIndex)
interop.set("BigInt64Array.findLast", BigInt64Array.prototype.findLast)
interop.set("BigInt64Array.findLastIndex", BigInt64Array.prototype.findLastIndex)
interop.set("BigInt64Array.forEach", BigInt64Array.prototype.forEach)
interop.set("BigInt64Array.from", BigInt64Array.from)
interop.set("BigInt64Array.includes", BigInt64Array.prototype.includes)
interop.set("BigInt64Array.indexOf", BigInt64Array.prototype.indexOf)
interop.set("BigInt64Array.join", BigInt64Array.prototype.join)
interop.set("BigInt64Array.keys", BigInt64Array.prototype.keys)
interop.set("BigInt64Array.lastIndexOf", BigInt64Array.prototype.lastIndexOf)
interop.set("BigInt64Array.length", BigInt64Array.prototype.length)
interop.set("BigInt64Array.map", BigInt64Array.prototype.map)
interop.set("BigInt64Array.new", (...args: unknown[]) => Reflect.construct(BigInt64Array, args))
interop.set("BigInt64Array.of", BigInt64Array.of)
interop.set("BigInt64Array.prototype", BigInt64Array.prototype)
interop.set("BigInt64Array.reduce", BigInt64Array.prototype.reduce)
interop.set("BigInt64Array.reduceRight", BigInt64Array.prototype.reduceRight)
interop.set("BigInt64Array.reverse", BigInt64Array.prototype.reverse)
interop.set("BigInt64Array.set", BigInt64Array.prototype.set)
interop.set("BigInt64Array.slice", BigInt64Array.prototype.slice)
interop.set("BigInt64Array.some", BigInt64Array.prototype.some)
interop.set("BigInt64Array.sort", BigInt64Array.prototype.sort)
interop.set("BigInt64Array.subarray", BigInt64Array.prototype.subarray)
interop.set("BigInt64Array.toLocaleString", BigInt64Array.prototype.toLocaleString)
interop.set("BigInt64Array.toReversed", BigInt64Array.prototype.toReversed)
interop.set("BigInt64Array.toSorted", BigInt64Array.prototype.toSorted)
interop.set("BigInt64Array.toString", BigInt64Array.prototype.toString)
interop.set("BigInt64Array.valueOf", BigInt64Array.prototype.valueOf)
interop.set("BigInt64Array.values", BigInt64Array.prototype.values)
interop.set("BigInt64Array.with", BigInt64Array.prototype.with)
interop.set("BigInt64Array[Symbol.iterator]", BigInt64Array.prototype[Symbol.iterator])
interop.set("BigUint64Array", BigUint64Array)
interop.set("BigUint64Array.at", BigUint64Array.prototype.at)
interop.set("BigUint64Array.buffer", BigUint64Array.prototype.buffer)
interop.set("BigUint64Array.byteLength", BigUint64Array.prototype.byteLength)
interop.set("BigUint64Array.byteOffset", BigUint64Array.prototype.byteOffset)
interop.set("BigUint64Array.copyWithin", BigUint64Array.prototype.copyWithin)
interop.set("BigUint64Array.entries", BigUint64Array.prototype.entries)
interop.set("BigUint64Array.every", BigUint64Array.prototype.every)
interop.set("BigUint64Array.fill", BigUint64Array.prototype.fill)
interop.set("BigUint64Array.filter", BigUint64Array.prototype.filter)
interop.set("BigUint64Array.find", BigUint64Array.prototype.find)
interop.set("BigUint64Array.findIndex", BigUint64Array.prototype.findIndex)
interop.set("BigUint64Array.findLast", BigUint64Array.prototype.findLast)
interop.set("BigUint64Array.findLastIndex", BigUint64Array.prototype.findLastIndex)
interop.set("BigUint64Array.forEach", BigUint64Array.prototype.forEach)
interop.set("BigUint64Array.from", BigUint64Array.from)
interop.set("BigUint64Array.includes", BigUint64Array.prototype.includes)
interop.set("BigUint64Array.indexOf", BigUint64Array.prototype.indexOf)
interop.set("BigUint64Array.join", BigUint64Array.prototype.join)
interop.set("BigUint64Array.keys", BigUint64Array.prototype.keys)
interop.set("BigUint64Array.lastIndexOf", BigUint64Array.prototype.lastIndexOf)
interop.set("BigUint64Array.length", BigUint64Array.prototype.length)
interop.set("BigUint64Array.map", BigUint64Array.prototype.map)
interop.set("BigUint64Array.new", (...args: unknown[]) => Reflect.construct(BigUint64Array, args))
interop.set("BigUint64Array.of", BigUint64Array.of)
interop.set("BigUint64Array.prototype", BigUint64Array.prototype)
interop.set("BigUint64Array.reduce", BigUint64Array.prototype.reduce)
interop.set("BigUint64Array.reduceRight", BigUint64Array.prototype.reduceRight)
interop.set("BigUint64Array.reverse", BigUint64Array.prototype.reverse)
interop.set("BigUint64Array.set", BigUint64Array.prototype.set)
interop.set("BigUint64Array.slice", BigUint64Array.prototype.slice)
interop.set("BigUint64Array.some", BigUint64Array.prototype.some)
interop.set("BigUint64Array.sort", BigUint64Array.prototype.sort)
interop.set("BigUint64Array.subarray", BigUint64Array.prototype.subarray)
interop.set("BigUint64Array.toLocaleString", BigUint64Array.prototype.toLocaleString)
interop.set("BigUint64Array.toReversed", BigUint64Array.prototype.toReversed)
interop.set("BigUint64Array.toSorted", BigUint64Array.prototype.toSorted)
interop.set("BigUint64Array.toString", BigUint64Array.prototype.toString)
interop.set("BigUint64Array.valueOf", BigUint64Array.prototype.valueOf)
interop.set("BigUint64Array.values", BigUint64Array.prototype.values)
interop.set("BigUint64Array.with", BigUint64Array.prototype.with)
interop.set("BigUint64Array[Symbol.iterator]", BigUint64Array.prototype[Symbol.iterator])
interop.set("Boolean", Boolean)
interop.set("Boolean.new", (...args: unknown[]) => Reflect.construct(Boolean, args))
interop.set("Boolean.prototype", Boolean.prototype)
interop.set("Boolean.valueOf", Boolean.prototype.valueOf)
interop.set("DataView", DataView)
interop.set("DataView.buffer", DataView.prototype.buffer)
interop.set("DataView.byteLength", DataView.prototype.byteLength)
interop.set("DataView.byteOffset", DataView.prototype.byteOffset)
interop.set("DataView.getBigInt64", DataView.prototype.getBigInt64)
interop.set("DataView.getBigUint64", DataView.prototype.getBigUint64)
interop.set("DataView.getFloat32", DataView.prototype.getFloat32)
interop.set("DataView.getFloat64", DataView.prototype.getFloat64)
interop.set("DataView.getInt16", DataView.prototype.getInt16)
interop.set("DataView.getInt32", DataView.prototype.getInt32)
interop.set("DataView.getInt8", DataView.prototype.getInt8)
interop.set("DataView.getUint16", DataView.prototype.getUint16)
interop.set("DataView.getUint32", DataView.prototype.getUint32)
interop.set("DataView.getUint8", DataView.prototype.getUint8)
interop.set("DataView.new", (...args: unknown[]) => Reflect.construct(DataView, args))
interop.set("DataView.prototype", DataView.prototype)
interop.set("DataView.setBigInt64", DataView.prototype.setBigInt64)
interop.set("DataView.setBigUint64", DataView.prototype.setBigUint64)
interop.set("DataView.setFloat32", DataView.prototype.setFloat32)
interop.set("DataView.setFloat64", DataView.prototype.setFloat64)
interop.set("DataView.setInt16", DataView.prototype.setInt16)
interop.set("DataView.setInt32", DataView.prototype.setInt32)
interop.set("DataView.setInt8", DataView.prototype.setInt8)
interop.set("DataView.setUint16", DataView.prototype.setUint16)
interop.set("DataView.setUint32", DataView.prototype.setUint32)
interop.set("DataView.setUint8", DataView.prototype.setUint8)
interop.set("Date", Date)
interop.set("Date.UTC", Date.UTC)
interop.set("Date.getDate", Date.prototype.getDate)
interop.set("Date.getDay", Date.prototype.getDay)
interop.set("Date.getFullYear", Date.prototype.getFullYear)
interop.set("Date.getHours", Date.prototype.getHours)
interop.set("Date.getMilliseconds", Date.prototype.getMilliseconds)
interop.set("Date.getMinutes", Date.prototype.getMinutes)
interop.set("Date.getMonth", Date.prototype.getMonth)
interop.set("Date.getSeconds", Date.prototype.getSeconds)
interop.set("Date.getTime", Date.prototype.getTime)
interop.set("Date.getTimezoneOffset", Date.prototype.getTimezoneOffset)
interop.set("Date.getUTCDate", Date.prototype.getUTCDate)
interop.set("Date.getUTCDay", Date.prototype.getUTCDay)
interop.set("Date.getUTCFullYear", Date.prototype.getUTCFullYear)
interop.set("Date.getUTCHours", Date.prototype.getUTCHours)
interop.set("Date.getUTCMilliseconds", Date.prototype.getUTCMilliseconds)
interop.set("Date.getUTCMinutes", Date.prototype.getUTCMinutes)
interop.set("Date.getUTCMonth", Date.prototype.getUTCMonth)
interop.set("Date.getUTCSeconds", Date.prototype.getUTCSeconds)
interop.set("Date.new", (...args: unknown[]) => Reflect.construct(Date, args))
interop.set("Date.now", Date.now)
interop.set("Date.parse", Date.parse)
interop.set("Date.prototype", Date.prototype)
interop.set("Date.setDate", Date.prototype.setDate)
interop.set("Date.setFullYear", Date.prototype.setFullYear)
interop.set("Date.setHours", Date.prototype.setHours)
interop.set("Date.setMilliseconds", Date.prototype.setMilliseconds)
interop.set("Date.setMinutes", Date.prototype.setMinutes)
interop.set("Date.setMonth", Date.prototype.setMonth)
interop.set("Date.setSeconds", Date.prototype.setSeconds)
interop.set("Date.setTime", Date.prototype.setTime)
interop.set("Date.setUTCDate", Date.prototype.setUTCDate)
interop.set("Date.setUTCFullYear", Date.prototype.setUTCFullYear)
interop.set("Date.setUTCHours", Date.prototype.setUTCHours)
interop.set("Date.setUTCMilliseconds", Date.prototype.setUTCMilliseconds)
interop.set("Date.setUTCMinutes", Date.prototype.setUTCMinutes)
interop.set("Date.setUTCMonth", Date.prototype.setUTCMonth)
interop.set("Date.setUTCSeconds", Date.prototype.setUTCSeconds)
interop.set("Date.toDateString", Date.prototype.toDateString)
interop.set("Date.toISOString", Date.prototype.toISOString)
interop.set("Date.toJSON", Date.prototype.toJSON)
interop.set("Date.toLocaleDateString", Date.prototype.toLocaleDateString)
interop.set("Date.toLocaleString", Date.prototype.toLocaleString)
interop.set("Date.toLocaleTimeString", Date.prototype.toLocaleTimeString)
interop.set("Date.toString", Date.prototype.toString)
interop.set("Date.toTimeString", Date.prototype.toTimeString)
interop.set("Date.toUTCString", Date.prototype.toUTCString)
interop.set("Date.valueOf", Date.prototype.valueOf)
interop.set("Date[Symbol.toPrimitive]", Date.prototype[Symbol.toPrimitive])
interop.set("DisposableStack", DisposableStack)
interop.set("DisposableStack.adopt", DisposableStack.prototype.adopt)
interop.set("DisposableStack.defer", DisposableStack.prototype.defer)
interop.set("DisposableStack.dispose", DisposableStack.prototype.dispose)
interop.set("DisposableStack.disposed", DisposableStack.prototype.disposed)
interop.set("DisposableStack.move", DisposableStack.prototype.move)
interop.set("DisposableStack.new", (...args: unknown[]) => Reflect.construct(DisposableStack, args))
interop.set("DisposableStack.prototype", DisposableStack.prototype)
interop.set("DisposableStack.use", DisposableStack.prototype.use)
interop.set("DisposableStack[Symbol.dispose]", DisposableStack.prototype[Symbol.dispose])
interop.set("Error", Error)
interop.set("Error.cause", Error.prototype.cause)
interop.set("Error.message", Error.prototype.message)
interop.set("Error.name", Error.prototype.name)
interop.set("Error.new", (...args: unknown[]) => Reflect.construct(Error, args))
interop.set("Error.prototype", Error.prototype)
interop.set("Error.stack", Error.prototype.stack)
interop.set("EvalError", EvalError)
interop.set("EvalError.message", EvalError.prototype.message)
interop.set("EvalError.name", EvalError.prototype.name)
interop.set("EvalError.new", (...args: unknown[]) => Reflect.construct(EvalError, args))
interop.set("EvalError.prototype", EvalError.prototype)
interop.set("EvalError.stack", EvalError.prototype.stack)
interop.set("FinalizationRegistry", FinalizationRegistry)
interop.set("FinalizationRegistry.new", (...args: unknown[]) => Reflect.construct(FinalizationRegistry, args))
interop.set("FinalizationRegistry.prototype", FinalizationRegistry.prototype)
interop.set("FinalizationRegistry.register", FinalizationRegistry.prototype.register)
interop.set("FinalizationRegistry.unregister", FinalizationRegistry.prototype.unregister)
interop.set("Float32Array", Float32Array)
interop.set("Float32Array.at", Float32Array.prototype.at)
interop.set("Float32Array.buffer", Float32Array.prototype.buffer)
interop.set("Float32Array.byteLength", Float32Array.prototype.byteLength)
interop.set("Float32Array.byteOffset", Float32Array.prototype.byteOffset)
interop.set("Float32Array.copyWithin", Float32Array.prototype.copyWithin)
interop.set("Float32Array.entries", Float32Array.prototype.entries)
interop.set("Float32Array.every", Float32Array.prototype.every)
interop.set("Float32Array.fill", Float32Array.prototype.fill)
interop.set("Float32Array.filter", Float32Array.prototype.filter)
interop.set("Float32Array.find", Float32Array.prototype.find)
interop.set("Float32Array.findIndex", Float32Array.prototype.findIndex)
interop.set("Float32Array.findLast", Float32Array.prototype.findLast)
interop.set("Float32Array.findLastIndex", Float32Array.prototype.findLastIndex)
interop.set("Float32Array.forEach", Float32Array.prototype.forEach)
interop.set("Float32Array.from", Float32Array.from)
interop.set("Float32Array.includes", Float32Array.prototype.includes)
interop.set("Float32Array.indexOf", Float32Array.prototype.indexOf)
interop.set("Float32Array.join", Float32Array.prototype.join)
interop.set("Float32Array.keys", Float32Array.prototype.keys)
interop.set("Float32Array.lastIndexOf", Float32Array.prototype.lastIndexOf)
interop.set("Float32Array.length", Float32Array.prototype.length)
interop.set("Float32Array.map", Float32Array.prototype.map)
interop.set("Float32Array.new", (...args: unknown[]) => Reflect.construct(Float32Array, args))
interop.set("Float32Array.of", Float32Array.of)
interop.set("Float32Array.prototype", Float32Array.prototype)
interop.set("Float32Array.reduce", Float32Array.prototype.reduce)
interop.set("Float32Array.reduceRight", Float32Array.prototype.reduceRight)
interop.set("Float32Array.reverse", Float32Array.prototype.reverse)
interop.set("Float32Array.set", Float32Array.prototype.set)
interop.set("Float32Array.slice", Float32Array.prototype.slice)
interop.set("Float32Array.some", Float32Array.prototype.some)
interop.set("Float32Array.sort", Float32Array.prototype.sort)
interop.set("Float32Array.subarray", Float32Array.prototype.subarray)
interop.set("Float32Array.toLocaleString", Float32Array.prototype.toLocaleString)
interop.set("Float32Array.toReversed", Float32Array.prototype.toReversed)
interop.set("Float32Array.toSorted", Float32Array.prototype.toSorted)
interop.set("Float32Array.toString", Float32Array.prototype.toString)
interop.set("Float32Array.valueOf", Float32Array.prototype.valueOf)
interop.set("Float32Array.values", Float32Array.prototype.values)
interop.set("Float32Array.with", Float32Array.prototype.with)
interop.set("Float32Array[Symbol.iterator]", Float32Array.prototype[Symbol.iterator])
interop.set("Float64Array", Float64Array)
interop.set("Float64Array.at", Float64Array.prototype.at)
interop.set("Float64Array.buffer", Float64Array.prototype.buffer)
interop.set("Float64Array.byteLength", Float64Array.prototype.byteLength)
interop.set("Float64Array.byteOffset", Float64Array.prototype.byteOffset)
interop.set("Float64Array.copyWithin", Float64Array.prototype.copyWithin)
interop.set("Float64Array.entries", Float64Array.prototype.entries)
interop.set("Float64Array.every", Float64Array.prototype.every)
interop.set("Float64Array.fill", Float64Array.prototype.fill)
interop.set("Float64Array.filter", Float64Array.prototype.filter)
interop.set("Float64Array.find", Float64Array.prototype.find)
interop.set("Float64Array.findIndex", Float64Array.prototype.findIndex)
interop.set("Float64Array.findLast", Float64Array.prototype.findLast)
interop.set("Float64Array.findLastIndex", Float64Array.prototype.findLastIndex)
interop.set("Float64Array.forEach", Float64Array.prototype.forEach)
interop.set("Float64Array.from", Float64Array.from)
interop.set("Float64Array.includes", Float64Array.prototype.includes)
interop.set("Float64Array.indexOf", Float64Array.prototype.indexOf)
interop.set("Float64Array.join", Float64Array.prototype.join)
interop.set("Float64Array.keys", Float64Array.prototype.keys)
interop.set("Float64Array.lastIndexOf", Float64Array.prototype.lastIndexOf)
interop.set("Float64Array.length", Float64Array.prototype.length)
interop.set("Float64Array.map", Float64Array.prototype.map)
interop.set("Float64Array.new", (...args: unknown[]) => Reflect.construct(Float64Array, args))
interop.set("Float64Array.of", Float64Array.of)
interop.set("Float64Array.prototype", Float64Array.prototype)
interop.set("Float64Array.reduce", Float64Array.prototype.reduce)
interop.set("Float64Array.reduceRight", Float64Array.prototype.reduceRight)
interop.set("Float64Array.reverse", Float64Array.prototype.reverse)
interop.set("Float64Array.set", Float64Array.prototype.set)
interop.set("Float64Array.slice", Float64Array.prototype.slice)
interop.set("Float64Array.some", Float64Array.prototype.some)
interop.set("Float64Array.sort", Float64Array.prototype.sort)
interop.set("Float64Array.subarray", Float64Array.prototype.subarray)
interop.set("Float64Array.toLocaleString", Float64Array.prototype.toLocaleString)
interop.set("Float64Array.toReversed", Float64Array.prototype.toReversed)
interop.set("Float64Array.toSorted", Float64Array.prototype.toSorted)
interop.set("Float64Array.toString", Float64Array.prototype.toString)
interop.set("Float64Array.valueOf", Float64Array.prototype.valueOf)
interop.set("Float64Array.values", Float64Array.prototype.values)
interop.set("Float64Array.with", Float64Array.prototype.with)
interop.set("Float64Array[Symbol.iterator]", Float64Array.prototype[Symbol.iterator])
interop.set("Function", Function)
interop.set("Function.apply", Function.prototype.apply)
interop.set("Function.arguments", Function.prototype.arguments)
interop.set("Function.bind", Function.prototype.bind)
interop.set("Function.call", Function.prototype.call)
interop.set("Function.caller", Function.prototype.caller)
interop.set("Function.length", Function.prototype.length)
interop.set("Function.name", Function.prototype.name)
interop.set("Function.new", (...args: unknown[]) => Reflect.construct(Function, args))
interop.set("Function.prototype", Function.prototype)
interop.set("Function.toString", Function.prototype.toString)
interop.set("Function[Symbol.hasInstance]", Function.prototype[Symbol.hasInstance])
interop.set("Infinity", Infinity)
interop.set("Int16Array", Int16Array)
interop.set("Int16Array.at", Int16Array.prototype.at)
interop.set("Int16Array.buffer", Int16Array.prototype.buffer)
interop.set("Int16Array.byteLength", Int16Array.prototype.byteLength)
interop.set("Int16Array.byteOffset", Int16Array.prototype.byteOffset)
interop.set("Int16Array.copyWithin", Int16Array.prototype.copyWithin)
interop.set("Int16Array.entries", Int16Array.prototype.entries)
interop.set("Int16Array.every", Int16Array.prototype.every)
interop.set("Int16Array.fill", Int16Array.prototype.fill)
interop.set("Int16Array.filter", Int16Array.prototype.filter)
interop.set("Int16Array.find", Int16Array.prototype.find)
interop.set("Int16Array.findIndex", Int16Array.prototype.findIndex)
interop.set("Int16Array.findLast", Int16Array.prototype.findLast)
interop.set("Int16Array.findLastIndex", Int16Array.prototype.findLastIndex)
interop.set("Int16Array.forEach", Int16Array.prototype.forEach)
interop.set("Int16Array.from", Int16Array.from)
interop.set("Int16Array.includes", Int16Array.prototype.includes)
interop.set("Int16Array.indexOf", Int16Array.prototype.indexOf)
interop.set("Int16Array.join", Int16Array.prototype.join)
interop.set("Int16Array.keys", Int16Array.prototype.keys)
interop.set("Int16Array.lastIndexOf", Int16Array.prototype.lastIndexOf)
interop.set("Int16Array.length", Int16Array.prototype.length)
interop.set("Int16Array.map", Int16Array.prototype.map)
interop.set("Int16Array.new", (...args: unknown[]) => Reflect.construct(Int16Array, args))
interop.set("Int16Array.of", Int16Array.of)
interop.set("Int16Array.prototype", Int16Array.prototype)
interop.set("Int16Array.reduce", Int16Array.prototype.reduce)
interop.set("Int16Array.reduceRight", Int16Array.prototype.reduceRight)
interop.set("Int16Array.reverse", Int16Array.prototype.reverse)
interop.set("Int16Array.set", Int16Array.prototype.set)
interop.set("Int16Array.slice", Int16Array.prototype.slice)
interop.set("Int16Array.some", Int16Array.prototype.some)
interop.set("Int16Array.sort", Int16Array.prototype.sort)
interop.set("Int16Array.subarray", Int16Array.prototype.subarray)
interop.set("Int16Array.toLocaleString", Int16Array.prototype.toLocaleString)
interop.set("Int16Array.toReversed", Int16Array.prototype.toReversed)
interop.set("Int16Array.toSorted", Int16Array.prototype.toSorted)
interop.set("Int16Array.toString", Int16Array.prototype.toString)
interop.set("Int16Array.valueOf", Int16Array.prototype.valueOf)
interop.set("Int16Array.values", Int16Array.prototype.values)
interop.set("Int16Array.with", Int16Array.prototype.with)
interop.set("Int16Array[Symbol.iterator]", Int16Array.prototype[Symbol.iterator])
interop.set("Int32Array", Int32Array)
interop.set("Int32Array.at", Int32Array.prototype.at)
interop.set("Int32Array.buffer", Int32Array.prototype.buffer)
interop.set("Int32Array.byteLength", Int32Array.prototype.byteLength)
interop.set("Int32Array.byteOffset", Int32Array.prototype.byteOffset)
interop.set("Int32Array.copyWithin", Int32Array.prototype.copyWithin)
interop.set("Int32Array.entries", Int32Array.prototype.entries)
interop.set("Int32Array.every", Int32Array.prototype.every)
interop.set("Int32Array.fill", Int32Array.prototype.fill)
interop.set("Int32Array.filter", Int32Array.prototype.filter)
interop.set("Int32Array.find", Int32Array.prototype.find)
interop.set("Int32Array.findIndex", Int32Array.prototype.findIndex)
interop.set("Int32Array.findLast", Int32Array.prototype.findLast)
interop.set("Int32Array.findLastIndex", Int32Array.prototype.findLastIndex)
interop.set("Int32Array.forEach", Int32Array.prototype.forEach)
interop.set("Int32Array.from", Int32Array.from)
interop.set("Int32Array.includes", Int32Array.prototype.includes)
interop.set("Int32Array.indexOf", Int32Array.prototype.indexOf)
interop.set("Int32Array.join", Int32Array.prototype.join)
interop.set("Int32Array.keys", Int32Array.prototype.keys)
interop.set("Int32Array.lastIndexOf", Int32Array.prototype.lastIndexOf)
interop.set("Int32Array.length", Int32Array.prototype.length)
interop.set("Int32Array.map", Int32Array.prototype.map)
interop.set("Int32Array.new", (...args: unknown[]) => Reflect.construct(Int32Array, args))
interop.set("Int32Array.of", Int32Array.of)
interop.set("Int32Array.prototype", Int32Array.prototype)
interop.set("Int32Array.reduce", Int32Array.prototype.reduce)
interop.set("Int32Array.reduceRight", Int32Array.prototype.reduceRight)
interop.set("Int32Array.reverse", Int32Array.prototype.reverse)
interop.set("Int32Array.set", Int32Array.prototype.set)
interop.set("Int32Array.slice", Int32Array.prototype.slice)
interop.set("Int32Array.some", Int32Array.prototype.some)
interop.set("Int32Array.sort", Int32Array.prototype.sort)
interop.set("Int32Array.subarray", Int32Array.prototype.subarray)
interop.set("Int32Array.toLocaleString", Int32Array.prototype.toLocaleString)
interop.set("Int32Array.toReversed", Int32Array.prototype.toReversed)
interop.set("Int32Array.toSorted", Int32Array.prototype.toSorted)
interop.set("Int32Array.toString", Int32Array.prototype.toString)
interop.set("Int32Array.valueOf", Int32Array.prototype.valueOf)
interop.set("Int32Array.values", Int32Array.prototype.values)
interop.set("Int32Array.with", Int32Array.prototype.with)
interop.set("Int32Array[Symbol.iterator]", Int32Array.prototype[Symbol.iterator])
interop.set("Int8Array", Int8Array)
interop.set("Int8Array.at", Int8Array.prototype.at)
interop.set("Int8Array.buffer", Int8Array.prototype.buffer)
interop.set("Int8Array.byteLength", Int8Array.prototype.byteLength)
interop.set("Int8Array.byteOffset", Int8Array.prototype.byteOffset)
interop.set("Int8Array.copyWithin", Int8Array.prototype.copyWithin)
interop.set("Int8Array.entries", Int8Array.prototype.entries)
interop.set("Int8Array.every", Int8Array.prototype.every)
interop.set("Int8Array.fill", Int8Array.prototype.fill)
interop.set("Int8Array.filter", Int8Array.prototype.filter)
interop.set("Int8Array.find", Int8Array.prototype.find)
interop.set("Int8Array.findIndex", Int8Array.prototype.findIndex)
interop.set("Int8Array.findLast", Int8Array.prototype.findLast)
interop.set("Int8Array.findLastIndex", Int8Array.prototype.findLastIndex)
interop.set("Int8Array.forEach", Int8Array.prototype.forEach)
interop.set("Int8Array.from", Int8Array.from)
interop.set("Int8Array.includes", Int8Array.prototype.includes)
interop.set("Int8Array.indexOf", Int8Array.prototype.indexOf)
interop.set("Int8Array.join", Int8Array.prototype.join)
interop.set("Int8Array.keys", Int8Array.prototype.keys)
interop.set("Int8Array.lastIndexOf", Int8Array.prototype.lastIndexOf)
interop.set("Int8Array.length", Int8Array.prototype.length)
interop.set("Int8Array.map", Int8Array.prototype.map)
interop.set("Int8Array.new", (...args: unknown[]) => Reflect.construct(Int8Array, args))
interop.set("Int8Array.of", Int8Array.of)
interop.set("Int8Array.prototype", Int8Array.prototype)
interop.set("Int8Array.reduce", Int8Array.prototype.reduce)
interop.set("Int8Array.reduceRight", Int8Array.prototype.reduceRight)
interop.set("Int8Array.reverse", Int8Array.prototype.reverse)
interop.set("Int8Array.set", Int8Array.prototype.set)
interop.set("Int8Array.slice", Int8Array.prototype.slice)
interop.set("Int8Array.some", Int8Array.prototype.some)
interop.set("Int8Array.sort", Int8Array.prototype.sort)
interop.set("Int8Array.subarray", Int8Array.prototype.subarray)
interop.set("Int8Array.toLocaleString", Int8Array.prototype.toLocaleString)
interop.set("Int8Array.toReversed", Int8Array.prototype.toReversed)
interop.set("Int8Array.toSorted", Int8Array.prototype.toSorted)
interop.set("Int8Array.toString", Int8Array.prototype.toString)
interop.set("Int8Array.valueOf", Int8Array.prototype.valueOf)
interop.set("Int8Array.values", Int8Array.prototype.values)
interop.set("Int8Array.with", Int8Array.prototype.with)
interop.set("Int8Array[Symbol.iterator]", Int8Array.prototype[Symbol.iterator])
interop.set("JSON", JSON)
interop.set("JSON.parse", JSON.parse)
interop.set("JSON.stringify", JSON.stringify)
interop.set("Map", Map)
interop.set("Map.clear", Map.prototype.clear)
interop.set("Map.delete", Map.prototype.delete)
interop.set("Map.forEach", Map.prototype.forEach)
interop.set("Map.get", Map.prototype.get)
interop.set("Map.has", Map.prototype.has)
interop.set("Map.new", (...args: unknown[]) => Reflect.construct(Map, args))
interop.set("Map.prototype", Map.prototype)
interop.set("Map.set", Map.prototype.set)
interop.set("Map.size", Map.prototype.size)
interop.set("Math", Math)
interop.set("Math.E", Math.E)
interop.set("Math.LN10", Math.LN10)
interop.set("Math.LN2", Math.LN2)
interop.set("Math.LOG10E", Math.LOG10E)
interop.set("Math.LOG2E", Math.LOG2E)
interop.set("Math.PI", Math.PI)
interop.set("Math.SQRT2", Math.SQRT2)
interop.set("Math.abs", Math.abs)
interop.set("Math.acos", Math.acos)
interop.set("Math.acosh", Math.acosh)
interop.set("Math.asin", Math.asin)
interop.set("Math.asinh", Math.asinh)
interop.set("Math.atan", Math.atan)
interop.set("Math.atan2", Math.atan2)
interop.set("Math.atanh", Math.atanh)
interop.set("Math.cbrt", Math.cbrt)
interop.set("Math.ceil", Math.ceil)
interop.set("Math.clz32", Math.clz32)
interop.set("Math.cos", Math.cos)
interop.set("Math.cosh", Math.cosh)
interop.set("Math.exp", Math.exp)
interop.set("Math.expm1", Math.expm1)
interop.set("Math.floor", Math.floor)
interop.set("Math.fround", Math.fround)
interop.set("Math.hypot", Math.hypot)
interop.set("Math.imul", Math.imul)
interop.set("Math.log", Math.log)
interop.set("Math.log10", Math.log10)
interop.set("Math.log1p", Math.log1p)
interop.set("Math.log2", Math.log2)
interop.set("Math.max", Math.max)
interop.set("Math.min", Math.min)
interop.set("Math.pow", Math.pow)
interop.set("Math.random", Math.random)
interop.set("Math.round", Math.round)
interop.set("Math.sign", Math.sign)
interop.set("Math.sin", Math.sin)
interop.set("Math.sinh", Math.sinh)
interop.set("Math.sqrt", Math.sqrt)
interop.set("Math.tan", Math.tan)
interop.set("Math.tanh", Math.tanh)
interop.set("Math.trunc", Math.trunc)
interop.set("NaN", NaN)
interop.set("Number", Number)
interop.set("Number.MIN_VALUE", Number.MIN_VALUE)
interop.set("Number.NaN", Number.NaN)
interop.set("Number.POSITIVE_INFINITY", Number.POSITIVE_INFINITY)
interop.set("Number.new", (...args: unknown[]) => Reflect.construct(Number, args))
interop.set("Number.prototype", Number.prototype)
interop.set("Number.toExponential", Number.prototype.toExponential)
interop.set("Number.toFixed", Number.prototype.toFixed)
interop.set("Number.toLocaleString", Number.prototype.toLocaleString)
interop.set("Number.toPrecision", Number.prototype.toPrecision)
interop.set("Number.toString", Number.prototype.toString)
interop.set("Number.valueOf", Number.prototype.valueOf)
interop.set("Object", Object)
interop.set("Object.constructor", Object.prototype.constructor)
interop.set("Object.create", Object.create)
interop.set("Object.defineProperties", Object.defineProperties)
interop.set("Object.defineProperty", Object.defineProperty)
interop.set("Object.freeze", Object.freeze)
interop.set("Object.getOwnPropertyDescriptor", Object.getOwnPropertyDescriptor)
interop.set("Object.getOwnPropertyNames", Object.getOwnPropertyNames)
interop.set("Object.getPrototypeOf", Object.getPrototypeOf)
interop.set("Object.hasOwnProperty", Object.prototype.hasOwnProperty)
interop.set("Object.isExtensible", Object.isExtensible)
interop.set("Object.isFrozen", Object.isFrozen)
interop.set("Object.isPrototypeOf", Object.prototype.isPrototypeOf)
interop.set("Object.isSealed", Object.isSealed)
interop.set("Object.keys", Object.keys)
interop.set("Object.new", (...args: unknown[]) => Reflect.construct(Object, args))
interop.set("Object.preventExtensions", Object.preventExtensions)
interop.set("Object.propertyIsEnumerable", Object.prototype.propertyIsEnumerable)
interop.set("Object.prototype", Object.prototype)
interop.set("Object.seal", Object.seal)
interop.set("Object.toLocaleString", Object.prototype.toLocaleString)
interop.set("Object.toString", Object.prototype.toString)
interop.set("Object.valueOf", Object.prototype.valueOf)
interop.set("Promise", Promise)
interop.set("Promise.all", Promise.all)
interop.set("Promise.finally", Promise.prototype.finally)
interop.set("Promise.new", (...args: unknown[]) => Reflect.construct(Promise, args))
interop.set("Promise.prototype", Promise.prototype)
interop.set("Promise.race", Promise.race)
interop.set("Promise.reject", Promise.reject)
interop.set("Promise.resolve", Promise.resolve)
interop.set("Proxy", Proxy)
interop.set("Proxy.new", (...args: unknown[]) => Reflect.construct(Proxy, args))
interop.set("Proxy.revocable", Proxy.revocable)
interop.set("RangeError", RangeError)
interop.set("RangeError.message", RangeError.prototype.message)
interop.set("RangeError.name", RangeError.prototype.name)
interop.set("RangeError.new", (...args: unknown[]) => Reflect.construct(RangeError, args))
interop.set("RangeError.prototype", RangeError.prototype)
interop.set("RangeError.stack", RangeError.prototype.stack)
interop.set("ReferenceError", ReferenceError)
interop.set("ReferenceError.message", ReferenceError.prototype.message)
interop.set("ReferenceError.name", ReferenceError.prototype.name)
interop.set("ReferenceError.new", (...args: unknown[]) => Reflect.construct(ReferenceError, args))
interop.set("ReferenceError.prototype", ReferenceError.prototype)
interop.set("ReferenceError.stack", ReferenceError.prototype.stack)
interop.set("RegExp", RegExp)
interop.set("RegExp.compile", RegExp.prototype.compile)
interop.set("RegExp.dotAll", RegExp.prototype.dotAll)
interop.set("RegExp.exec", RegExp.prototype.exec)
interop.set("RegExp.flags", RegExp.prototype.flags)
interop.set("RegExp.global", RegExp.prototype.global)
interop.set("RegExp.hasIndices", RegExp.prototype.hasIndices)
interop.set("RegExp.ignoreCase", RegExp.prototype.ignoreCase)
interop.set("RegExp.lastIndex", RegExp.prototype.lastIndex)
interop.set("RegExp.multiline", RegExp.prototype.multiline)
interop.set("RegExp.new", (...args: unknown[]) => Reflect.construct(RegExp, args))
interop.set("RegExp.prototype", RegExp.prototype)
interop.set("RegExp.source", RegExp.prototype.source)
interop.set("RegExp.sticky", RegExp.prototype.sticky)
interop.set("RegExp.test", RegExp.prototype.test)
interop.set("RegExp.unicode", RegExp.prototype.unicode)
interop.set("RegExp.unicodeSets", RegExp.prototype.unicodeSets)
interop.set("RegExp[Symbol.matchAll]", RegExp.prototype[Symbol.matchAll])
interop.set("RegExp[Symbol.match]", RegExp.prototype[Symbol.match])
interop.set("RegExp[Symbol.replace]", RegExp.prototype[Symbol.replace])
interop.set("RegExp[Symbol.search]", RegExp.prototype[Symbol.search])
interop.set("RegExp[Symbol.split]", RegExp.prototype[Symbol.split])
interop.set("Set", Set)
interop.set("Set.add", Set.prototype.add)
interop.set("Set.clear", Set.prototype.clear)
interop.set("Set.delete", Set.prototype.delete)
interop.set("Set.difference", Set.prototype.difference)
interop.set("Set.forEach", Set.prototype.forEach)
interop.set("Set.has", Set.prototype.has)
interop.set("Set.intersection", Set.prototype.intersection)
interop.set("Set.isDisjointFrom", Set.prototype.isDisjointFrom)
interop.set("Set.isSubsetOf", Set.prototype.isSubsetOf)
interop.set("Set.isSupersetOf", Set.prototype.isSupersetOf)
interop.set("Set.new", (...args: unknown[]) => Reflect.construct(Set, args))
interop.set("Set.prototype", Set.prototype)
interop.set("Set.size", Set.prototype.size)
interop.set("Set.symmetricDifference", Set.prototype.symmetricDifference)
interop.set("Set.union", Set.prototype.union)
interop.set("SharedArrayBuffer", SharedArrayBuffer)
interop.set("SharedArrayBuffer.byteLength", SharedArrayBuffer.prototype.byteLength)
interop.set("SharedArrayBuffer.new", (...args: unknown[]) => Reflect.construct(SharedArrayBuffer, args))
interop.set("SharedArrayBuffer.prototype", SharedArrayBuffer.prototype)
interop.set("SharedArrayBuffer.slice", SharedArrayBuffer.prototype.slice)
interop.set("SharedArrayBuffer[Symbol.toStringTag]", SharedArrayBuffer.prototype[Symbol.toStringTag])
interop.set("String", String)
interop.set("String.anchor", String.prototype.anchor)
interop.set("String.at", String.prototype.at)
interop.set("String.big", String.prototype.big)
interop.set("String.blink", String.prototype.blink)
interop.set("String.bold", String.prototype.bold)
interop.set("String.charAt", String.prototype.charAt)
interop.set("String.charCodeAt", String.prototype.charCodeAt)
interop.set("String.codePointAt", String.prototype.codePointAt)
interop.set("String.concat", String.prototype.concat)
interop.set("String.endsWith", String.prototype.endsWith)
interop.set("String.fixed", String.prototype.fixed)
interop.set("String.fontcolor", String.prototype.fontcolor)
interop.set("String.fontsize", String.prototype.fontsize)
interop.set("String.fromCharCode", String.fromCharCode)
interop.set("String.includes", String.prototype.includes)
interop.set("String.indexOf", String.prototype.indexOf)
interop.set("String.isWellFormed", String.prototype.isWellFormed)
interop.set("String.italics", String.prototype.italics)
interop.set("String.lastIndexOf", String.prototype.lastIndexOf)
interop.set("String.length", String.prototype.length)
interop.set("String.link", String.prototype.link)
interop.set("String.localeCompare", String.prototype.localeCompare)
interop.set("String.match", String.prototype.match)
interop.set("String.matchAll", String.prototype.matchAll)
interop.set("String.new", (...args: unknown[]) => Reflect.construct(String, args))
interop.set("String.normalize", String.prototype.normalize)
interop.set("String.padEnd", String.prototype.padEnd)
interop.set("String.padStart", String.prototype.padStart)
interop.set("String.prototype", String.prototype)
interop.set("String.repeat", String.prototype.repeat)
interop.set("String.replace", String.prototype.replace)
interop.set("String.replaceAll", String.prototype.replaceAll)
interop.set("String.search", String.prototype.search)
interop.set("String.slice", String.prototype.slice)
interop.set("String.small", String.prototype.small)
interop.set("String.split", String.prototype.split)
interop.set("String.startsWith", String.prototype.startsWith)
interop.set("String.strike", String.prototype.strike)
interop.set("String.sub", String.prototype.sub)
interop.set("String.substr", String.prototype.substr)
interop.set("String.substring", String.prototype.substring)
interop.set("String.sup", String.prototype.sup)
interop.set("String.toLocaleLowerCase", String.prototype.toLocaleLowerCase)
interop.set("String.toLocaleUpperCase", String.prototype.toLocaleUpperCase)
interop.set("String.toLowerCase", String.prototype.toLowerCase)
interop.set("String.toString", String.prototype.toString)
interop.set("String.toUpperCase", String.prototype.toUpperCase)
interop.set("String.toWellFormed", String.prototype.toWellFormed)
interop.set("String.trim", String.prototype.trim)
interop.set("String.trimEnd", String.prototype.trimEnd)
interop.set("String.trimLeft", String.prototype.trimLeft)
interop.set("String.trimRight", String.prototype.trimRight)
interop.set("String.trimStart", String.prototype.trimStart)
interop.set("String.valueOf", String.prototype.valueOf)
interop.set("String[Symbol.iterator]", String.prototype[Symbol.iterator])
interop.set("SuppressedError", SuppressedError)
interop.set("SuppressedError.error", SuppressedError.prototype.error)
interop.set("SuppressedError.new", (...args: unknown[]) => Reflect.construct(SuppressedError, args))
interop.set("SuppressedError.prototype", SuppressedError.prototype)
interop.set("SuppressedError.suppressed", SuppressedError.prototype.suppressed)
interop.set("Symbol", Symbol)
interop.set("Symbol.description", Symbol.prototype.description)
interop.set("Symbol.for", Symbol.for)
interop.set("Symbol.keyFor", Symbol.keyFor)
interop.set("Symbol.prototype", Symbol.prototype)
interop.set("Symbol[Symbol.toPrimitive]", Symbol.prototype[Symbol.toPrimitive])
interop.set("SyntaxError", SyntaxError)
interop.set("SyntaxError.message", SyntaxError.prototype.message)
interop.set("SyntaxError.name", SyntaxError.prototype.name)
interop.set("SyntaxError.new", (...args: unknown[]) => Reflect.construct(SyntaxError, args))
interop.set("SyntaxError.prototype", SyntaxError.prototype)
interop.set("SyntaxError.stack", SyntaxError.prototype.stack)
interop.set("TypeError", TypeError)
interop.set("TypeError.message", TypeError.prototype.message)
interop.set("TypeError.name", TypeError.prototype.name)
interop.set("TypeError.new", (...args: unknown[]) => Reflect.construct(TypeError, args))
interop.set("TypeError.prototype", TypeError.prototype)
interop.set("TypeError.stack", TypeError.prototype.stack)
interop.set("URIError", URIError)
interop.set("URIError.message", URIError.prototype.message)
interop.set("URIError.name", URIError.prototype.name)
interop.set("URIError.new", (...args: unknown[]) => Reflect.construct(URIError, args))
interop.set("URIError.prototype", URIError.prototype)
interop.set("URIError.stack", URIError.prototype.stack)
interop.set("Uint16Array", Uint16Array)
interop.set("Uint16Array.at", Uint16Array.prototype.at)
interop.set("Uint16Array.buffer", Uint16Array.prototype.buffer)
interop.set("Uint16Array.byteLength", Uint16Array.prototype.byteLength)
interop.set("Uint16Array.byteOffset", Uint16Array.prototype.byteOffset)
interop.set("Uint16Array.copyWithin", Uint16Array.prototype.copyWithin)
interop.set("Uint16Array.entries", Uint16Array.prototype.entries)
interop.set("Uint16Array.every", Uint16Array.prototype.every)
interop.set("Uint16Array.fill", Uint16Array.prototype.fill)
interop.set("Uint16Array.filter", Uint16Array.prototype.filter)
interop.set("Uint16Array.find", Uint16Array.prototype.find)
interop.set("Uint16Array.findIndex", Uint16Array.prototype.findIndex)
interop.set("Uint16Array.findLast", Uint16Array.prototype.findLast)
interop.set("Uint16Array.findLastIndex", Uint16Array.prototype.findLastIndex)
interop.set("Uint16Array.forEach", Uint16Array.prototype.forEach)
interop.set("Uint16Array.from", Uint16Array.from)
interop.set("Uint16Array.includes", Uint16Array.prototype.includes)
interop.set("Uint16Array.indexOf", Uint16Array.prototype.indexOf)
interop.set("Uint16Array.join", Uint16Array.prototype.join)
interop.set("Uint16Array.keys", Uint16Array.prototype.keys)
interop.set("Uint16Array.lastIndexOf", Uint16Array.prototype.lastIndexOf)
interop.set("Uint16Array.length", Uint16Array.prototype.length)
interop.set("Uint16Array.map", Uint16Array.prototype.map)
interop.set("Uint16Array.new", (...args: unknown[]) => Reflect.construct(Uint16Array, args))
interop.set("Uint16Array.of", Uint16Array.of)
interop.set("Uint16Array.prototype", Uint16Array.prototype)
interop.set("Uint16Array.reduce", Uint16Array.prototype.reduce)
interop.set("Uint16Array.reduceRight", Uint16Array.prototype.reduceRight)
interop.set("Uint16Array.reverse", Uint16Array.prototype.reverse)
interop.set("Uint16Array.set", Uint16Array.prototype.set)
interop.set("Uint16Array.slice", Uint16Array.prototype.slice)
interop.set("Uint16Array.some", Uint16Array.prototype.some)
interop.set("Uint16Array.sort", Uint16Array.prototype.sort)
interop.set("Uint16Array.subarray", Uint16Array.prototype.subarray)
interop.set("Uint16Array.toLocaleString", Uint16Array.prototype.toLocaleString)
interop.set("Uint16Array.toReversed", Uint16Array.prototype.toReversed)
interop.set("Uint16Array.toSorted", Uint16Array.prototype.toSorted)
interop.set("Uint16Array.toString", Uint16Array.prototype.toString)
interop.set("Uint16Array.valueOf", Uint16Array.prototype.valueOf)
interop.set("Uint16Array.values", Uint16Array.prototype.values)
interop.set("Uint16Array.with", Uint16Array.prototype.with)
interop.set("Uint16Array[Symbol.iterator]", Uint16Array.prototype[Symbol.iterator])
interop.set("Uint32Array", Uint32Array)
interop.set("Uint32Array.at", Uint32Array.prototype.at)
interop.set("Uint32Array.buffer", Uint32Array.prototype.buffer)
interop.set("Uint32Array.byteLength", Uint32Array.prototype.byteLength)
interop.set("Uint32Array.byteOffset", Uint32Array.prototype.byteOffset)
interop.set("Uint32Array.copyWithin", Uint32Array.prototype.copyWithin)
interop.set("Uint32Array.entries", Uint32Array.prototype.entries)
interop.set("Uint32Array.every", Uint32Array.prototype.every)
interop.set("Uint32Array.fill", Uint32Array.prototype.fill)
interop.set("Uint32Array.filter", Uint32Array.prototype.filter)
interop.set("Uint32Array.find", Uint32Array.prototype.find)
interop.set("Uint32Array.findIndex", Uint32Array.prototype.findIndex)
interop.set("Uint32Array.findLast", Uint32Array.prototype.findLast)
interop.set("Uint32Array.findLastIndex", Uint32Array.prototype.findLastIndex)
interop.set("Uint32Array.forEach", Uint32Array.prototype.forEach)
interop.set("Uint32Array.from", Uint32Array.from)
interop.set("Uint32Array.includes", Uint32Array.prototype.includes)
interop.set("Uint32Array.indexOf", Uint32Array.prototype.indexOf)
interop.set("Uint32Array.join", Uint32Array.prototype.join)
interop.set("Uint32Array.keys", Uint32Array.prototype.keys)
interop.set("Uint32Array.lastIndexOf", Uint32Array.prototype.lastIndexOf)
interop.set("Uint32Array.length", Uint32Array.prototype.length)
interop.set("Uint32Array.map", Uint32Array.prototype.map)
interop.set("Uint32Array.new", (...args: unknown[]) => Reflect.construct(Uint32Array, args))
interop.set("Uint32Array.of", Uint32Array.of)
interop.set("Uint32Array.prototype", Uint32Array.prototype)
interop.set("Uint32Array.reduce", Uint32Array.prototype.reduce)
interop.set("Uint32Array.reduceRight", Uint32Array.prototype.reduceRight)
interop.set("Uint32Array.reverse", Uint32Array.prototype.reverse)
interop.set("Uint32Array.set", Uint32Array.prototype.set)
interop.set("Uint32Array.slice", Uint32Array.prototype.slice)
interop.set("Uint32Array.some", Uint32Array.prototype.some)
interop.set("Uint32Array.sort", Uint32Array.prototype.sort)
interop.set("Uint32Array.subarray", Uint32Array.prototype.subarray)
interop.set("Uint32Array.toLocaleString", Uint32Array.prototype.toLocaleString)
interop.set("Uint32Array.toReversed", Uint32Array.prototype.toReversed)
interop.set("Uint32Array.toSorted", Uint32Array.prototype.toSorted)
interop.set("Uint32Array.toString", Uint32Array.prototype.toString)
interop.set("Uint32Array.valueOf", Uint32Array.prototype.valueOf)
interop.set("Uint32Array.values", Uint32Array.prototype.values)
interop.set("Uint32Array.with", Uint32Array.prototype.with)
interop.set("Uint32Array[Symbol.iterator]", Uint32Array.prototype[Symbol.iterator])
interop.set("Uint8Array", Uint8Array)
interop.set("Uint8Array.at", Uint8Array.prototype.at)
interop.set("Uint8Array.buffer", Uint8Array.prototype.buffer)
interop.set("Uint8Array.byteLength", Uint8Array.prototype.byteLength)
interop.set("Uint8Array.byteOffset", Uint8Array.prototype.byteOffset)
interop.set("Uint8Array.copyWithin", Uint8Array.prototype.copyWithin)
interop.set("Uint8Array.entries", Uint8Array.prototype.entries)
interop.set("Uint8Array.every", Uint8Array.prototype.every)
interop.set("Uint8Array.fill", Uint8Array.prototype.fill)
interop.set("Uint8Array.filter", Uint8Array.prototype.filter)
interop.set("Uint8Array.find", Uint8Array.prototype.find)
interop.set("Uint8Array.findIndex", Uint8Array.prototype.findIndex)
interop.set("Uint8Array.findLast", Uint8Array.prototype.findLast)
interop.set("Uint8Array.findLastIndex", Uint8Array.prototype.findLastIndex)
interop.set("Uint8Array.forEach", Uint8Array.prototype.forEach)
interop.set("Uint8Array.from", Uint8Array.from)
interop.set("Uint8Array.includes", Uint8Array.prototype.includes)
interop.set("Uint8Array.indexOf", Uint8Array.prototype.indexOf)
interop.set("Uint8Array.join", Uint8Array.prototype.join)
interop.set("Uint8Array.keys", Uint8Array.prototype.keys)
interop.set("Uint8Array.lastIndexOf", Uint8Array.prototype.lastIndexOf)
interop.set("Uint8Array.length", Uint8Array.prototype.length)
interop.set("Uint8Array.map", Uint8Array.prototype.map)
interop.set("Uint8Array.new", (...args: unknown[]) => Reflect.construct(Uint8Array, args))
interop.set("Uint8Array.of", Uint8Array.of)
interop.set("Uint8Array.prototype", Uint8Array.prototype)
interop.set("Uint8Array.reduce", Uint8Array.prototype.reduce)
interop.set("Uint8Array.reduceRight", Uint8Array.prototype.reduceRight)
interop.set("Uint8Array.reverse", Uint8Array.prototype.reverse)
interop.set("Uint8Array.set", Uint8Array.prototype.set)
interop.set("Uint8Array.slice", Uint8Array.prototype.slice)
interop.set("Uint8Array.some", Uint8Array.prototype.some)
interop.set("Uint8Array.sort", Uint8Array.prototype.sort)
interop.set("Uint8Array.subarray", Uint8Array.prototype.subarray)
interop.set("Uint8Array.toLocaleString", Uint8Array.prototype.toLocaleString)
interop.set("Uint8Array.toReversed", Uint8Array.prototype.toReversed)
interop.set("Uint8Array.toSorted", Uint8Array.prototype.toSorted)
interop.set("Uint8Array.toString", Uint8Array.prototype.toString)
interop.set("Uint8Array.valueOf", Uint8Array.prototype.valueOf)
interop.set("Uint8Array.values", Uint8Array.prototype.values)
interop.set("Uint8Array.with", Uint8Array.prototype.with)
interop.set("Uint8Array[Symbol.iterator]", Uint8Array.prototype[Symbol.iterator])
interop.set("Uint8ClampedArray", Uint8ClampedArray)
interop.set("Uint8ClampedArray.at", Uint8ClampedArray.prototype.at)
interop.set("Uint8ClampedArray.buffer", Uint8ClampedArray.prototype.buffer)
interop.set("Uint8ClampedArray.byteLength", Uint8ClampedArray.prototype.byteLength)
interop.set("Uint8ClampedArray.byteOffset", Uint8ClampedArray.prototype.byteOffset)
interop.set("Uint8ClampedArray.copyWithin", Uint8ClampedArray.prototype.copyWithin)
interop.set("Uint8ClampedArray.entries", Uint8ClampedArray.prototype.entries)
interop.set("Uint8ClampedArray.every", Uint8ClampedArray.prototype.every)
interop.set("Uint8ClampedArray.fill", Uint8ClampedArray.prototype.fill)
interop.set("Uint8ClampedArray.filter", Uint8ClampedArray.prototype.filter)
interop.set("Uint8ClampedArray.find", Uint8ClampedArray.prototype.find)
interop.set("Uint8ClampedArray.findIndex", Uint8ClampedArray.prototype.findIndex)
interop.set("Uint8ClampedArray.findLast", Uint8ClampedArray.prototype.findLast)
interop.set("Uint8ClampedArray.findLastIndex", Uint8ClampedArray.prototype.findLastIndex)
interop.set("Uint8ClampedArray.forEach", Uint8ClampedArray.prototype.forEach)
interop.set("Uint8ClampedArray.from", Uint8ClampedArray.from)
interop.set("Uint8ClampedArray.includes", Uint8ClampedArray.prototype.includes)
interop.set("Uint8ClampedArray.indexOf", Uint8ClampedArray.prototype.indexOf)
interop.set("Uint8ClampedArray.join", Uint8ClampedArray.prototype.join)
interop.set("Uint8ClampedArray.keys", Uint8ClampedArray.prototype.keys)
interop.set("Uint8ClampedArray.lastIndexOf", Uint8ClampedArray.prototype.lastIndexOf)
interop.set("Uint8ClampedArray.length", Uint8ClampedArray.prototype.length)
interop.set("Uint8ClampedArray.map", Uint8ClampedArray.prototype.map)
interop.set("Uint8ClampedArray.new", (...args: unknown[]) => Reflect.construct(Uint8ClampedArray, args))
interop.set("Uint8ClampedArray.of", Uint8ClampedArray.of)
interop.set("Uint8ClampedArray.prototype", Uint8ClampedArray.prototype)
interop.set("Uint8ClampedArray.reduce", Uint8ClampedArray.prototype.reduce)
interop.set("Uint8ClampedArray.reduceRight", Uint8ClampedArray.prototype.reduceRight)
interop.set("Uint8ClampedArray.reverse", Uint8ClampedArray.prototype.reverse)
interop.set("Uint8ClampedArray.set", Uint8ClampedArray.prototype.set)
interop.set("Uint8ClampedArray.slice", Uint8ClampedArray.prototype.slice)
interop.set("Uint8ClampedArray.some", Uint8ClampedArray.prototype.some)
interop.set("Uint8ClampedArray.sort", Uint8ClampedArray.prototype.sort)
interop.set("Uint8ClampedArray.subarray", Uint8ClampedArray.prototype.subarray)
interop.set("Uint8ClampedArray.toLocaleString", Uint8ClampedArray.prototype.toLocaleString)
interop.set("Uint8ClampedArray.toReversed", Uint8ClampedArray.prototype.toReversed)
interop.set("Uint8ClampedArray.toSorted", Uint8ClampedArray.prototype.toSorted)
interop.set("Uint8ClampedArray.toString", Uint8ClampedArray.prototype.toString)
interop.set("Uint8ClampedArray.valueOf", Uint8ClampedArray.prototype.valueOf)
interop.set("Uint8ClampedArray.values", Uint8ClampedArray.prototype.values)
interop.set("Uint8ClampedArray.with", Uint8ClampedArray.prototype.with)
interop.set("Uint8ClampedArray[Symbol.iterator]", Uint8ClampedArray.prototype[Symbol.iterator])
interop.set("WeakMap", WeakMap)
interop.set("WeakMap.delete", WeakMap.prototype.delete)
interop.set("WeakMap.get", WeakMap.prototype.get)
interop.set("WeakMap.has", WeakMap.prototype.has)
interop.set("WeakMap.new", (...args: unknown[]) => Reflect.construct(WeakMap, args))
interop.set("WeakMap.prototype", WeakMap.prototype)
interop.set("WeakMap.set", WeakMap.prototype.set)
interop.set("WeakRef", WeakRef)
interop.set("WeakRef.deref", WeakRef.prototype.deref)
interop.set("WeakRef.new", (...args: unknown[]) => Reflect.construct(WeakRef, args))
interop.set("WeakRef.prototype", WeakRef.prototype)
interop.set("WeakSet", WeakSet)
interop.set("WeakSet.add", WeakSet.prototype.add)
interop.set("WeakSet.delete", WeakSet.prototype.delete)
interop.set("WeakSet.has", WeakSet.prototype.has)
interop.set("WeakSet.new", (...args: unknown[]) => Reflect.construct(WeakSet, args))
interop.set("WeakSet.prototype", WeakSet.prototype)
interop.set("decodeURI", decodeURI)
interop.set("decodeURIComponent", decodeURIComponent)
interop.set("encodeURI", encodeURI)
interop.set("encodeURIComponent", encodeURIComponent)
interop.set("escape", escape)
interop.set("eval", eval)
interop.set("isFinite", isFinite)
interop.set("isNaN", isNaN)
interop.set("parseFloat", parseFloat)
interop.set("parseInt", parseInt)
interop.set("unescape", unescape)
